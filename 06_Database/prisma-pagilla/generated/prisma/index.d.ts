
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model actor
 * 
 */
export type actor = $Result.DefaultSelection<Prisma.$actorPayload>
/**
 * Model address
 * 
 */
export type address = $Result.DefaultSelection<Prisma.$addressPayload>
/**
 * Model category
 * 
 */
export type category = $Result.DefaultSelection<Prisma.$categoryPayload>
/**
 * Model city
 * 
 */
export type city = $Result.DefaultSelection<Prisma.$cityPayload>
/**
 * Model country
 * 
 */
export type country = $Result.DefaultSelection<Prisma.$countryPayload>
/**
 * Model customer
 * 
 */
export type customer = $Result.DefaultSelection<Prisma.$customerPayload>
/**
 * Model film
 * 
 */
export type film = $Result.DefaultSelection<Prisma.$filmPayload>
/**
 * Model film_actor
 * 
 */
export type film_actor = $Result.DefaultSelection<Prisma.$film_actorPayload>
/**
 * Model film_category
 * 
 */
export type film_category = $Result.DefaultSelection<Prisma.$film_categoryPayload>
/**
 * Model film_comment
 * 
 */
export type film_comment = $Result.DefaultSelection<Prisma.$film_commentPayload>
/**
 * Model film_post
 * 
 */
export type film_post = $Result.DefaultSelection<Prisma.$film_postPayload>
/**
 * Model inventory
 * 
 */
export type inventory = $Result.DefaultSelection<Prisma.$inventoryPayload>
/**
 * Model language
 * 
 */
export type language = $Result.DefaultSelection<Prisma.$languagePayload>
/**
 * Model mention
 * 
 */
export type mention = $Result.DefaultSelection<Prisma.$mentionPayload>
/**
 * Model notification
 * 
 */
export type notification = $Result.DefaultSelection<Prisma.$notificationPayload>
/**
 * Model payment
 * This table is a partition table and requires additional setup for migrations. Visit https://pris.ly/d/partition-tables for more info.
 */
export type payment = $Result.DefaultSelection<Prisma.$paymentPayload>
/**
 * Model post_reaction
 * 
 */
export type post_reaction = $Result.DefaultSelection<Prisma.$post_reactionPayload>
/**
 * Model rental
 * 
 */
export type rental = $Result.DefaultSelection<Prisma.$rentalPayload>
/**
 * Model staff
 * 
 */
export type staff = $Result.DefaultSelection<Prisma.$staffPayload>
/**
 * Model store
 * 
 */
export type store = $Result.DefaultSelection<Prisma.$storePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const mpaa_rating: {
  G: 'G',
  PG: 'PG',
  PG_13: 'PG_13',
  R: 'R',
  NC_17: 'NC_17'
};

export type mpaa_rating = (typeof mpaa_rating)[keyof typeof mpaa_rating]


export const reaction_type: {
  LIKE: 'LIKE',
  HEART: 'HEART',
  SMILE: 'SMILE',
  ANGRY: 'ANGRY'
};

export type reaction_type = (typeof reaction_type)[keyof typeof reaction_type]

}

export type mpaa_rating = $Enums.mpaa_rating

export const mpaa_rating: typeof $Enums.mpaa_rating

export type reaction_type = $Enums.reaction_type

export const reaction_type: typeof $Enums.reaction_type

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Actors
 * const actors = await prisma.actor.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Actors
   * const actors = await prisma.actor.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.actor`: Exposes CRUD operations for the **actor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Actors
    * const actors = await prisma.actor.findMany()
    * ```
    */
  get actor(): Prisma.actorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.addressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.categoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.city`: Exposes CRUD operations for the **city** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cities
    * const cities = await prisma.city.findMany()
    * ```
    */
  get city(): Prisma.cityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.country`: Exposes CRUD operations for the **country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.countryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.customerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.film`: Exposes CRUD operations for the **film** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Films
    * const films = await prisma.film.findMany()
    * ```
    */
  get film(): Prisma.filmDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.film_actor`: Exposes CRUD operations for the **film_actor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Film_actors
    * const film_actors = await prisma.film_actor.findMany()
    * ```
    */
  get film_actor(): Prisma.film_actorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.film_category`: Exposes CRUD operations for the **film_category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Film_categories
    * const film_categories = await prisma.film_category.findMany()
    * ```
    */
  get film_category(): Prisma.film_categoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.film_comment`: Exposes CRUD operations for the **film_comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Film_comments
    * const film_comments = await prisma.film_comment.findMany()
    * ```
    */
  get film_comment(): Prisma.film_commentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.film_post`: Exposes CRUD operations for the **film_post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Film_posts
    * const film_posts = await prisma.film_post.findMany()
    * ```
    */
  get film_post(): Prisma.film_postDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.inventory`: Exposes CRUD operations for the **inventory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Inventories
    * const inventories = await prisma.inventory.findMany()
    * ```
    */
  get inventory(): Prisma.inventoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.language`: Exposes CRUD operations for the **language** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Languages
    * const languages = await prisma.language.findMany()
    * ```
    */
  get language(): Prisma.languageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.mention`: Exposes CRUD operations for the **mention** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mentions
    * const mentions = await prisma.mention.findMany()
    * ```
    */
  get mention(): Prisma.mentionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.notificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.paymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post_reaction`: Exposes CRUD operations for the **post_reaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Post_reactions
    * const post_reactions = await prisma.post_reaction.findMany()
    * ```
    */
  get post_reaction(): Prisma.post_reactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.rental`: Exposes CRUD operations for the **rental** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Rentals
    * const rentals = await prisma.rental.findMany()
    * ```
    */
  get rental(): Prisma.rentalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.staff`: Exposes CRUD operations for the **staff** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Staff
    * const staff = await prisma.staff.findMany()
    * ```
    */
  get staff(): Prisma.staffDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.store`: Exposes CRUD operations for the **store** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stores
    * const stores = await prisma.store.findMany()
    * ```
    */
  get store(): Prisma.storeDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    actor: 'actor',
    address: 'address',
    category: 'category',
    city: 'city',
    country: 'country',
    customer: 'customer',
    film: 'film',
    film_actor: 'film_actor',
    film_category: 'film_category',
    film_comment: 'film_comment',
    film_post: 'film_post',
    inventory: 'inventory',
    language: 'language',
    mention: 'mention',
    notification: 'notification',
    payment: 'payment',
    post_reaction: 'post_reaction',
    rental: 'rental',
    staff: 'staff',
    store: 'store'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "actor" | "address" | "category" | "city" | "country" | "customer" | "film" | "film_actor" | "film_category" | "film_comment" | "film_post" | "inventory" | "language" | "mention" | "notification" | "payment" | "post_reaction" | "rental" | "staff" | "store"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      actor: {
        payload: Prisma.$actorPayload<ExtArgs>
        fields: Prisma.actorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.actorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$actorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.actorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$actorPayload>
          }
          findFirst: {
            args: Prisma.actorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$actorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.actorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$actorPayload>
          }
          findMany: {
            args: Prisma.actorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$actorPayload>[]
          }
          create: {
            args: Prisma.actorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$actorPayload>
          }
          createMany: {
            args: Prisma.actorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.actorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$actorPayload>[]
          }
          delete: {
            args: Prisma.actorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$actorPayload>
          }
          update: {
            args: Prisma.actorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$actorPayload>
          }
          deleteMany: {
            args: Prisma.actorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.actorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.actorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$actorPayload>[]
          }
          upsert: {
            args: Prisma.actorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$actorPayload>
          }
          aggregate: {
            args: Prisma.ActorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActor>
          }
          groupBy: {
            args: Prisma.actorGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActorGroupByOutputType>[]
          }
          count: {
            args: Prisma.actorCountArgs<ExtArgs>
            result: $Utils.Optional<ActorCountAggregateOutputType> | number
          }
        }
      }
      address: {
        payload: Prisma.$addressPayload<ExtArgs>
        fields: Prisma.addressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.addressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$addressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.addressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$addressPayload>
          }
          findFirst: {
            args: Prisma.addressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$addressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.addressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$addressPayload>
          }
          findMany: {
            args: Prisma.addressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$addressPayload>[]
          }
          create: {
            args: Prisma.addressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$addressPayload>
          }
          createMany: {
            args: Prisma.addressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.addressCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$addressPayload>[]
          }
          delete: {
            args: Prisma.addressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$addressPayload>
          }
          update: {
            args: Prisma.addressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$addressPayload>
          }
          deleteMany: {
            args: Prisma.addressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.addressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.addressUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$addressPayload>[]
          }
          upsert: {
            args: Prisma.addressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$addressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.addressGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.addressCountArgs<ExtArgs>
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      category: {
        payload: Prisma.$categoryPayload<ExtArgs>
        fields: Prisma.categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          findFirst: {
            args: Prisma.categoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          findMany: {
            args: Prisma.categoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>[]
          }
          create: {
            args: Prisma.categoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          createMany: {
            args: Prisma.categoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.categoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>[]
          }
          delete: {
            args: Prisma.categoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          update: {
            args: Prisma.categoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          deleteMany: {
            args: Prisma.categoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.categoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.categoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>[]
          }
          upsert: {
            args: Prisma.categoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$categoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.categoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.categoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      city: {
        payload: Prisma.$cityPayload<ExtArgs>
        fields: Prisma.cityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.cityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.cityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cityPayload>
          }
          findFirst: {
            args: Prisma.cityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.cityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cityPayload>
          }
          findMany: {
            args: Prisma.cityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cityPayload>[]
          }
          create: {
            args: Prisma.cityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cityPayload>
          }
          createMany: {
            args: Prisma.cityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.cityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cityPayload>[]
          }
          delete: {
            args: Prisma.cityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cityPayload>
          }
          update: {
            args: Prisma.cityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cityPayload>
          }
          deleteMany: {
            args: Prisma.cityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.cityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.cityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cityPayload>[]
          }
          upsert: {
            args: Prisma.cityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$cityPayload>
          }
          aggregate: {
            args: Prisma.CityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCity>
          }
          groupBy: {
            args: Prisma.cityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CityGroupByOutputType>[]
          }
          count: {
            args: Prisma.cityCountArgs<ExtArgs>
            result: $Utils.Optional<CityCountAggregateOutputType> | number
          }
        }
      }
      country: {
        payload: Prisma.$countryPayload<ExtArgs>
        fields: Prisma.countryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.countryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$countryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.countryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$countryPayload>
          }
          findFirst: {
            args: Prisma.countryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$countryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.countryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$countryPayload>
          }
          findMany: {
            args: Prisma.countryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$countryPayload>[]
          }
          create: {
            args: Prisma.countryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$countryPayload>
          }
          createMany: {
            args: Prisma.countryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.countryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$countryPayload>[]
          }
          delete: {
            args: Prisma.countryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$countryPayload>
          }
          update: {
            args: Prisma.countryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$countryPayload>
          }
          deleteMany: {
            args: Prisma.countryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.countryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.countryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$countryPayload>[]
          }
          upsert: {
            args: Prisma.countryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$countryPayload>
          }
          aggregate: {
            args: Prisma.CountryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCountry>
          }
          groupBy: {
            args: Prisma.countryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CountryGroupByOutputType>[]
          }
          count: {
            args: Prisma.countryCountArgs<ExtArgs>
            result: $Utils.Optional<CountryCountAggregateOutputType> | number
          }
        }
      }
      customer: {
        payload: Prisma.$customerPayload<ExtArgs>
        fields: Prisma.customerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.customerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.customerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          findFirst: {
            args: Prisma.customerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.customerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          findMany: {
            args: Prisma.customerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>[]
          }
          create: {
            args: Prisma.customerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          createMany: {
            args: Prisma.customerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.customerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>[]
          }
          delete: {
            args: Prisma.customerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          update: {
            args: Prisma.customerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          deleteMany: {
            args: Prisma.customerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.customerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.customerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>[]
          }
          upsert: {
            args: Prisma.customerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.customerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.customerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      film: {
        payload: Prisma.$filmPayload<ExtArgs>
        fields: Prisma.filmFieldRefs
        operations: {
          findUnique: {
            args: Prisma.filmFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$filmPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.filmFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$filmPayload>
          }
          findFirst: {
            args: Prisma.filmFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$filmPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.filmFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$filmPayload>
          }
          findMany: {
            args: Prisma.filmFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$filmPayload>[]
          }
          delete: {
            args: Prisma.filmDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$filmPayload>
          }
          update: {
            args: Prisma.filmUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$filmPayload>
          }
          deleteMany: {
            args: Prisma.filmDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.filmUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.filmUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$filmPayload>[]
          }
          aggregate: {
            args: Prisma.FilmAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFilm>
          }
          groupBy: {
            args: Prisma.filmGroupByArgs<ExtArgs>
            result: $Utils.Optional<FilmGroupByOutputType>[]
          }
          count: {
            args: Prisma.filmCountArgs<ExtArgs>
            result: $Utils.Optional<FilmCountAggregateOutputType> | number
          }
        }
      }
      film_actor: {
        payload: Prisma.$film_actorPayload<ExtArgs>
        fields: Prisma.film_actorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.film_actorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_actorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.film_actorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_actorPayload>
          }
          findFirst: {
            args: Prisma.film_actorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_actorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.film_actorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_actorPayload>
          }
          findMany: {
            args: Prisma.film_actorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_actorPayload>[]
          }
          create: {
            args: Prisma.film_actorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_actorPayload>
          }
          createMany: {
            args: Prisma.film_actorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.film_actorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_actorPayload>[]
          }
          delete: {
            args: Prisma.film_actorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_actorPayload>
          }
          update: {
            args: Prisma.film_actorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_actorPayload>
          }
          deleteMany: {
            args: Prisma.film_actorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.film_actorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.film_actorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_actorPayload>[]
          }
          upsert: {
            args: Prisma.film_actorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_actorPayload>
          }
          aggregate: {
            args: Prisma.Film_actorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFilm_actor>
          }
          groupBy: {
            args: Prisma.film_actorGroupByArgs<ExtArgs>
            result: $Utils.Optional<Film_actorGroupByOutputType>[]
          }
          count: {
            args: Prisma.film_actorCountArgs<ExtArgs>
            result: $Utils.Optional<Film_actorCountAggregateOutputType> | number
          }
        }
      }
      film_category: {
        payload: Prisma.$film_categoryPayload<ExtArgs>
        fields: Prisma.film_categoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.film_categoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_categoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.film_categoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_categoryPayload>
          }
          findFirst: {
            args: Prisma.film_categoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_categoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.film_categoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_categoryPayload>
          }
          findMany: {
            args: Prisma.film_categoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_categoryPayload>[]
          }
          create: {
            args: Prisma.film_categoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_categoryPayload>
          }
          createMany: {
            args: Prisma.film_categoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.film_categoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_categoryPayload>[]
          }
          delete: {
            args: Prisma.film_categoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_categoryPayload>
          }
          update: {
            args: Prisma.film_categoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_categoryPayload>
          }
          deleteMany: {
            args: Prisma.film_categoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.film_categoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.film_categoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_categoryPayload>[]
          }
          upsert: {
            args: Prisma.film_categoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_categoryPayload>
          }
          aggregate: {
            args: Prisma.Film_categoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFilm_category>
          }
          groupBy: {
            args: Prisma.film_categoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<Film_categoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.film_categoryCountArgs<ExtArgs>
            result: $Utils.Optional<Film_categoryCountAggregateOutputType> | number
          }
        }
      }
      film_comment: {
        payload: Prisma.$film_commentPayload<ExtArgs>
        fields: Prisma.film_commentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.film_commentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_commentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.film_commentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_commentPayload>
          }
          findFirst: {
            args: Prisma.film_commentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_commentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.film_commentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_commentPayload>
          }
          findMany: {
            args: Prisma.film_commentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_commentPayload>[]
          }
          create: {
            args: Prisma.film_commentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_commentPayload>
          }
          createMany: {
            args: Prisma.film_commentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.film_commentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_commentPayload>[]
          }
          delete: {
            args: Prisma.film_commentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_commentPayload>
          }
          update: {
            args: Prisma.film_commentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_commentPayload>
          }
          deleteMany: {
            args: Prisma.film_commentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.film_commentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.film_commentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_commentPayload>[]
          }
          upsert: {
            args: Prisma.film_commentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_commentPayload>
          }
          aggregate: {
            args: Prisma.Film_commentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFilm_comment>
          }
          groupBy: {
            args: Prisma.film_commentGroupByArgs<ExtArgs>
            result: $Utils.Optional<Film_commentGroupByOutputType>[]
          }
          count: {
            args: Prisma.film_commentCountArgs<ExtArgs>
            result: $Utils.Optional<Film_commentCountAggregateOutputType> | number
          }
        }
      }
      film_post: {
        payload: Prisma.$film_postPayload<ExtArgs>
        fields: Prisma.film_postFieldRefs
        operations: {
          findUnique: {
            args: Prisma.film_postFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_postPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.film_postFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_postPayload>
          }
          findFirst: {
            args: Prisma.film_postFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_postPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.film_postFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_postPayload>
          }
          findMany: {
            args: Prisma.film_postFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_postPayload>[]
          }
          create: {
            args: Prisma.film_postCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_postPayload>
          }
          createMany: {
            args: Prisma.film_postCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.film_postCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_postPayload>[]
          }
          delete: {
            args: Prisma.film_postDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_postPayload>
          }
          update: {
            args: Prisma.film_postUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_postPayload>
          }
          deleteMany: {
            args: Prisma.film_postDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.film_postUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.film_postUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_postPayload>[]
          }
          upsert: {
            args: Prisma.film_postUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$film_postPayload>
          }
          aggregate: {
            args: Prisma.Film_postAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFilm_post>
          }
          groupBy: {
            args: Prisma.film_postGroupByArgs<ExtArgs>
            result: $Utils.Optional<Film_postGroupByOutputType>[]
          }
          count: {
            args: Prisma.film_postCountArgs<ExtArgs>
            result: $Utils.Optional<Film_postCountAggregateOutputType> | number
          }
        }
      }
      inventory: {
        payload: Prisma.$inventoryPayload<ExtArgs>
        fields: Prisma.inventoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.inventoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inventoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.inventoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inventoryPayload>
          }
          findFirst: {
            args: Prisma.inventoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inventoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.inventoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inventoryPayload>
          }
          findMany: {
            args: Prisma.inventoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inventoryPayload>[]
          }
          create: {
            args: Prisma.inventoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inventoryPayload>
          }
          createMany: {
            args: Prisma.inventoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.inventoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inventoryPayload>[]
          }
          delete: {
            args: Prisma.inventoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inventoryPayload>
          }
          update: {
            args: Prisma.inventoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inventoryPayload>
          }
          deleteMany: {
            args: Prisma.inventoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.inventoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.inventoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inventoryPayload>[]
          }
          upsert: {
            args: Prisma.inventoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$inventoryPayload>
          }
          aggregate: {
            args: Prisma.InventoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInventory>
          }
          groupBy: {
            args: Prisma.inventoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<InventoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.inventoryCountArgs<ExtArgs>
            result: $Utils.Optional<InventoryCountAggregateOutputType> | number
          }
        }
      }
      language: {
        payload: Prisma.$languagePayload<ExtArgs>
        fields: Prisma.languageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.languageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$languagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.languageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$languagePayload>
          }
          findFirst: {
            args: Prisma.languageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$languagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.languageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$languagePayload>
          }
          findMany: {
            args: Prisma.languageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$languagePayload>[]
          }
          create: {
            args: Prisma.languageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$languagePayload>
          }
          createMany: {
            args: Prisma.languageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.languageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$languagePayload>[]
          }
          delete: {
            args: Prisma.languageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$languagePayload>
          }
          update: {
            args: Prisma.languageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$languagePayload>
          }
          deleteMany: {
            args: Prisma.languageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.languageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.languageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$languagePayload>[]
          }
          upsert: {
            args: Prisma.languageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$languagePayload>
          }
          aggregate: {
            args: Prisma.LanguageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLanguage>
          }
          groupBy: {
            args: Prisma.languageGroupByArgs<ExtArgs>
            result: $Utils.Optional<LanguageGroupByOutputType>[]
          }
          count: {
            args: Prisma.languageCountArgs<ExtArgs>
            result: $Utils.Optional<LanguageCountAggregateOutputType> | number
          }
        }
      }
      mention: {
        payload: Prisma.$mentionPayload<ExtArgs>
        fields: Prisma.mentionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.mentionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mentionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.mentionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mentionPayload>
          }
          findFirst: {
            args: Prisma.mentionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mentionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.mentionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mentionPayload>
          }
          findMany: {
            args: Prisma.mentionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mentionPayload>[]
          }
          create: {
            args: Prisma.mentionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mentionPayload>
          }
          createMany: {
            args: Prisma.mentionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.mentionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mentionPayload>[]
          }
          delete: {
            args: Prisma.mentionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mentionPayload>
          }
          update: {
            args: Prisma.mentionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mentionPayload>
          }
          deleteMany: {
            args: Prisma.mentionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.mentionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.mentionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mentionPayload>[]
          }
          upsert: {
            args: Prisma.mentionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$mentionPayload>
          }
          aggregate: {
            args: Prisma.MentionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMention>
          }
          groupBy: {
            args: Prisma.mentionGroupByArgs<ExtArgs>
            result: $Utils.Optional<MentionGroupByOutputType>[]
          }
          count: {
            args: Prisma.mentionCountArgs<ExtArgs>
            result: $Utils.Optional<MentionCountAggregateOutputType> | number
          }
        }
      }
      notification: {
        payload: Prisma.$notificationPayload<ExtArgs>
        fields: Prisma.notificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.notificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.notificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          findFirst: {
            args: Prisma.notificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.notificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          findMany: {
            args: Prisma.notificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>[]
          }
          create: {
            args: Prisma.notificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          createMany: {
            args: Prisma.notificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.notificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>[]
          }
          delete: {
            args: Prisma.notificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          update: {
            args: Prisma.notificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          deleteMany: {
            args: Prisma.notificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.notificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.notificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>[]
          }
          upsert: {
            args: Prisma.notificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$notificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.notificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.notificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      payment: {
        payload: Prisma.$paymentPayload<ExtArgs>
        fields: Prisma.paymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.paymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.paymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          findFirst: {
            args: Prisma.paymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.paymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          findMany: {
            args: Prisma.paymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>[]
          }
          create: {
            args: Prisma.paymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          createMany: {
            args: Prisma.paymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.paymentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>[]
          }
          delete: {
            args: Prisma.paymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          update: {
            args: Prisma.paymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          deleteMany: {
            args: Prisma.paymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.paymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.paymentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>[]
          }
          upsert: {
            args: Prisma.paymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$paymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.paymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.paymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      post_reaction: {
        payload: Prisma.$post_reactionPayload<ExtArgs>
        fields: Prisma.post_reactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.post_reactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_reactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.post_reactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_reactionPayload>
          }
          findFirst: {
            args: Prisma.post_reactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_reactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.post_reactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_reactionPayload>
          }
          findMany: {
            args: Prisma.post_reactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_reactionPayload>[]
          }
          create: {
            args: Prisma.post_reactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_reactionPayload>
          }
          createMany: {
            args: Prisma.post_reactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.post_reactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_reactionPayload>[]
          }
          delete: {
            args: Prisma.post_reactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_reactionPayload>
          }
          update: {
            args: Prisma.post_reactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_reactionPayload>
          }
          deleteMany: {
            args: Prisma.post_reactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.post_reactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.post_reactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_reactionPayload>[]
          }
          upsert: {
            args: Prisma.post_reactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$post_reactionPayload>
          }
          aggregate: {
            args: Prisma.Post_reactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost_reaction>
          }
          groupBy: {
            args: Prisma.post_reactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<Post_reactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.post_reactionCountArgs<ExtArgs>
            result: $Utils.Optional<Post_reactionCountAggregateOutputType> | number
          }
        }
      }
      rental: {
        payload: Prisma.$rentalPayload<ExtArgs>
        fields: Prisma.rentalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.rentalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rentalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.rentalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rentalPayload>
          }
          findFirst: {
            args: Prisma.rentalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rentalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.rentalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rentalPayload>
          }
          findMany: {
            args: Prisma.rentalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rentalPayload>[]
          }
          create: {
            args: Prisma.rentalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rentalPayload>
          }
          createMany: {
            args: Prisma.rentalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.rentalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rentalPayload>[]
          }
          delete: {
            args: Prisma.rentalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rentalPayload>
          }
          update: {
            args: Prisma.rentalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rentalPayload>
          }
          deleteMany: {
            args: Prisma.rentalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.rentalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.rentalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rentalPayload>[]
          }
          upsert: {
            args: Prisma.rentalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$rentalPayload>
          }
          aggregate: {
            args: Prisma.RentalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRental>
          }
          groupBy: {
            args: Prisma.rentalGroupByArgs<ExtArgs>
            result: $Utils.Optional<RentalGroupByOutputType>[]
          }
          count: {
            args: Prisma.rentalCountArgs<ExtArgs>
            result: $Utils.Optional<RentalCountAggregateOutputType> | number
          }
        }
      }
      staff: {
        payload: Prisma.$staffPayload<ExtArgs>
        fields: Prisma.staffFieldRefs
        operations: {
          findUnique: {
            args: Prisma.staffFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$staffPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.staffFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$staffPayload>
          }
          findFirst: {
            args: Prisma.staffFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$staffPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.staffFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$staffPayload>
          }
          findMany: {
            args: Prisma.staffFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$staffPayload>[]
          }
          create: {
            args: Prisma.staffCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$staffPayload>
          }
          createMany: {
            args: Prisma.staffCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.staffCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$staffPayload>[]
          }
          delete: {
            args: Prisma.staffDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$staffPayload>
          }
          update: {
            args: Prisma.staffUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$staffPayload>
          }
          deleteMany: {
            args: Prisma.staffDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.staffUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.staffUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$staffPayload>[]
          }
          upsert: {
            args: Prisma.staffUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$staffPayload>
          }
          aggregate: {
            args: Prisma.StaffAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStaff>
          }
          groupBy: {
            args: Prisma.staffGroupByArgs<ExtArgs>
            result: $Utils.Optional<StaffGroupByOutputType>[]
          }
          count: {
            args: Prisma.staffCountArgs<ExtArgs>
            result: $Utils.Optional<StaffCountAggregateOutputType> | number
          }
        }
      }
      store: {
        payload: Prisma.$storePayload<ExtArgs>
        fields: Prisma.storeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.storeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.storeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>
          }
          findFirst: {
            args: Prisma.storeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.storeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>
          }
          findMany: {
            args: Prisma.storeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>[]
          }
          create: {
            args: Prisma.storeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>
          }
          createMany: {
            args: Prisma.storeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.storeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>[]
          }
          delete: {
            args: Prisma.storeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>
          }
          update: {
            args: Prisma.storeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>
          }
          deleteMany: {
            args: Prisma.storeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.storeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.storeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>[]
          }
          upsert: {
            args: Prisma.storeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$storePayload>
          }
          aggregate: {
            args: Prisma.StoreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStore>
          }
          groupBy: {
            args: Prisma.storeGroupByArgs<ExtArgs>
            result: $Utils.Optional<StoreGroupByOutputType>[]
          }
          count: {
            args: Prisma.storeCountArgs<ExtArgs>
            result: $Utils.Optional<StoreCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    actor?: actorOmit
    address?: addressOmit
    category?: categoryOmit
    city?: cityOmit
    country?: countryOmit
    customer?: customerOmit
    film?: filmOmit
    film_actor?: film_actorOmit
    film_category?: film_categoryOmit
    film_comment?: film_commentOmit
    film_post?: film_postOmit
    inventory?: inventoryOmit
    language?: languageOmit
    mention?: mentionOmit
    notification?: notificationOmit
    payment?: paymentOmit
    post_reaction?: post_reactionOmit
    rental?: rentalOmit
    staff?: staffOmit
    store?: storeOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ActorCountOutputType
   */

  export type ActorCountOutputType = {
    film_actor: number
  }

  export type ActorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_actor?: boolean | ActorCountOutputTypeCountFilm_actorArgs
  }

  // Custom InputTypes
  /**
   * ActorCountOutputType without action
   */
  export type ActorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActorCountOutputType
     */
    select?: ActorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActorCountOutputType without action
   */
  export type ActorCountOutputTypeCountFilm_actorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: film_actorWhereInput
  }


  /**
   * Count Type AddressCountOutputType
   */

  export type AddressCountOutputType = {
    customer: number
    staff: number
    store: number
  }

  export type AddressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | AddressCountOutputTypeCountCustomerArgs
    staff?: boolean | AddressCountOutputTypeCountStaffArgs
    store?: boolean | AddressCountOutputTypeCountStoreArgs
  }

  // Custom InputTypes
  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressCountOutputType
     */
    select?: AddressCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: customerWhereInput
  }

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: staffWhereInput
  }

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountStoreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: storeWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    film_category: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_category?: boolean | CategoryCountOutputTypeCountFilm_categoryArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountFilm_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: film_categoryWhereInput
  }


  /**
   * Count Type CityCountOutputType
   */

  export type CityCountOutputType = {
    address: number
  }

  export type CityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | CityCountOutputTypeCountAddressArgs
  }

  // Custom InputTypes
  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CityCountOutputType
     */
    select?: CityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeCountAddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: addressWhereInput
  }


  /**
   * Count Type CountryCountOutputType
   */

  export type CountryCountOutputType = {
    city: number
  }

  export type CountryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    city?: boolean | CountryCountOutputTypeCountCityArgs
  }

  // Custom InputTypes
  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountryCountOutputType
     */
    select?: CountryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountCityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cityWhereInput
  }


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    film_comment: number
    mention: number
    notification: number
    post_reaction: number
    rental: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_comment?: boolean | CustomerCountOutputTypeCountFilm_commentArgs
    mention?: boolean | CustomerCountOutputTypeCountMentionArgs
    notification?: boolean | CustomerCountOutputTypeCountNotificationArgs
    post_reaction?: boolean | CustomerCountOutputTypeCountPost_reactionArgs
    rental?: boolean | CustomerCountOutputTypeCountRentalArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountFilm_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: film_commentWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountMentionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mentionWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountNotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountPost_reactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_reactionWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountRentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rentalWhereInput
  }


  /**
   * Count Type FilmCountOutputType
   */

  export type FilmCountOutputType = {
    film_actor: number
    film_category: number
    film_post: number
    inventory: number
  }

  export type FilmCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_actor?: boolean | FilmCountOutputTypeCountFilm_actorArgs
    film_category?: boolean | FilmCountOutputTypeCountFilm_categoryArgs
    film_post?: boolean | FilmCountOutputTypeCountFilm_postArgs
    inventory?: boolean | FilmCountOutputTypeCountInventoryArgs
  }

  // Custom InputTypes
  /**
   * FilmCountOutputType without action
   */
  export type FilmCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FilmCountOutputType
     */
    select?: FilmCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FilmCountOutputType without action
   */
  export type FilmCountOutputTypeCountFilm_actorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: film_actorWhereInput
  }

  /**
   * FilmCountOutputType without action
   */
  export type FilmCountOutputTypeCountFilm_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: film_categoryWhereInput
  }

  /**
   * FilmCountOutputType without action
   */
  export type FilmCountOutputTypeCountFilm_postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: film_postWhereInput
  }

  /**
   * FilmCountOutputType without action
   */
  export type FilmCountOutputTypeCountInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: inventoryWhereInput
  }


  /**
   * Count Type Film_commentCountOutputType
   */

  export type Film_commentCountOutputType = {
    mention: number
  }

  export type Film_commentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mention?: boolean | Film_commentCountOutputTypeCountMentionArgs
  }

  // Custom InputTypes
  /**
   * Film_commentCountOutputType without action
   */
  export type Film_commentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film_commentCountOutputType
     */
    select?: Film_commentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Film_commentCountOutputType without action
   */
  export type Film_commentCountOutputTypeCountMentionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mentionWhereInput
  }


  /**
   * Count Type Film_postCountOutputType
   */

  export type Film_postCountOutputType = {
    film_comment: number
    post_reaction: number
  }

  export type Film_postCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_comment?: boolean | Film_postCountOutputTypeCountFilm_commentArgs
    post_reaction?: boolean | Film_postCountOutputTypeCountPost_reactionArgs
  }

  // Custom InputTypes
  /**
   * Film_postCountOutputType without action
   */
  export type Film_postCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film_postCountOutputType
     */
    select?: Film_postCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * Film_postCountOutputType without action
   */
  export type Film_postCountOutputTypeCountFilm_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: film_commentWhereInput
  }

  /**
   * Film_postCountOutputType without action
   */
  export type Film_postCountOutputTypeCountPost_reactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_reactionWhereInput
  }


  /**
   * Count Type InventoryCountOutputType
   */

  export type InventoryCountOutputType = {
    rental: number
  }

  export type InventoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rental?: boolean | InventoryCountOutputTypeCountRentalArgs
  }

  // Custom InputTypes
  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InventoryCountOutputType
     */
    select?: InventoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * InventoryCountOutputType without action
   */
  export type InventoryCountOutputTypeCountRentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rentalWhereInput
  }


  /**
   * Count Type LanguageCountOutputType
   */

  export type LanguageCountOutputType = {
    film_film_language_idTolanguage: number
    film_film_original_language_idTolanguage: number
  }

  export type LanguageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_film_language_idTolanguage?: boolean | LanguageCountOutputTypeCountFilm_film_language_idTolanguageArgs
    film_film_original_language_idTolanguage?: boolean | LanguageCountOutputTypeCountFilm_film_original_language_idTolanguageArgs
  }

  // Custom InputTypes
  /**
   * LanguageCountOutputType without action
   */
  export type LanguageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LanguageCountOutputType
     */
    select?: LanguageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LanguageCountOutputType without action
   */
  export type LanguageCountOutputTypeCountFilm_film_language_idTolanguageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: filmWhereInput
  }

  /**
   * LanguageCountOutputType without action
   */
  export type LanguageCountOutputTypeCountFilm_film_original_language_idTolanguageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: filmWhereInput
  }


  /**
   * Count Type StaffCountOutputType
   */

  export type StaffCountOutputType = {
    rental: number
  }

  export type StaffCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rental?: boolean | StaffCountOutputTypeCountRentalArgs
  }

  // Custom InputTypes
  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StaffCountOutputType
     */
    select?: StaffCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StaffCountOutputType without action
   */
  export type StaffCountOutputTypeCountRentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rentalWhereInput
  }


  /**
   * Count Type StoreCountOutputType
   */

  export type StoreCountOutputType = {
    customer: number
    inventory: number
    staff: number
  }

  export type StoreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | StoreCountOutputTypeCountCustomerArgs
    inventory?: boolean | StoreCountOutputTypeCountInventoryArgs
    staff?: boolean | StoreCountOutputTypeCountStaffArgs
  }

  // Custom InputTypes
  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StoreCountOutputType
     */
    select?: StoreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountCustomerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: customerWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountInventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: inventoryWhereInput
  }

  /**
   * StoreCountOutputType without action
   */
  export type StoreCountOutputTypeCountStaffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: staffWhereInput
  }


  /**
   * Models
   */

  /**
   * Model actor
   */

  export type AggregateActor = {
    _count: ActorCountAggregateOutputType | null
    _avg: ActorAvgAggregateOutputType | null
    _sum: ActorSumAggregateOutputType | null
    _min: ActorMinAggregateOutputType | null
    _max: ActorMaxAggregateOutputType | null
  }

  export type ActorAvgAggregateOutputType = {
    actor_id: number | null
  }

  export type ActorSumAggregateOutputType = {
    actor_id: number | null
  }

  export type ActorMinAggregateOutputType = {
    actor_id: number | null
    first_name: string | null
    last_name: string | null
    last_update: Date | null
  }

  export type ActorMaxAggregateOutputType = {
    actor_id: number | null
    first_name: string | null
    last_name: string | null
    last_update: Date | null
  }

  export type ActorCountAggregateOutputType = {
    actor_id: number
    first_name: number
    last_name: number
    last_update: number
    _all: number
  }


  export type ActorAvgAggregateInputType = {
    actor_id?: true
  }

  export type ActorSumAggregateInputType = {
    actor_id?: true
  }

  export type ActorMinAggregateInputType = {
    actor_id?: true
    first_name?: true
    last_name?: true
    last_update?: true
  }

  export type ActorMaxAggregateInputType = {
    actor_id?: true
    first_name?: true
    last_name?: true
    last_update?: true
  }

  export type ActorCountAggregateInputType = {
    actor_id?: true
    first_name?: true
    last_name?: true
    last_update?: true
    _all?: true
  }

  export type ActorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which actor to aggregate.
     */
    where?: actorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of actors to fetch.
     */
    orderBy?: actorOrderByWithRelationInput | actorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: actorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` actors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` actors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned actors
    **/
    _count?: true | ActorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActorMaxAggregateInputType
  }

  export type GetActorAggregateType<T extends ActorAggregateArgs> = {
        [P in keyof T & keyof AggregateActor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActor[P]>
      : GetScalarType<T[P], AggregateActor[P]>
  }




  export type actorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: actorWhereInput
    orderBy?: actorOrderByWithAggregationInput | actorOrderByWithAggregationInput[]
    by: ActorScalarFieldEnum[] | ActorScalarFieldEnum
    having?: actorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActorCountAggregateInputType | true
    _avg?: ActorAvgAggregateInputType
    _sum?: ActorSumAggregateInputType
    _min?: ActorMinAggregateInputType
    _max?: ActorMaxAggregateInputType
  }

  export type ActorGroupByOutputType = {
    actor_id: number
    first_name: string
    last_name: string
    last_update: Date
    _count: ActorCountAggregateOutputType | null
    _avg: ActorAvgAggregateOutputType | null
    _sum: ActorSumAggregateOutputType | null
    _min: ActorMinAggregateOutputType | null
    _max: ActorMaxAggregateOutputType | null
  }

  type GetActorGroupByPayload<T extends actorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActorGroupByOutputType[P]>
            : GetScalarType<T[P], ActorGroupByOutputType[P]>
        }
      >
    >


  export type actorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    actor_id?: boolean
    first_name?: boolean
    last_name?: boolean
    last_update?: boolean
    film_actor?: boolean | actor$film_actorArgs<ExtArgs>
    _count?: boolean | ActorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["actor"]>

  export type actorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    actor_id?: boolean
    first_name?: boolean
    last_name?: boolean
    last_update?: boolean
  }, ExtArgs["result"]["actor"]>

  export type actorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    actor_id?: boolean
    first_name?: boolean
    last_name?: boolean
    last_update?: boolean
  }, ExtArgs["result"]["actor"]>

  export type actorSelectScalar = {
    actor_id?: boolean
    first_name?: boolean
    last_name?: boolean
    last_update?: boolean
  }

  export type actorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"actor_id" | "first_name" | "last_name" | "last_update", ExtArgs["result"]["actor"]>
  export type actorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_actor?: boolean | actor$film_actorArgs<ExtArgs>
    _count?: boolean | ActorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type actorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type actorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $actorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "actor"
    objects: {
      film_actor: Prisma.$film_actorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      actor_id: number
      first_name: string
      last_name: string
      last_update: Date
    }, ExtArgs["result"]["actor"]>
    composites: {}
  }

  type actorGetPayload<S extends boolean | null | undefined | actorDefaultArgs> = $Result.GetResult<Prisma.$actorPayload, S>

  type actorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<actorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActorCountAggregateInputType | true
    }

  export interface actorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['actor'], meta: { name: 'actor' } }
    /**
     * Find zero or one Actor that matches the filter.
     * @param {actorFindUniqueArgs} args - Arguments to find a Actor
     * @example
     * // Get one Actor
     * const actor = await prisma.actor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends actorFindUniqueArgs>(args: SelectSubset<T, actorFindUniqueArgs<ExtArgs>>): Prisma__actorClient<$Result.GetResult<Prisma.$actorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Actor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {actorFindUniqueOrThrowArgs} args - Arguments to find a Actor
     * @example
     * // Get one Actor
     * const actor = await prisma.actor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends actorFindUniqueOrThrowArgs>(args: SelectSubset<T, actorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__actorClient<$Result.GetResult<Prisma.$actorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Actor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {actorFindFirstArgs} args - Arguments to find a Actor
     * @example
     * // Get one Actor
     * const actor = await prisma.actor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends actorFindFirstArgs>(args?: SelectSubset<T, actorFindFirstArgs<ExtArgs>>): Prisma__actorClient<$Result.GetResult<Prisma.$actorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Actor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {actorFindFirstOrThrowArgs} args - Arguments to find a Actor
     * @example
     * // Get one Actor
     * const actor = await prisma.actor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends actorFindFirstOrThrowArgs>(args?: SelectSubset<T, actorFindFirstOrThrowArgs<ExtArgs>>): Prisma__actorClient<$Result.GetResult<Prisma.$actorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Actors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {actorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Actors
     * const actors = await prisma.actor.findMany()
     * 
     * // Get first 10 Actors
     * const actors = await prisma.actor.findMany({ take: 10 })
     * 
     * // Only select the `actor_id`
     * const actorWithActor_idOnly = await prisma.actor.findMany({ select: { actor_id: true } })
     * 
     */
    findMany<T extends actorFindManyArgs>(args?: SelectSubset<T, actorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$actorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Actor.
     * @param {actorCreateArgs} args - Arguments to create a Actor.
     * @example
     * // Create one Actor
     * const Actor = await prisma.actor.create({
     *   data: {
     *     // ... data to create a Actor
     *   }
     * })
     * 
     */
    create<T extends actorCreateArgs>(args: SelectSubset<T, actorCreateArgs<ExtArgs>>): Prisma__actorClient<$Result.GetResult<Prisma.$actorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Actors.
     * @param {actorCreateManyArgs} args - Arguments to create many Actors.
     * @example
     * // Create many Actors
     * const actor = await prisma.actor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends actorCreateManyArgs>(args?: SelectSubset<T, actorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Actors and returns the data saved in the database.
     * @param {actorCreateManyAndReturnArgs} args - Arguments to create many Actors.
     * @example
     * // Create many Actors
     * const actor = await prisma.actor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Actors and only return the `actor_id`
     * const actorWithActor_idOnly = await prisma.actor.createManyAndReturn({
     *   select: { actor_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends actorCreateManyAndReturnArgs>(args?: SelectSubset<T, actorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$actorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Actor.
     * @param {actorDeleteArgs} args - Arguments to delete one Actor.
     * @example
     * // Delete one Actor
     * const Actor = await prisma.actor.delete({
     *   where: {
     *     // ... filter to delete one Actor
     *   }
     * })
     * 
     */
    delete<T extends actorDeleteArgs>(args: SelectSubset<T, actorDeleteArgs<ExtArgs>>): Prisma__actorClient<$Result.GetResult<Prisma.$actorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Actor.
     * @param {actorUpdateArgs} args - Arguments to update one Actor.
     * @example
     * // Update one Actor
     * const actor = await prisma.actor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends actorUpdateArgs>(args: SelectSubset<T, actorUpdateArgs<ExtArgs>>): Prisma__actorClient<$Result.GetResult<Prisma.$actorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Actors.
     * @param {actorDeleteManyArgs} args - Arguments to filter Actors to delete.
     * @example
     * // Delete a few Actors
     * const { count } = await prisma.actor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends actorDeleteManyArgs>(args?: SelectSubset<T, actorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Actors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {actorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Actors
     * const actor = await prisma.actor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends actorUpdateManyArgs>(args: SelectSubset<T, actorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Actors and returns the data updated in the database.
     * @param {actorUpdateManyAndReturnArgs} args - Arguments to update many Actors.
     * @example
     * // Update many Actors
     * const actor = await prisma.actor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Actors and only return the `actor_id`
     * const actorWithActor_idOnly = await prisma.actor.updateManyAndReturn({
     *   select: { actor_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends actorUpdateManyAndReturnArgs>(args: SelectSubset<T, actorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$actorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Actor.
     * @param {actorUpsertArgs} args - Arguments to update or create a Actor.
     * @example
     * // Update or create a Actor
     * const actor = await prisma.actor.upsert({
     *   create: {
     *     // ... data to create a Actor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Actor we want to update
     *   }
     * })
     */
    upsert<T extends actorUpsertArgs>(args: SelectSubset<T, actorUpsertArgs<ExtArgs>>): Prisma__actorClient<$Result.GetResult<Prisma.$actorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Actors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {actorCountArgs} args - Arguments to filter Actors to count.
     * @example
     * // Count the number of Actors
     * const count = await prisma.actor.count({
     *   where: {
     *     // ... the filter for the Actors we want to count
     *   }
     * })
    **/
    count<T extends actorCountArgs>(
      args?: Subset<T, actorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Actor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActorAggregateArgs>(args: Subset<T, ActorAggregateArgs>): Prisma.PrismaPromise<GetActorAggregateType<T>>

    /**
     * Group by Actor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {actorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends actorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: actorGroupByArgs['orderBy'] }
        : { orderBy?: actorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, actorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the actor model
   */
  readonly fields: actorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for actor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__actorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    film_actor<T extends actor$film_actorArgs<ExtArgs> = {}>(args?: Subset<T, actor$film_actorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the actor model
   */
  interface actorFieldRefs {
    readonly actor_id: FieldRef<"actor", 'Int'>
    readonly first_name: FieldRef<"actor", 'String'>
    readonly last_name: FieldRef<"actor", 'String'>
    readonly last_update: FieldRef<"actor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * actor findUnique
   */
  export type actorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the actor
     */
    select?: actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the actor
     */
    omit?: actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: actorInclude<ExtArgs> | null
    /**
     * Filter, which actor to fetch.
     */
    where: actorWhereUniqueInput
  }

  /**
   * actor findUniqueOrThrow
   */
  export type actorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the actor
     */
    select?: actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the actor
     */
    omit?: actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: actorInclude<ExtArgs> | null
    /**
     * Filter, which actor to fetch.
     */
    where: actorWhereUniqueInput
  }

  /**
   * actor findFirst
   */
  export type actorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the actor
     */
    select?: actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the actor
     */
    omit?: actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: actorInclude<ExtArgs> | null
    /**
     * Filter, which actor to fetch.
     */
    where?: actorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of actors to fetch.
     */
    orderBy?: actorOrderByWithRelationInput | actorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for actors.
     */
    cursor?: actorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` actors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` actors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of actors.
     */
    distinct?: ActorScalarFieldEnum | ActorScalarFieldEnum[]
  }

  /**
   * actor findFirstOrThrow
   */
  export type actorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the actor
     */
    select?: actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the actor
     */
    omit?: actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: actorInclude<ExtArgs> | null
    /**
     * Filter, which actor to fetch.
     */
    where?: actorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of actors to fetch.
     */
    orderBy?: actorOrderByWithRelationInput | actorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for actors.
     */
    cursor?: actorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` actors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` actors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of actors.
     */
    distinct?: ActorScalarFieldEnum | ActorScalarFieldEnum[]
  }

  /**
   * actor findMany
   */
  export type actorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the actor
     */
    select?: actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the actor
     */
    omit?: actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: actorInclude<ExtArgs> | null
    /**
     * Filter, which actors to fetch.
     */
    where?: actorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of actors to fetch.
     */
    orderBy?: actorOrderByWithRelationInput | actorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing actors.
     */
    cursor?: actorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` actors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` actors.
     */
    skip?: number
    distinct?: ActorScalarFieldEnum | ActorScalarFieldEnum[]
  }

  /**
   * actor create
   */
  export type actorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the actor
     */
    select?: actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the actor
     */
    omit?: actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: actorInclude<ExtArgs> | null
    /**
     * The data needed to create a actor.
     */
    data: XOR<actorCreateInput, actorUncheckedCreateInput>
  }

  /**
   * actor createMany
   */
  export type actorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many actors.
     */
    data: actorCreateManyInput | actorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * actor createManyAndReturn
   */
  export type actorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the actor
     */
    select?: actorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the actor
     */
    omit?: actorOmit<ExtArgs> | null
    /**
     * The data used to create many actors.
     */
    data: actorCreateManyInput | actorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * actor update
   */
  export type actorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the actor
     */
    select?: actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the actor
     */
    omit?: actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: actorInclude<ExtArgs> | null
    /**
     * The data needed to update a actor.
     */
    data: XOR<actorUpdateInput, actorUncheckedUpdateInput>
    /**
     * Choose, which actor to update.
     */
    where: actorWhereUniqueInput
  }

  /**
   * actor updateMany
   */
  export type actorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update actors.
     */
    data: XOR<actorUpdateManyMutationInput, actorUncheckedUpdateManyInput>
    /**
     * Filter which actors to update
     */
    where?: actorWhereInput
    /**
     * Limit how many actors to update.
     */
    limit?: number
  }

  /**
   * actor updateManyAndReturn
   */
  export type actorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the actor
     */
    select?: actorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the actor
     */
    omit?: actorOmit<ExtArgs> | null
    /**
     * The data used to update actors.
     */
    data: XOR<actorUpdateManyMutationInput, actorUncheckedUpdateManyInput>
    /**
     * Filter which actors to update
     */
    where?: actorWhereInput
    /**
     * Limit how many actors to update.
     */
    limit?: number
  }

  /**
   * actor upsert
   */
  export type actorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the actor
     */
    select?: actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the actor
     */
    omit?: actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: actorInclude<ExtArgs> | null
    /**
     * The filter to search for the actor to update in case it exists.
     */
    where: actorWhereUniqueInput
    /**
     * In case the actor found by the `where` argument doesn't exist, create a new actor with this data.
     */
    create: XOR<actorCreateInput, actorUncheckedCreateInput>
    /**
     * In case the actor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<actorUpdateInput, actorUncheckedUpdateInput>
  }

  /**
   * actor delete
   */
  export type actorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the actor
     */
    select?: actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the actor
     */
    omit?: actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: actorInclude<ExtArgs> | null
    /**
     * Filter which actor to delete.
     */
    where: actorWhereUniqueInput
  }

  /**
   * actor deleteMany
   */
  export type actorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which actors to delete
     */
    where?: actorWhereInput
    /**
     * Limit how many actors to delete.
     */
    limit?: number
  }

  /**
   * actor.film_actor
   */
  export type actor$film_actorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorInclude<ExtArgs> | null
    where?: film_actorWhereInput
    orderBy?: film_actorOrderByWithRelationInput | film_actorOrderByWithRelationInput[]
    cursor?: film_actorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Film_actorScalarFieldEnum | Film_actorScalarFieldEnum[]
  }

  /**
   * actor without action
   */
  export type actorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the actor
     */
    select?: actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the actor
     */
    omit?: actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: actorInclude<ExtArgs> | null
  }


  /**
   * Model address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    address_id: number | null
    city_id: number | null
  }

  export type AddressSumAggregateOutputType = {
    address_id: number | null
    city_id: number | null
  }

  export type AddressMinAggregateOutputType = {
    address_id: number | null
    address: string | null
    address2: string | null
    district: string | null
    city_id: number | null
    postal_code: string | null
    phone: string | null
    last_update: Date | null
  }

  export type AddressMaxAggregateOutputType = {
    address_id: number | null
    address: string | null
    address2: string | null
    district: string | null
    city_id: number | null
    postal_code: string | null
    phone: string | null
    last_update: Date | null
  }

  export type AddressCountAggregateOutputType = {
    address_id: number
    address: number
    address2: number
    district: number
    city_id: number
    postal_code: number
    phone: number
    last_update: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    address_id?: true
    city_id?: true
  }

  export type AddressSumAggregateInputType = {
    address_id?: true
    city_id?: true
  }

  export type AddressMinAggregateInputType = {
    address_id?: true
    address?: true
    address2?: true
    district?: true
    city_id?: true
    postal_code?: true
    phone?: true
    last_update?: true
  }

  export type AddressMaxAggregateInputType = {
    address_id?: true
    address?: true
    address2?: true
    district?: true
    city_id?: true
    postal_code?: true
    phone?: true
    last_update?: true
  }

  export type AddressCountAggregateInputType = {
    address_id?: true
    address?: true
    address2?: true
    district?: true
    city_id?: true
    postal_code?: true
    phone?: true
    last_update?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which address to aggregate.
     */
    where?: addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: addressOrderByWithRelationInput | addressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type addressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: addressWhereInput
    orderBy?: addressOrderByWithAggregationInput | addressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: addressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    address_id: number
    address: string
    address2: string | null
    district: string
    city_id: number
    postal_code: string | null
    phone: string
    last_update: Date
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends addressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type addressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    address_id?: boolean
    address?: boolean
    address2?: boolean
    district?: boolean
    city_id?: boolean
    postal_code?: boolean
    phone?: boolean
    last_update?: boolean
    city?: boolean | cityDefaultArgs<ExtArgs>
    customer?: boolean | address$customerArgs<ExtArgs>
    staff?: boolean | address$staffArgs<ExtArgs>
    store?: boolean | address$storeArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type addressSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    address_id?: boolean
    address?: boolean
    address2?: boolean
    district?: boolean
    city_id?: boolean
    postal_code?: boolean
    phone?: boolean
    last_update?: boolean
    city?: boolean | cityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type addressSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    address_id?: boolean
    address?: boolean
    address2?: boolean
    district?: boolean
    city_id?: boolean
    postal_code?: boolean
    phone?: boolean
    last_update?: boolean
    city?: boolean | cityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type addressSelectScalar = {
    address_id?: boolean
    address?: boolean
    address2?: boolean
    district?: boolean
    city_id?: boolean
    postal_code?: boolean
    phone?: boolean
    last_update?: boolean
  }

  export type addressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"address_id" | "address" | "address2" | "district" | "city_id" | "postal_code" | "phone" | "last_update", ExtArgs["result"]["address"]>
  export type addressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    city?: boolean | cityDefaultArgs<ExtArgs>
    customer?: boolean | address$customerArgs<ExtArgs>
    staff?: boolean | address$staffArgs<ExtArgs>
    store?: boolean | address$storeArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type addressIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    city?: boolean | cityDefaultArgs<ExtArgs>
  }
  export type addressIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    city?: boolean | cityDefaultArgs<ExtArgs>
  }

  export type $addressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "address"
    objects: {
      city: Prisma.$cityPayload<ExtArgs>
      customer: Prisma.$customerPayload<ExtArgs>[]
      staff: Prisma.$staffPayload<ExtArgs>[]
      store: Prisma.$storePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      address_id: number
      address: string
      address2: string | null
      district: string
      city_id: number
      postal_code: string | null
      phone: string
      last_update: Date
    }, ExtArgs["result"]["address"]>
    composites: {}
  }

  type addressGetPayload<S extends boolean | null | undefined | addressDefaultArgs> = $Result.GetResult<Prisma.$addressPayload, S>

  type addressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<addressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface addressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['address'], meta: { name: 'address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {addressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends addressFindUniqueArgs>(args: SelectSubset<T, addressFindUniqueArgs<ExtArgs>>): Prisma__addressClient<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {addressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends addressFindUniqueOrThrowArgs>(args: SelectSubset<T, addressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__addressClient<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends addressFindFirstArgs>(args?: SelectSubset<T, addressFindFirstArgs<ExtArgs>>): Prisma__addressClient<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends addressFindFirstOrThrowArgs>(args?: SelectSubset<T, addressFindFirstOrThrowArgs<ExtArgs>>): Prisma__addressClient<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `address_id`
     * const addressWithAddress_idOnly = await prisma.address.findMany({ select: { address_id: true } })
     * 
     */
    findMany<T extends addressFindManyArgs>(args?: SelectSubset<T, addressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Address.
     * @param {addressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
     */
    create<T extends addressCreateArgs>(args: SelectSubset<T, addressCreateArgs<ExtArgs>>): Prisma__addressClient<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Addresses.
     * @param {addressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends addressCreateManyArgs>(args?: SelectSubset<T, addressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Addresses and returns the data saved in the database.
     * @param {addressCreateManyAndReturnArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Addresses and only return the `address_id`
     * const addressWithAddress_idOnly = await prisma.address.createManyAndReturn({
     *   select: { address_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends addressCreateManyAndReturnArgs>(args?: SelectSubset<T, addressCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Address.
     * @param {addressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
     */
    delete<T extends addressDeleteArgs>(args: SelectSubset<T, addressDeleteArgs<ExtArgs>>): Prisma__addressClient<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Address.
     * @param {addressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends addressUpdateArgs>(args: SelectSubset<T, addressUpdateArgs<ExtArgs>>): Prisma__addressClient<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Addresses.
     * @param {addressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends addressDeleteManyArgs>(args?: SelectSubset<T, addressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends addressUpdateManyArgs>(args: SelectSubset<T, addressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses and returns the data updated in the database.
     * @param {addressUpdateManyAndReturnArgs} args - Arguments to update many Addresses.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Addresses and only return the `address_id`
     * const addressWithAddress_idOnly = await prisma.address.updateManyAndReturn({
     *   select: { address_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends addressUpdateManyAndReturnArgs>(args: SelectSubset<T, addressUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Address.
     * @param {addressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
     */
    upsert<T extends addressUpsertArgs>(args: SelectSubset<T, addressUpsertArgs<ExtArgs>>): Prisma__addressClient<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends addressCountArgs>(
      args?: Subset<T, addressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {addressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends addressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: addressGroupByArgs['orderBy'] }
        : { orderBy?: addressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, addressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the address model
   */
  readonly fields: addressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__addressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    city<T extends cityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, cityDefaultArgs<ExtArgs>>): Prisma__cityClient<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    customer<T extends address$customerArgs<ExtArgs> = {}>(args?: Subset<T, address$customerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    staff<T extends address$staffArgs<ExtArgs> = {}>(args?: Subset<T, address$staffArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    store<T extends address$storeArgs<ExtArgs> = {}>(args?: Subset<T, address$storeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the address model
   */
  interface addressFieldRefs {
    readonly address_id: FieldRef<"address", 'Int'>
    readonly address: FieldRef<"address", 'String'>
    readonly address2: FieldRef<"address", 'String'>
    readonly district: FieldRef<"address", 'String'>
    readonly city_id: FieldRef<"address", 'Int'>
    readonly postal_code: FieldRef<"address", 'String'>
    readonly phone: FieldRef<"address", 'String'>
    readonly last_update: FieldRef<"address", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * address findUnique
   */
  export type addressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressInclude<ExtArgs> | null
    /**
     * Filter, which address to fetch.
     */
    where: addressWhereUniqueInput
  }

  /**
   * address findUniqueOrThrow
   */
  export type addressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressInclude<ExtArgs> | null
    /**
     * Filter, which address to fetch.
     */
    where: addressWhereUniqueInput
  }

  /**
   * address findFirst
   */
  export type addressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressInclude<ExtArgs> | null
    /**
     * Filter, which address to fetch.
     */
    where?: addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: addressOrderByWithRelationInput | addressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for addresses.
     */
    cursor?: addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * address findFirstOrThrow
   */
  export type addressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressInclude<ExtArgs> | null
    /**
     * Filter, which address to fetch.
     */
    where?: addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: addressOrderByWithRelationInput | addressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for addresses.
     */
    cursor?: addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * address findMany
   */
  export type addressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressInclude<ExtArgs> | null
    /**
     * Filter, which addresses to fetch.
     */
    where?: addressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of addresses to fetch.
     */
    orderBy?: addressOrderByWithRelationInput | addressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing addresses.
     */
    cursor?: addressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * address create
   */
  export type addressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressInclude<ExtArgs> | null
    /**
     * The data needed to create a address.
     */
    data: XOR<addressCreateInput, addressUncheckedCreateInput>
  }

  /**
   * address createMany
   */
  export type addressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many addresses.
     */
    data: addressCreateManyInput | addressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * address createManyAndReturn
   */
  export type addressCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * The data used to create many addresses.
     */
    data: addressCreateManyInput | addressCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * address update
   */
  export type addressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressInclude<ExtArgs> | null
    /**
     * The data needed to update a address.
     */
    data: XOR<addressUpdateInput, addressUncheckedUpdateInput>
    /**
     * Choose, which address to update.
     */
    where: addressWhereUniqueInput
  }

  /**
   * address updateMany
   */
  export type addressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update addresses.
     */
    data: XOR<addressUpdateManyMutationInput, addressUncheckedUpdateManyInput>
    /**
     * Filter which addresses to update
     */
    where?: addressWhereInput
    /**
     * Limit how many addresses to update.
     */
    limit?: number
  }

  /**
   * address updateManyAndReturn
   */
  export type addressUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * The data used to update addresses.
     */
    data: XOR<addressUpdateManyMutationInput, addressUncheckedUpdateManyInput>
    /**
     * Filter which addresses to update
     */
    where?: addressWhereInput
    /**
     * Limit how many addresses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * address upsert
   */
  export type addressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressInclude<ExtArgs> | null
    /**
     * The filter to search for the address to update in case it exists.
     */
    where: addressWhereUniqueInput
    /**
     * In case the address found by the `where` argument doesn't exist, create a new address with this data.
     */
    create: XOR<addressCreateInput, addressUncheckedCreateInput>
    /**
     * In case the address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<addressUpdateInput, addressUncheckedUpdateInput>
  }

  /**
   * address delete
   */
  export type addressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressInclude<ExtArgs> | null
    /**
     * Filter which address to delete.
     */
    where: addressWhereUniqueInput
  }

  /**
   * address deleteMany
   */
  export type addressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which addresses to delete
     */
    where?: addressWhereInput
    /**
     * Limit how many addresses to delete.
     */
    limit?: number
  }

  /**
   * address.customer
   */
  export type address$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    where?: customerWhereInput
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    cursor?: customerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * address.staff
   */
  export type address$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffInclude<ExtArgs> | null
    where?: staffWhereInput
    orderBy?: staffOrderByWithRelationInput | staffOrderByWithRelationInput[]
    cursor?: staffWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * address.store
   */
  export type address$storeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    where?: storeWhereInput
    orderBy?: storeOrderByWithRelationInput | storeOrderByWithRelationInput[]
    cursor?: storeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * address without action
   */
  export type addressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressInclude<ExtArgs> | null
  }


  /**
   * Model category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    category_id: number | null
  }

  export type CategorySumAggregateOutputType = {
    category_id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    category_id: number | null
    name: string | null
    last_update: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    category_id: number | null
    name: string | null
    last_update: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    category_id: number
    name: number
    last_update: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    category_id?: true
  }

  export type CategorySumAggregateInputType = {
    category_id?: true
  }

  export type CategoryMinAggregateInputType = {
    category_id?: true
    name?: true
    last_update?: true
  }

  export type CategoryMaxAggregateInputType = {
    category_id?: true
    name?: true
    last_update?: true
  }

  export type CategoryCountAggregateInputType = {
    category_id?: true
    name?: true
    last_update?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which category to aggregate.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type categoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: categoryWhereInput
    orderBy?: categoryOrderByWithAggregationInput | categoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    category_id: number
    name: string
    last_update: Date
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type categorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    category_id?: boolean
    name?: boolean
    last_update?: boolean
    film_category?: boolean | category$film_categoryArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type categorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    category_id?: boolean
    name?: boolean
    last_update?: boolean
  }, ExtArgs["result"]["category"]>

  export type categorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    category_id?: boolean
    name?: boolean
    last_update?: boolean
  }, ExtArgs["result"]["category"]>

  export type categorySelectScalar = {
    category_id?: boolean
    name?: boolean
    last_update?: boolean
  }

  export type categoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"category_id" | "name" | "last_update", ExtArgs["result"]["category"]>
  export type categoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_category?: boolean | category$film_categoryArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type categoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type categoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $categoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "category"
    objects: {
      film_category: Prisma.$film_categoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      category_id: number
      name: string
      last_update: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type categoryGetPayload<S extends boolean | null | undefined | categoryDefaultArgs> = $Result.GetResult<Prisma.$categoryPayload, S>

  type categoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<categoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface categoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['category'], meta: { name: 'category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {categoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends categoryFindUniqueArgs>(args: SelectSubset<T, categoryFindUniqueArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {categoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends categoryFindUniqueOrThrowArgs>(args: SelectSubset<T, categoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends categoryFindFirstArgs>(args?: SelectSubset<T, categoryFindFirstArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends categoryFindFirstOrThrowArgs>(args?: SelectSubset<T, categoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `category_id`
     * const categoryWithCategory_idOnly = await prisma.category.findMany({ select: { category_id: true } })
     * 
     */
    findMany<T extends categoryFindManyArgs>(args?: SelectSubset<T, categoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {categoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends categoryCreateArgs>(args: SelectSubset<T, categoryCreateArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {categoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends categoryCreateManyArgs>(args?: SelectSubset<T, categoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {categoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `category_id`
     * const categoryWithCategory_idOnly = await prisma.category.createManyAndReturn({
     *   select: { category_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends categoryCreateManyAndReturnArgs>(args?: SelectSubset<T, categoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Category.
     * @param {categoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends categoryDeleteArgs>(args: SelectSubset<T, categoryDeleteArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {categoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends categoryUpdateArgs>(args: SelectSubset<T, categoryUpdateArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {categoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends categoryDeleteManyArgs>(args?: SelectSubset<T, categoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends categoryUpdateManyArgs>(args: SelectSubset<T, categoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories and returns the data updated in the database.
     * @param {categoryUpdateManyAndReturnArgs} args - Arguments to update many Categories.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Categories and only return the `category_id`
     * const categoryWithCategory_idOnly = await prisma.category.updateManyAndReturn({
     *   select: { category_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends categoryUpdateManyAndReturnArgs>(args: SelectSubset<T, categoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Category.
     * @param {categoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends categoryUpsertArgs>(args: SelectSubset<T, categoryUpsertArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoryCountArgs>(
      args?: Subset<T, categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoryGroupByArgs['orderBy'] }
        : { orderBy?: categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the category model
   */
  readonly fields: categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    film_category<T extends category$film_categoryArgs<ExtArgs> = {}>(args?: Subset<T, category$film_categoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the category model
   */
  interface categoryFieldRefs {
    readonly category_id: FieldRef<"category", 'Int'>
    readonly name: FieldRef<"category", 'String'>
    readonly last_update: FieldRef<"category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * category findUnique
   */
  export type categoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category findUniqueOrThrow
   */
  export type categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category findFirst
   */
  export type categoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category findFirstOrThrow
   */
  export type categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which category to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category findMany
   */
  export type categoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoryOrderByWithRelationInput | categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * category create
   */
  export type categoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a category.
     */
    data: XOR<categoryCreateInput, categoryUncheckedCreateInput>
  }

  /**
   * category createMany
   */
  export type categoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoryCreateManyInput | categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * category createManyAndReturn
   */
  export type categoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * The data used to create many categories.
     */
    data: categoryCreateManyInput | categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * category update
   */
  export type categoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a category.
     */
    data: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
    /**
     * Choose, which category to update.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category updateMany
   */
  export type categoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoryWhereInput
    /**
     * Limit how many categories to update.
     */
    limit?: number
  }

  /**
   * category updateManyAndReturn
   */
  export type categoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * The data used to update categories.
     */
    data: XOR<categoryUpdateManyMutationInput, categoryUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoryWhereInput
    /**
     * Limit how many categories to update.
     */
    limit?: number
  }

  /**
   * category upsert
   */
  export type categoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the category to update in case it exists.
     */
    where: categoryWhereUniqueInput
    /**
     * In case the category found by the `where` argument doesn't exist, create a new category with this data.
     */
    create: XOR<categoryCreateInput, categoryUncheckedCreateInput>
    /**
     * In case the category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoryUpdateInput, categoryUncheckedUpdateInput>
  }

  /**
   * category delete
   */
  export type categoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
    /**
     * Filter which category to delete.
     */
    where: categoryWhereUniqueInput
  }

  /**
   * category deleteMany
   */
  export type categoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoryWhereInput
    /**
     * Limit how many categories to delete.
     */
    limit?: number
  }

  /**
   * category.film_category
   */
  export type category$film_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryInclude<ExtArgs> | null
    where?: film_categoryWhereInput
    orderBy?: film_categoryOrderByWithRelationInput | film_categoryOrderByWithRelationInput[]
    cursor?: film_categoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Film_categoryScalarFieldEnum | Film_categoryScalarFieldEnum[]
  }

  /**
   * category without action
   */
  export type categoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the category
     */
    select?: categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the category
     */
    omit?: categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: categoryInclude<ExtArgs> | null
  }


  /**
   * Model city
   */

  export type AggregateCity = {
    _count: CityCountAggregateOutputType | null
    _avg: CityAvgAggregateOutputType | null
    _sum: CitySumAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  export type CityAvgAggregateOutputType = {
    city_id: number | null
    country_id: number | null
  }

  export type CitySumAggregateOutputType = {
    city_id: number | null
    country_id: number | null
  }

  export type CityMinAggregateOutputType = {
    city_id: number | null
    city: string | null
    country_id: number | null
    last_update: Date | null
  }

  export type CityMaxAggregateOutputType = {
    city_id: number | null
    city: string | null
    country_id: number | null
    last_update: Date | null
  }

  export type CityCountAggregateOutputType = {
    city_id: number
    city: number
    country_id: number
    last_update: number
    _all: number
  }


  export type CityAvgAggregateInputType = {
    city_id?: true
    country_id?: true
  }

  export type CitySumAggregateInputType = {
    city_id?: true
    country_id?: true
  }

  export type CityMinAggregateInputType = {
    city_id?: true
    city?: true
    country_id?: true
    last_update?: true
  }

  export type CityMaxAggregateInputType = {
    city_id?: true
    city?: true
    country_id?: true
    last_update?: true
  }

  export type CityCountAggregateInputType = {
    city_id?: true
    city?: true
    country_id?: true
    last_update?: true
    _all?: true
  }

  export type CityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which city to aggregate.
     */
    where?: cityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cities to fetch.
     */
    orderBy?: cityOrderByWithRelationInput | cityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: cityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned cities
    **/
    _count?: true | CityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CityMaxAggregateInputType
  }

  export type GetCityAggregateType<T extends CityAggregateArgs> = {
        [P in keyof T & keyof AggregateCity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCity[P]>
      : GetScalarType<T[P], AggregateCity[P]>
  }




  export type cityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: cityWhereInput
    orderBy?: cityOrderByWithAggregationInput | cityOrderByWithAggregationInput[]
    by: CityScalarFieldEnum[] | CityScalarFieldEnum
    having?: cityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CityCountAggregateInputType | true
    _avg?: CityAvgAggregateInputType
    _sum?: CitySumAggregateInputType
    _min?: CityMinAggregateInputType
    _max?: CityMaxAggregateInputType
  }

  export type CityGroupByOutputType = {
    city_id: number
    city: string
    country_id: number
    last_update: Date
    _count: CityCountAggregateOutputType | null
    _avg: CityAvgAggregateOutputType | null
    _sum: CitySumAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  type GetCityGroupByPayload<T extends cityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CityGroupByOutputType[P]>
            : GetScalarType<T[P], CityGroupByOutputType[P]>
        }
      >
    >


  export type citySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    city_id?: boolean
    city?: boolean
    country_id?: boolean
    last_update?: boolean
    address?: boolean | city$addressArgs<ExtArgs>
    country?: boolean | countryDefaultArgs<ExtArgs>
    _count?: boolean | CityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["city"]>

  export type citySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    city_id?: boolean
    city?: boolean
    country_id?: boolean
    last_update?: boolean
    country?: boolean | countryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["city"]>

  export type citySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    city_id?: boolean
    city?: boolean
    country_id?: boolean
    last_update?: boolean
    country?: boolean | countryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["city"]>

  export type citySelectScalar = {
    city_id?: boolean
    city?: boolean
    country_id?: boolean
    last_update?: boolean
  }

  export type cityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"city_id" | "city" | "country_id" | "last_update", ExtArgs["result"]["city"]>
  export type cityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | city$addressArgs<ExtArgs>
    country?: boolean | countryDefaultArgs<ExtArgs>
    _count?: boolean | CityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type cityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | countryDefaultArgs<ExtArgs>
  }
  export type cityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | countryDefaultArgs<ExtArgs>
  }

  export type $cityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "city"
    objects: {
      address: Prisma.$addressPayload<ExtArgs>[]
      country: Prisma.$countryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      city_id: number
      city: string
      country_id: number
      last_update: Date
    }, ExtArgs["result"]["city"]>
    composites: {}
  }

  type cityGetPayload<S extends boolean | null | undefined | cityDefaultArgs> = $Result.GetResult<Prisma.$cityPayload, S>

  type cityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<cityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CityCountAggregateInputType | true
    }

  export interface cityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['city'], meta: { name: 'city' } }
    /**
     * Find zero or one City that matches the filter.
     * @param {cityFindUniqueArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends cityFindUniqueArgs>(args: SelectSubset<T, cityFindUniqueArgs<ExtArgs>>): Prisma__cityClient<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one City that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {cityFindUniqueOrThrowArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends cityFindUniqueOrThrowArgs>(args: SelectSubset<T, cityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__cityClient<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first City that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cityFindFirstArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends cityFindFirstArgs>(args?: SelectSubset<T, cityFindFirstArgs<ExtArgs>>): Prisma__cityClient<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first City that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cityFindFirstOrThrowArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends cityFindFirstOrThrowArgs>(args?: SelectSubset<T, cityFindFirstOrThrowArgs<ExtArgs>>): Prisma__cityClient<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cities
     * const cities = await prisma.city.findMany()
     * 
     * // Get first 10 Cities
     * const cities = await prisma.city.findMany({ take: 10 })
     * 
     * // Only select the `city_id`
     * const cityWithCity_idOnly = await prisma.city.findMany({ select: { city_id: true } })
     * 
     */
    findMany<T extends cityFindManyArgs>(args?: SelectSubset<T, cityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a City.
     * @param {cityCreateArgs} args - Arguments to create a City.
     * @example
     * // Create one City
     * const City = await prisma.city.create({
     *   data: {
     *     // ... data to create a City
     *   }
     * })
     * 
     */
    create<T extends cityCreateArgs>(args: SelectSubset<T, cityCreateArgs<ExtArgs>>): Prisma__cityClient<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cities.
     * @param {cityCreateManyArgs} args - Arguments to create many Cities.
     * @example
     * // Create many Cities
     * const city = await prisma.city.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends cityCreateManyArgs>(args?: SelectSubset<T, cityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cities and returns the data saved in the database.
     * @param {cityCreateManyAndReturnArgs} args - Arguments to create many Cities.
     * @example
     * // Create many Cities
     * const city = await prisma.city.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cities and only return the `city_id`
     * const cityWithCity_idOnly = await prisma.city.createManyAndReturn({
     *   select: { city_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends cityCreateManyAndReturnArgs>(args?: SelectSubset<T, cityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a City.
     * @param {cityDeleteArgs} args - Arguments to delete one City.
     * @example
     * // Delete one City
     * const City = await prisma.city.delete({
     *   where: {
     *     // ... filter to delete one City
     *   }
     * })
     * 
     */
    delete<T extends cityDeleteArgs>(args: SelectSubset<T, cityDeleteArgs<ExtArgs>>): Prisma__cityClient<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one City.
     * @param {cityUpdateArgs} args - Arguments to update one City.
     * @example
     * // Update one City
     * const city = await prisma.city.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends cityUpdateArgs>(args: SelectSubset<T, cityUpdateArgs<ExtArgs>>): Prisma__cityClient<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cities.
     * @param {cityDeleteManyArgs} args - Arguments to filter Cities to delete.
     * @example
     * // Delete a few Cities
     * const { count } = await prisma.city.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends cityDeleteManyArgs>(args?: SelectSubset<T, cityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cities
     * const city = await prisma.city.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends cityUpdateManyArgs>(args: SelectSubset<T, cityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cities and returns the data updated in the database.
     * @param {cityUpdateManyAndReturnArgs} args - Arguments to update many Cities.
     * @example
     * // Update many Cities
     * const city = await prisma.city.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cities and only return the `city_id`
     * const cityWithCity_idOnly = await prisma.city.updateManyAndReturn({
     *   select: { city_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends cityUpdateManyAndReturnArgs>(args: SelectSubset<T, cityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one City.
     * @param {cityUpsertArgs} args - Arguments to update or create a City.
     * @example
     * // Update or create a City
     * const city = await prisma.city.upsert({
     *   create: {
     *     // ... data to create a City
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the City we want to update
     *   }
     * })
     */
    upsert<T extends cityUpsertArgs>(args: SelectSubset<T, cityUpsertArgs<ExtArgs>>): Prisma__cityClient<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cityCountArgs} args - Arguments to filter Cities to count.
     * @example
     * // Count the number of Cities
     * const count = await prisma.city.count({
     *   where: {
     *     // ... the filter for the Cities we want to count
     *   }
     * })
    **/
    count<T extends cityCountArgs>(
      args?: Subset<T, cityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CityAggregateArgs>(args: Subset<T, CityAggregateArgs>): Prisma.PrismaPromise<GetCityAggregateType<T>>

    /**
     * Group by City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {cityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends cityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: cityGroupByArgs['orderBy'] }
        : { orderBy?: cityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, cityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the city model
   */
  readonly fields: cityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for city.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__cityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    address<T extends city$addressArgs<ExtArgs> = {}>(args?: Subset<T, city$addressArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    country<T extends countryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, countryDefaultArgs<ExtArgs>>): Prisma__countryClient<$Result.GetResult<Prisma.$countryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the city model
   */
  interface cityFieldRefs {
    readonly city_id: FieldRef<"city", 'Int'>
    readonly city: FieldRef<"city", 'String'>
    readonly country_id: FieldRef<"city", 'Int'>
    readonly last_update: FieldRef<"city", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * city findUnique
   */
  export type cityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelect<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityInclude<ExtArgs> | null
    /**
     * Filter, which city to fetch.
     */
    where: cityWhereUniqueInput
  }

  /**
   * city findUniqueOrThrow
   */
  export type cityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelect<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityInclude<ExtArgs> | null
    /**
     * Filter, which city to fetch.
     */
    where: cityWhereUniqueInput
  }

  /**
   * city findFirst
   */
  export type cityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelect<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityInclude<ExtArgs> | null
    /**
     * Filter, which city to fetch.
     */
    where?: cityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cities to fetch.
     */
    orderBy?: cityOrderByWithRelationInput | cityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cities.
     */
    cursor?: cityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cities.
     */
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * city findFirstOrThrow
   */
  export type cityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelect<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityInclude<ExtArgs> | null
    /**
     * Filter, which city to fetch.
     */
    where?: cityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cities to fetch.
     */
    orderBy?: cityOrderByWithRelationInput | cityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for cities.
     */
    cursor?: cityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of cities.
     */
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * city findMany
   */
  export type cityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelect<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityInclude<ExtArgs> | null
    /**
     * Filter, which cities to fetch.
     */
    where?: cityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of cities to fetch.
     */
    orderBy?: cityOrderByWithRelationInput | cityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing cities.
     */
    cursor?: cityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` cities.
     */
    skip?: number
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * city create
   */
  export type cityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelect<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityInclude<ExtArgs> | null
    /**
     * The data needed to create a city.
     */
    data: XOR<cityCreateInput, cityUncheckedCreateInput>
  }

  /**
   * city createMany
   */
  export type cityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many cities.
     */
    data: cityCreateManyInput | cityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * city createManyAndReturn
   */
  export type cityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * The data used to create many cities.
     */
    data: cityCreateManyInput | cityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * city update
   */
  export type cityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelect<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityInclude<ExtArgs> | null
    /**
     * The data needed to update a city.
     */
    data: XOR<cityUpdateInput, cityUncheckedUpdateInput>
    /**
     * Choose, which city to update.
     */
    where: cityWhereUniqueInput
  }

  /**
   * city updateMany
   */
  export type cityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update cities.
     */
    data: XOR<cityUpdateManyMutationInput, cityUncheckedUpdateManyInput>
    /**
     * Filter which cities to update
     */
    where?: cityWhereInput
    /**
     * Limit how many cities to update.
     */
    limit?: number
  }

  /**
   * city updateManyAndReturn
   */
  export type cityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * The data used to update cities.
     */
    data: XOR<cityUpdateManyMutationInput, cityUncheckedUpdateManyInput>
    /**
     * Filter which cities to update
     */
    where?: cityWhereInput
    /**
     * Limit how many cities to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * city upsert
   */
  export type cityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelect<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityInclude<ExtArgs> | null
    /**
     * The filter to search for the city to update in case it exists.
     */
    where: cityWhereUniqueInput
    /**
     * In case the city found by the `where` argument doesn't exist, create a new city with this data.
     */
    create: XOR<cityCreateInput, cityUncheckedCreateInput>
    /**
     * In case the city was found with the provided `where` argument, update it with this data.
     */
    update: XOR<cityUpdateInput, cityUncheckedUpdateInput>
  }

  /**
   * city delete
   */
  export type cityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelect<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityInclude<ExtArgs> | null
    /**
     * Filter which city to delete.
     */
    where: cityWhereUniqueInput
  }

  /**
   * city deleteMany
   */
  export type cityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which cities to delete
     */
    where?: cityWhereInput
    /**
     * Limit how many cities to delete.
     */
    limit?: number
  }

  /**
   * city.address
   */
  export type city$addressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the address
     */
    select?: addressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the address
     */
    omit?: addressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: addressInclude<ExtArgs> | null
    where?: addressWhereInput
    orderBy?: addressOrderByWithRelationInput | addressOrderByWithRelationInput[]
    cursor?: addressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * city without action
   */
  export type cityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelect<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityInclude<ExtArgs> | null
  }


  /**
   * Model country
   */

  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryAvgAggregateOutputType = {
    country_id: number | null
  }

  export type CountrySumAggregateOutputType = {
    country_id: number | null
  }

  export type CountryMinAggregateOutputType = {
    country_id: number | null
    country: string | null
    last_update: Date | null
  }

  export type CountryMaxAggregateOutputType = {
    country_id: number | null
    country: string | null
    last_update: Date | null
  }

  export type CountryCountAggregateOutputType = {
    country_id: number
    country: number
    last_update: number
    _all: number
  }


  export type CountryAvgAggregateInputType = {
    country_id?: true
  }

  export type CountrySumAggregateInputType = {
    country_id?: true
  }

  export type CountryMinAggregateInputType = {
    country_id?: true
    country?: true
    last_update?: true
  }

  export type CountryMaxAggregateInputType = {
    country_id?: true
    country?: true
    last_update?: true
  }

  export type CountryCountAggregateInputType = {
    country_id?: true
    country?: true
    last_update?: true
    _all?: true
  }

  export type CountryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which country to aggregate.
     */
    where?: countryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of countries to fetch.
     */
    orderBy?: countryOrderByWithRelationInput | countryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: countryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CountryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CountrySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type countryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: countryWhereInput
    orderBy?: countryOrderByWithAggregationInput | countryOrderByWithAggregationInput[]
    by: CountryScalarFieldEnum[] | CountryScalarFieldEnum
    having?: countryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _avg?: CountryAvgAggregateInputType
    _sum?: CountrySumAggregateInputType
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }

  export type CountryGroupByOutputType = {
    country_id: number
    country: string
    last_update: Date
    _count: CountryCountAggregateOutputType | null
    _avg: CountryAvgAggregateOutputType | null
    _sum: CountrySumAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends countryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type countrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    country_id?: boolean
    country?: boolean
    last_update?: boolean
    city?: boolean | country$cityArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type countrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    country_id?: boolean
    country?: boolean
    last_update?: boolean
  }, ExtArgs["result"]["country"]>

  export type countrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    country_id?: boolean
    country?: boolean
    last_update?: boolean
  }, ExtArgs["result"]["country"]>

  export type countrySelectScalar = {
    country_id?: boolean
    country?: boolean
    last_update?: boolean
  }

  export type countryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"country_id" | "country" | "last_update", ExtArgs["result"]["country"]>
  export type countryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    city?: boolean | country$cityArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type countryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type countryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $countryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "country"
    objects: {
      city: Prisma.$cityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      country_id: number
      country: string
      last_update: Date
    }, ExtArgs["result"]["country"]>
    composites: {}
  }

  type countryGetPayload<S extends boolean | null | undefined | countryDefaultArgs> = $Result.GetResult<Prisma.$countryPayload, S>

  type countryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<countryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface countryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['country'], meta: { name: 'country' } }
    /**
     * Find zero or one Country that matches the filter.
     * @param {countryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends countryFindUniqueArgs>(args: SelectSubset<T, countryFindUniqueArgs<ExtArgs>>): Prisma__countryClient<$Result.GetResult<Prisma.$countryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Country that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {countryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends countryFindUniqueOrThrowArgs>(args: SelectSubset<T, countryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__countryClient<$Result.GetResult<Prisma.$countryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {countryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends countryFindFirstArgs>(args?: SelectSubset<T, countryFindFirstArgs<ExtArgs>>): Prisma__countryClient<$Result.GetResult<Prisma.$countryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {countryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends countryFindFirstOrThrowArgs>(args?: SelectSubset<T, countryFindFirstOrThrowArgs<ExtArgs>>): Prisma__countryClient<$Result.GetResult<Prisma.$countryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {countryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `country_id`
     * const countryWithCountry_idOnly = await prisma.country.findMany({ select: { country_id: true } })
     * 
     */
    findMany<T extends countryFindManyArgs>(args?: SelectSubset<T, countryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$countryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Country.
     * @param {countryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
     */
    create<T extends countryCreateArgs>(args: SelectSubset<T, countryCreateArgs<ExtArgs>>): Prisma__countryClient<$Result.GetResult<Prisma.$countryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Countries.
     * @param {countryCreateManyArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends countryCreateManyArgs>(args?: SelectSubset<T, countryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Countries and returns the data saved in the database.
     * @param {countryCreateManyAndReturnArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Countries and only return the `country_id`
     * const countryWithCountry_idOnly = await prisma.country.createManyAndReturn({
     *   select: { country_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends countryCreateManyAndReturnArgs>(args?: SelectSubset<T, countryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$countryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Country.
     * @param {countryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
     */
    delete<T extends countryDeleteArgs>(args: SelectSubset<T, countryDeleteArgs<ExtArgs>>): Prisma__countryClient<$Result.GetResult<Prisma.$countryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Country.
     * @param {countryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends countryUpdateArgs>(args: SelectSubset<T, countryUpdateArgs<ExtArgs>>): Prisma__countryClient<$Result.GetResult<Prisma.$countryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Countries.
     * @param {countryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends countryDeleteManyArgs>(args?: SelectSubset<T, countryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {countryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends countryUpdateManyArgs>(args: SelectSubset<T, countryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries and returns the data updated in the database.
     * @param {countryUpdateManyAndReturnArgs} args - Arguments to update many Countries.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Countries and only return the `country_id`
     * const countryWithCountry_idOnly = await prisma.country.updateManyAndReturn({
     *   select: { country_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends countryUpdateManyAndReturnArgs>(args: SelectSubset<T, countryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$countryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Country.
     * @param {countryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
     */
    upsert<T extends countryUpsertArgs>(args: SelectSubset<T, countryUpsertArgs<ExtArgs>>): Prisma__countryClient<$Result.GetResult<Prisma.$countryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {countryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends countryCountArgs>(
      args?: Subset<T, countryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {countryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends countryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: countryGroupByArgs['orderBy'] }
        : { orderBy?: countryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, countryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the country model
   */
  readonly fields: countryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__countryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    city<T extends country$cityArgs<ExtArgs> = {}>(args?: Subset<T, country$cityArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$cityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the country model
   */
  interface countryFieldRefs {
    readonly country_id: FieldRef<"country", 'Int'>
    readonly country: FieldRef<"country", 'String'>
    readonly last_update: FieldRef<"country", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * country findUnique
   */
  export type countryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the country
     */
    select?: countrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the country
     */
    omit?: countryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: countryInclude<ExtArgs> | null
    /**
     * Filter, which country to fetch.
     */
    where: countryWhereUniqueInput
  }

  /**
   * country findUniqueOrThrow
   */
  export type countryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the country
     */
    select?: countrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the country
     */
    omit?: countryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: countryInclude<ExtArgs> | null
    /**
     * Filter, which country to fetch.
     */
    where: countryWhereUniqueInput
  }

  /**
   * country findFirst
   */
  export type countryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the country
     */
    select?: countrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the country
     */
    omit?: countryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: countryInclude<ExtArgs> | null
    /**
     * Filter, which country to fetch.
     */
    where?: countryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of countries to fetch.
     */
    orderBy?: countryOrderByWithRelationInput | countryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for countries.
     */
    cursor?: countryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * country findFirstOrThrow
   */
  export type countryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the country
     */
    select?: countrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the country
     */
    omit?: countryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: countryInclude<ExtArgs> | null
    /**
     * Filter, which country to fetch.
     */
    where?: countryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of countries to fetch.
     */
    orderBy?: countryOrderByWithRelationInput | countryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for countries.
     */
    cursor?: countryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * country findMany
   */
  export type countryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the country
     */
    select?: countrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the country
     */
    omit?: countryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: countryInclude<ExtArgs> | null
    /**
     * Filter, which countries to fetch.
     */
    where?: countryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of countries to fetch.
     */
    orderBy?: countryOrderByWithRelationInput | countryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing countries.
     */
    cursor?: countryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` countries.
     */
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * country create
   */
  export type countryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the country
     */
    select?: countrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the country
     */
    omit?: countryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: countryInclude<ExtArgs> | null
    /**
     * The data needed to create a country.
     */
    data: XOR<countryCreateInput, countryUncheckedCreateInput>
  }

  /**
   * country createMany
   */
  export type countryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many countries.
     */
    data: countryCreateManyInput | countryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * country createManyAndReturn
   */
  export type countryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the country
     */
    select?: countrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the country
     */
    omit?: countryOmit<ExtArgs> | null
    /**
     * The data used to create many countries.
     */
    data: countryCreateManyInput | countryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * country update
   */
  export type countryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the country
     */
    select?: countrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the country
     */
    omit?: countryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: countryInclude<ExtArgs> | null
    /**
     * The data needed to update a country.
     */
    data: XOR<countryUpdateInput, countryUncheckedUpdateInput>
    /**
     * Choose, which country to update.
     */
    where: countryWhereUniqueInput
  }

  /**
   * country updateMany
   */
  export type countryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update countries.
     */
    data: XOR<countryUpdateManyMutationInput, countryUncheckedUpdateManyInput>
    /**
     * Filter which countries to update
     */
    where?: countryWhereInput
    /**
     * Limit how many countries to update.
     */
    limit?: number
  }

  /**
   * country updateManyAndReturn
   */
  export type countryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the country
     */
    select?: countrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the country
     */
    omit?: countryOmit<ExtArgs> | null
    /**
     * The data used to update countries.
     */
    data: XOR<countryUpdateManyMutationInput, countryUncheckedUpdateManyInput>
    /**
     * Filter which countries to update
     */
    where?: countryWhereInput
    /**
     * Limit how many countries to update.
     */
    limit?: number
  }

  /**
   * country upsert
   */
  export type countryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the country
     */
    select?: countrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the country
     */
    omit?: countryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: countryInclude<ExtArgs> | null
    /**
     * The filter to search for the country to update in case it exists.
     */
    where: countryWhereUniqueInput
    /**
     * In case the country found by the `where` argument doesn't exist, create a new country with this data.
     */
    create: XOR<countryCreateInput, countryUncheckedCreateInput>
    /**
     * In case the country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<countryUpdateInput, countryUncheckedUpdateInput>
  }

  /**
   * country delete
   */
  export type countryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the country
     */
    select?: countrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the country
     */
    omit?: countryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: countryInclude<ExtArgs> | null
    /**
     * Filter which country to delete.
     */
    where: countryWhereUniqueInput
  }

  /**
   * country deleteMany
   */
  export type countryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which countries to delete
     */
    where?: countryWhereInput
    /**
     * Limit how many countries to delete.
     */
    limit?: number
  }

  /**
   * country.city
   */
  export type country$cityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the city
     */
    select?: citySelect<ExtArgs> | null
    /**
     * Omit specific fields from the city
     */
    omit?: cityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: cityInclude<ExtArgs> | null
    where?: cityWhereInput
    orderBy?: cityOrderByWithRelationInput | cityOrderByWithRelationInput[]
    cursor?: cityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * country without action
   */
  export type countryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the country
     */
    select?: countrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the country
     */
    omit?: countryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: countryInclude<ExtArgs> | null
  }


  /**
   * Model customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    customer_id: number | null
    store_id: number | null
    address_id: number | null
    active: number | null
  }

  export type CustomerSumAggregateOutputType = {
    customer_id: number | null
    store_id: number | null
    address_id: number | null
    active: number | null
  }

  export type CustomerMinAggregateOutputType = {
    customer_id: number | null
    store_id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    address_id: number | null
    activebool: boolean | null
    create_date: Date | null
    last_update: Date | null
    active: number | null
  }

  export type CustomerMaxAggregateOutputType = {
    customer_id: number | null
    store_id: number | null
    first_name: string | null
    last_name: string | null
    email: string | null
    address_id: number | null
    activebool: boolean | null
    create_date: Date | null
    last_update: Date | null
    active: number | null
  }

  export type CustomerCountAggregateOutputType = {
    customer_id: number
    store_id: number
    first_name: number
    last_name: number
    email: number
    address_id: number
    activebool: number
    create_date: number
    last_update: number
    active: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    customer_id?: true
    store_id?: true
    address_id?: true
    active?: true
  }

  export type CustomerSumAggregateInputType = {
    customer_id?: true
    store_id?: true
    address_id?: true
    active?: true
  }

  export type CustomerMinAggregateInputType = {
    customer_id?: true
    store_id?: true
    first_name?: true
    last_name?: true
    email?: true
    address_id?: true
    activebool?: true
    create_date?: true
    last_update?: true
    active?: true
  }

  export type CustomerMaxAggregateInputType = {
    customer_id?: true
    store_id?: true
    first_name?: true
    last_name?: true
    email?: true
    address_id?: true
    activebool?: true
    create_date?: true
    last_update?: true
    active?: true
  }

  export type CustomerCountAggregateInputType = {
    customer_id?: true
    store_id?: true
    first_name?: true
    last_name?: true
    email?: true
    address_id?: true
    activebool?: true
    create_date?: true
    last_update?: true
    active?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which customer to aggregate.
     */
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type customerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: customerWhereInput
    orderBy?: customerOrderByWithAggregationInput | customerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: customerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    customer_id: number
    store_id: number
    first_name: string
    last_name: string
    email: string | null
    address_id: number
    activebool: boolean
    create_date: Date
    last_update: Date | null
    active: number | null
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends customerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type customerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    customer_id?: boolean
    store_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    address_id?: boolean
    activebool?: boolean
    create_date?: boolean
    last_update?: boolean
    active?: boolean
    address?: boolean | addressDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
    film_comment?: boolean | customer$film_commentArgs<ExtArgs>
    mention?: boolean | customer$mentionArgs<ExtArgs>
    notification?: boolean | customer$notificationArgs<ExtArgs>
    post_reaction?: boolean | customer$post_reactionArgs<ExtArgs>
    rental?: boolean | customer$rentalArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type customerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    customer_id?: boolean
    store_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    address_id?: boolean
    activebool?: boolean
    create_date?: boolean
    last_update?: boolean
    active?: boolean
    address?: boolean | addressDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type customerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    customer_id?: boolean
    store_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    address_id?: boolean
    activebool?: boolean
    create_date?: boolean
    last_update?: boolean
    active?: boolean
    address?: boolean | addressDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type customerSelectScalar = {
    customer_id?: boolean
    store_id?: boolean
    first_name?: boolean
    last_name?: boolean
    email?: boolean
    address_id?: boolean
    activebool?: boolean
    create_date?: boolean
    last_update?: boolean
    active?: boolean
  }

  export type customerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"customer_id" | "store_id" | "first_name" | "last_name" | "email" | "address_id" | "activebool" | "create_date" | "last_update" | "active", ExtArgs["result"]["customer"]>
  export type customerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | addressDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
    film_comment?: boolean | customer$film_commentArgs<ExtArgs>
    mention?: boolean | customer$mentionArgs<ExtArgs>
    notification?: boolean | customer$notificationArgs<ExtArgs>
    post_reaction?: boolean | customer$post_reactionArgs<ExtArgs>
    rental?: boolean | customer$rentalArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type customerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | addressDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }
  export type customerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | addressDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }

  export type $customerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "customer"
    objects: {
      address: Prisma.$addressPayload<ExtArgs>
      store: Prisma.$storePayload<ExtArgs>
      film_comment: Prisma.$film_commentPayload<ExtArgs>[]
      mention: Prisma.$mentionPayload<ExtArgs>[]
      notification: Prisma.$notificationPayload<ExtArgs>[]
      post_reaction: Prisma.$post_reactionPayload<ExtArgs>[]
      rental: Prisma.$rentalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      customer_id: number
      store_id: number
      first_name: string
      last_name: string
      email: string | null
      address_id: number
      activebool: boolean
      create_date: Date
      last_update: Date | null
      active: number | null
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type customerGetPayload<S extends boolean | null | undefined | customerDefaultArgs> = $Result.GetResult<Prisma.$customerPayload, S>

  type customerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<customerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface customerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['customer'], meta: { name: 'customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {customerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends customerFindUniqueArgs>(args: SelectSubset<T, customerFindUniqueArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {customerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends customerFindUniqueOrThrowArgs>(args: SelectSubset<T, customerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends customerFindFirstArgs>(args?: SelectSubset<T, customerFindFirstArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends customerFindFirstOrThrowArgs>(args?: SelectSubset<T, customerFindFirstOrThrowArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `customer_id`
     * const customerWithCustomer_idOnly = await prisma.customer.findMany({ select: { customer_id: true } })
     * 
     */
    findMany<T extends customerFindManyArgs>(args?: SelectSubset<T, customerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {customerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends customerCreateArgs>(args: SelectSubset<T, customerCreateArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {customerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends customerCreateManyArgs>(args?: SelectSubset<T, customerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {customerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `customer_id`
     * const customerWithCustomer_idOnly = await prisma.customer.createManyAndReturn({
     *   select: { customer_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends customerCreateManyAndReturnArgs>(args?: SelectSubset<T, customerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {customerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends customerDeleteArgs>(args: SelectSubset<T, customerDeleteArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {customerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends customerUpdateArgs>(args: SelectSubset<T, customerUpdateArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {customerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends customerDeleteManyArgs>(args?: SelectSubset<T, customerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends customerUpdateManyArgs>(args: SelectSubset<T, customerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {customerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `customer_id`
     * const customerWithCustomer_idOnly = await prisma.customer.updateManyAndReturn({
     *   select: { customer_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends customerUpdateManyAndReturnArgs>(args: SelectSubset<T, customerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {customerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends customerUpsertArgs>(args: SelectSubset<T, customerUpsertArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends customerCountArgs>(
      args?: Subset<T, customerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends customerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: customerGroupByArgs['orderBy'] }
        : { orderBy?: customerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, customerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the customer model
   */
  readonly fields: customerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__customerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    address<T extends addressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, addressDefaultArgs<ExtArgs>>): Prisma__addressClient<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    store<T extends storeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, storeDefaultArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    film_comment<T extends customer$film_commentArgs<ExtArgs> = {}>(args?: Subset<T, customer$film_commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    mention<T extends customer$mentionArgs<ExtArgs> = {}>(args?: Subset<T, customer$mentionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notification<T extends customer$notificationArgs<ExtArgs> = {}>(args?: Subset<T, customer$notificationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    post_reaction<T extends customer$post_reactionArgs<ExtArgs> = {}>(args?: Subset<T, customer$post_reactionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    rental<T extends customer$rentalArgs<ExtArgs> = {}>(args?: Subset<T, customer$rentalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the customer model
   */
  interface customerFieldRefs {
    readonly customer_id: FieldRef<"customer", 'Int'>
    readonly store_id: FieldRef<"customer", 'Int'>
    readonly first_name: FieldRef<"customer", 'String'>
    readonly last_name: FieldRef<"customer", 'String'>
    readonly email: FieldRef<"customer", 'String'>
    readonly address_id: FieldRef<"customer", 'Int'>
    readonly activebool: FieldRef<"customer", 'Boolean'>
    readonly create_date: FieldRef<"customer", 'DateTime'>
    readonly last_update: FieldRef<"customer", 'DateTime'>
    readonly active: FieldRef<"customer", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * customer findUnique
   */
  export type customerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * Filter, which customer to fetch.
     */
    where: customerWhereUniqueInput
  }

  /**
   * customer findUniqueOrThrow
   */
  export type customerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * Filter, which customer to fetch.
     */
    where: customerWhereUniqueInput
  }

  /**
   * customer findFirst
   */
  export type customerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * Filter, which customer to fetch.
     */
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     */
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * customer findFirstOrThrow
   */
  export type customerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * Filter, which customer to fetch.
     */
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     */
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * customer findMany
   */
  export type customerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * Filter, which customers to fetch.
     */
    where?: customerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customers.
     */
    cursor?: customerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * customer create
   */
  export type customerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * The data needed to create a customer.
     */
    data: XOR<customerCreateInput, customerUncheckedCreateInput>
  }

  /**
   * customer createMany
   */
  export type customerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many customers.
     */
    data: customerCreateManyInput | customerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * customer createManyAndReturn
   */
  export type customerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * The data used to create many customers.
     */
    data: customerCreateManyInput | customerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * customer update
   */
  export type customerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * The data needed to update a customer.
     */
    data: XOR<customerUpdateInput, customerUncheckedUpdateInput>
    /**
     * Choose, which customer to update.
     */
    where: customerWhereUniqueInput
  }

  /**
   * customer updateMany
   */
  export type customerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update customers.
     */
    data: XOR<customerUpdateManyMutationInput, customerUncheckedUpdateManyInput>
    /**
     * Filter which customers to update
     */
    where?: customerWhereInput
    /**
     * Limit how many customers to update.
     */
    limit?: number
  }

  /**
   * customer updateManyAndReturn
   */
  export type customerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * The data used to update customers.
     */
    data: XOR<customerUpdateManyMutationInput, customerUncheckedUpdateManyInput>
    /**
     * Filter which customers to update
     */
    where?: customerWhereInput
    /**
     * Limit how many customers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * customer upsert
   */
  export type customerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * The filter to search for the customer to update in case it exists.
     */
    where: customerWhereUniqueInput
    /**
     * In case the customer found by the `where` argument doesn't exist, create a new customer with this data.
     */
    create: XOR<customerCreateInput, customerUncheckedCreateInput>
    /**
     * In case the customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<customerUpdateInput, customerUncheckedUpdateInput>
  }

  /**
   * customer delete
   */
  export type customerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    /**
     * Filter which customer to delete.
     */
    where: customerWhereUniqueInput
  }

  /**
   * customer deleteMany
   */
  export type customerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which customers to delete
     */
    where?: customerWhereInput
    /**
     * Limit how many customers to delete.
     */
    limit?: number
  }

  /**
   * customer.film_comment
   */
  export type customer$film_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentInclude<ExtArgs> | null
    where?: film_commentWhereInput
    orderBy?: film_commentOrderByWithRelationInput | film_commentOrderByWithRelationInput[]
    cursor?: film_commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Film_commentScalarFieldEnum | Film_commentScalarFieldEnum[]
  }

  /**
   * customer.mention
   */
  export type customer$mentionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionInclude<ExtArgs> | null
    where?: mentionWhereInput
    orderBy?: mentionOrderByWithRelationInput | mentionOrderByWithRelationInput[]
    cursor?: mentionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MentionScalarFieldEnum | MentionScalarFieldEnum[]
  }

  /**
   * customer.notification
   */
  export type customer$notificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    where?: notificationWhereInput
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    cursor?: notificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * customer.post_reaction
   */
  export type customer$post_reactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionInclude<ExtArgs> | null
    where?: post_reactionWhereInput
    orderBy?: post_reactionOrderByWithRelationInput | post_reactionOrderByWithRelationInput[]
    cursor?: post_reactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_reactionScalarFieldEnum | Post_reactionScalarFieldEnum[]
  }

  /**
   * customer.rental
   */
  export type customer$rentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
    where?: rentalWhereInput
    orderBy?: rentalOrderByWithRelationInput | rentalOrderByWithRelationInput[]
    cursor?: rentalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * customer without action
   */
  export type customerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
  }


  /**
   * Model film
   */

  export type AggregateFilm = {
    _count: FilmCountAggregateOutputType | null
    _avg: FilmAvgAggregateOutputType | null
    _sum: FilmSumAggregateOutputType | null
    _min: FilmMinAggregateOutputType | null
    _max: FilmMaxAggregateOutputType | null
  }

  export type FilmAvgAggregateOutputType = {
    film_id: number | null
    release_year: number | null
    language_id: number | null
    original_language_id: number | null
    rental_duration: number | null
    rental_rate: Decimal | null
    length: number | null
    replacement_cost: Decimal | null
  }

  export type FilmSumAggregateOutputType = {
    film_id: number | null
    release_year: number | null
    language_id: number | null
    original_language_id: number | null
    rental_duration: number | null
    rental_rate: Decimal | null
    length: number | null
    replacement_cost: Decimal | null
  }

  export type FilmMinAggregateOutputType = {
    film_id: number | null
    title: string | null
    description: string | null
    release_year: number | null
    language_id: number | null
    original_language_id: number | null
    rental_duration: number | null
    rental_rate: Decimal | null
    length: number | null
    replacement_cost: Decimal | null
    rating: $Enums.mpaa_rating | null
    last_update: Date | null
  }

  export type FilmMaxAggregateOutputType = {
    film_id: number | null
    title: string | null
    description: string | null
    release_year: number | null
    language_id: number | null
    original_language_id: number | null
    rental_duration: number | null
    rental_rate: Decimal | null
    length: number | null
    replacement_cost: Decimal | null
    rating: $Enums.mpaa_rating | null
    last_update: Date | null
  }

  export type FilmCountAggregateOutputType = {
    film_id: number
    title: number
    description: number
    release_year: number
    language_id: number
    original_language_id: number
    rental_duration: number
    rental_rate: number
    length: number
    replacement_cost: number
    rating: number
    last_update: number
    special_features: number
    _all: number
  }


  export type FilmAvgAggregateInputType = {
    film_id?: true
    release_year?: true
    language_id?: true
    original_language_id?: true
    rental_duration?: true
    rental_rate?: true
    length?: true
    replacement_cost?: true
  }

  export type FilmSumAggregateInputType = {
    film_id?: true
    release_year?: true
    language_id?: true
    original_language_id?: true
    rental_duration?: true
    rental_rate?: true
    length?: true
    replacement_cost?: true
  }

  export type FilmMinAggregateInputType = {
    film_id?: true
    title?: true
    description?: true
    release_year?: true
    language_id?: true
    original_language_id?: true
    rental_duration?: true
    rental_rate?: true
    length?: true
    replacement_cost?: true
    rating?: true
    last_update?: true
  }

  export type FilmMaxAggregateInputType = {
    film_id?: true
    title?: true
    description?: true
    release_year?: true
    language_id?: true
    original_language_id?: true
    rental_duration?: true
    rental_rate?: true
    length?: true
    replacement_cost?: true
    rating?: true
    last_update?: true
  }

  export type FilmCountAggregateInputType = {
    film_id?: true
    title?: true
    description?: true
    release_year?: true
    language_id?: true
    original_language_id?: true
    rental_duration?: true
    rental_rate?: true
    length?: true
    replacement_cost?: true
    rating?: true
    last_update?: true
    special_features?: true
    _all?: true
  }

  export type FilmAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which film to aggregate.
     */
    where?: filmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of films to fetch.
     */
    orderBy?: filmOrderByWithRelationInput | filmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: filmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` films from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` films.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned films
    **/
    _count?: true | FilmCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FilmAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FilmSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FilmMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FilmMaxAggregateInputType
  }

  export type GetFilmAggregateType<T extends FilmAggregateArgs> = {
        [P in keyof T & keyof AggregateFilm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFilm[P]>
      : GetScalarType<T[P], AggregateFilm[P]>
  }




  export type filmGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: filmWhereInput
    orderBy?: filmOrderByWithAggregationInput | filmOrderByWithAggregationInput[]
    by: FilmScalarFieldEnum[] | FilmScalarFieldEnum
    having?: filmScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FilmCountAggregateInputType | true
    _avg?: FilmAvgAggregateInputType
    _sum?: FilmSumAggregateInputType
    _min?: FilmMinAggregateInputType
    _max?: FilmMaxAggregateInputType
  }

  export type FilmGroupByOutputType = {
    film_id: number
    title: string
    description: string | null
    release_year: number | null
    language_id: number
    original_language_id: number | null
    rental_duration: number
    rental_rate: Decimal
    length: number | null
    replacement_cost: Decimal
    rating: $Enums.mpaa_rating | null
    last_update: Date
    special_features: string[]
    _count: FilmCountAggregateOutputType | null
    _avg: FilmAvgAggregateOutputType | null
    _sum: FilmSumAggregateOutputType | null
    _min: FilmMinAggregateOutputType | null
    _max: FilmMaxAggregateOutputType | null
  }

  type GetFilmGroupByPayload<T extends filmGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FilmGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FilmGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FilmGroupByOutputType[P]>
            : GetScalarType<T[P], FilmGroupByOutputType[P]>
        }
      >
    >


  export type filmSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    film_id?: boolean
    title?: boolean
    description?: boolean
    release_year?: boolean
    language_id?: boolean
    original_language_id?: boolean
    rental_duration?: boolean
    rental_rate?: boolean
    length?: boolean
    replacement_cost?: boolean
    rating?: boolean
    last_update?: boolean
    special_features?: boolean
    language_film_language_idTolanguage?: boolean | languageDefaultArgs<ExtArgs>
    language_film_original_language_idTolanguage?: boolean | film$language_film_original_language_idTolanguageArgs<ExtArgs>
    film_actor?: boolean | film$film_actorArgs<ExtArgs>
    film_category?: boolean | film$film_categoryArgs<ExtArgs>
    film_post?: boolean | film$film_postArgs<ExtArgs>
    inventory?: boolean | film$inventoryArgs<ExtArgs>
    _count?: boolean | FilmCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["film"]>


  export type filmSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    film_id?: boolean
    title?: boolean
    description?: boolean
    release_year?: boolean
    language_id?: boolean
    original_language_id?: boolean
    rental_duration?: boolean
    rental_rate?: boolean
    length?: boolean
    replacement_cost?: boolean
    rating?: boolean
    last_update?: boolean
    special_features?: boolean
    language_film_language_idTolanguage?: boolean | languageDefaultArgs<ExtArgs>
    language_film_original_language_idTolanguage?: boolean | film$language_film_original_language_idTolanguageArgs<ExtArgs>
  }, ExtArgs["result"]["film"]>

  export type filmSelectScalar = {
    film_id?: boolean
    title?: boolean
    description?: boolean
    release_year?: boolean
    language_id?: boolean
    original_language_id?: boolean
    rental_duration?: boolean
    rental_rate?: boolean
    length?: boolean
    replacement_cost?: boolean
    rating?: boolean
    last_update?: boolean
    special_features?: boolean
  }

  export type filmOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"film_id" | "title" | "description" | "release_year" | "language_id" | "original_language_id" | "rental_duration" | "rental_rate" | "length" | "replacement_cost" | "rating" | "last_update" | "special_features", ExtArgs["result"]["film"]>
  export type filmInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    language_film_language_idTolanguage?: boolean | languageDefaultArgs<ExtArgs>
    language_film_original_language_idTolanguage?: boolean | film$language_film_original_language_idTolanguageArgs<ExtArgs>
    film_actor?: boolean | film$film_actorArgs<ExtArgs>
    film_category?: boolean | film$film_categoryArgs<ExtArgs>
    film_post?: boolean | film$film_postArgs<ExtArgs>
    inventory?: boolean | film$inventoryArgs<ExtArgs>
    _count?: boolean | FilmCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type filmIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    language_film_language_idTolanguage?: boolean | languageDefaultArgs<ExtArgs>
    language_film_original_language_idTolanguage?: boolean | film$language_film_original_language_idTolanguageArgs<ExtArgs>
  }

  export type $filmPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "film"
    objects: {
      language_film_language_idTolanguage: Prisma.$languagePayload<ExtArgs>
      language_film_original_language_idTolanguage: Prisma.$languagePayload<ExtArgs> | null
      film_actor: Prisma.$film_actorPayload<ExtArgs>[]
      film_category: Prisma.$film_categoryPayload<ExtArgs>[]
      film_post: Prisma.$film_postPayload<ExtArgs>[]
      inventory: Prisma.$inventoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      film_id: number
      title: string
      description: string | null
      release_year: number | null
      language_id: number
      original_language_id: number | null
      rental_duration: number
      rental_rate: Prisma.Decimal
      length: number | null
      replacement_cost: Prisma.Decimal
      rating: $Enums.mpaa_rating | null
      last_update: Date
      special_features: string[]
    }, ExtArgs["result"]["film"]>
    composites: {}
  }

  type filmGetPayload<S extends boolean | null | undefined | filmDefaultArgs> = $Result.GetResult<Prisma.$filmPayload, S>

  type filmCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<filmFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FilmCountAggregateInputType | true
    }

  export interface filmDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['film'], meta: { name: 'film' } }
    /**
     * Find zero or one Film that matches the filter.
     * @param {filmFindUniqueArgs} args - Arguments to find a Film
     * @example
     * // Get one Film
     * const film = await prisma.film.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends filmFindUniqueArgs>(args: SelectSubset<T, filmFindUniqueArgs<ExtArgs>>): Prisma__filmClient<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Film that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {filmFindUniqueOrThrowArgs} args - Arguments to find a Film
     * @example
     * // Get one Film
     * const film = await prisma.film.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends filmFindUniqueOrThrowArgs>(args: SelectSubset<T, filmFindUniqueOrThrowArgs<ExtArgs>>): Prisma__filmClient<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Film that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filmFindFirstArgs} args - Arguments to find a Film
     * @example
     * // Get one Film
     * const film = await prisma.film.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends filmFindFirstArgs>(args?: SelectSubset<T, filmFindFirstArgs<ExtArgs>>): Prisma__filmClient<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Film that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filmFindFirstOrThrowArgs} args - Arguments to find a Film
     * @example
     * // Get one Film
     * const film = await prisma.film.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends filmFindFirstOrThrowArgs>(args?: SelectSubset<T, filmFindFirstOrThrowArgs<ExtArgs>>): Prisma__filmClient<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Films that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filmFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Films
     * const films = await prisma.film.findMany()
     * 
     * // Get first 10 Films
     * const films = await prisma.film.findMany({ take: 10 })
     * 
     * // Only select the `film_id`
     * const filmWithFilm_idOnly = await prisma.film.findMany({ select: { film_id: true } })
     * 
     */
    findMany<T extends filmFindManyArgs>(args?: SelectSubset<T, filmFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Delete a Film.
     * @param {filmDeleteArgs} args - Arguments to delete one Film.
     * @example
     * // Delete one Film
     * const Film = await prisma.film.delete({
     *   where: {
     *     // ... filter to delete one Film
     *   }
     * })
     * 
     */
    delete<T extends filmDeleteArgs>(args: SelectSubset<T, filmDeleteArgs<ExtArgs>>): Prisma__filmClient<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Film.
     * @param {filmUpdateArgs} args - Arguments to update one Film.
     * @example
     * // Update one Film
     * const film = await prisma.film.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends filmUpdateArgs>(args: SelectSubset<T, filmUpdateArgs<ExtArgs>>): Prisma__filmClient<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Films.
     * @param {filmDeleteManyArgs} args - Arguments to filter Films to delete.
     * @example
     * // Delete a few Films
     * const { count } = await prisma.film.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends filmDeleteManyArgs>(args?: SelectSubset<T, filmDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Films.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filmUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Films
     * const film = await prisma.film.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends filmUpdateManyArgs>(args: SelectSubset<T, filmUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Films and returns the data updated in the database.
     * @param {filmUpdateManyAndReturnArgs} args - Arguments to update many Films.
     * @example
     * // Update many Films
     * const film = await prisma.film.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Films and only return the `film_id`
     * const filmWithFilm_idOnly = await prisma.film.updateManyAndReturn({
     *   select: { film_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends filmUpdateManyAndReturnArgs>(args: SelectSubset<T, filmUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>


    /**
     * Count the number of Films.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filmCountArgs} args - Arguments to filter Films to count.
     * @example
     * // Count the number of Films
     * const count = await prisma.film.count({
     *   where: {
     *     // ... the filter for the Films we want to count
     *   }
     * })
    **/
    count<T extends filmCountArgs>(
      args?: Subset<T, filmCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FilmCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Film.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilmAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FilmAggregateArgs>(args: Subset<T, FilmAggregateArgs>): Prisma.PrismaPromise<GetFilmAggregateType<T>>

    /**
     * Group by Film.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {filmGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends filmGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: filmGroupByArgs['orderBy'] }
        : { orderBy?: filmGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, filmGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilmGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the film model
   */
  readonly fields: filmFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for film.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__filmClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    language_film_language_idTolanguage<T extends languageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, languageDefaultArgs<ExtArgs>>): Prisma__languageClient<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    language_film_original_language_idTolanguage<T extends film$language_film_original_language_idTolanguageArgs<ExtArgs> = {}>(args?: Subset<T, film$language_film_original_language_idTolanguageArgs<ExtArgs>>): Prisma__languageClient<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    film_actor<T extends film$film_actorArgs<ExtArgs> = {}>(args?: Subset<T, film$film_actorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    film_category<T extends film$film_categoryArgs<ExtArgs> = {}>(args?: Subset<T, film$film_categoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    film_post<T extends film$film_postArgs<ExtArgs> = {}>(args?: Subset<T, film$film_postArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inventory<T extends film$inventoryArgs<ExtArgs> = {}>(args?: Subset<T, film$inventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the film model
   */
  interface filmFieldRefs {
    readonly film_id: FieldRef<"film", 'Int'>
    readonly title: FieldRef<"film", 'String'>
    readonly description: FieldRef<"film", 'String'>
    readonly release_year: FieldRef<"film", 'Int'>
    readonly language_id: FieldRef<"film", 'Int'>
    readonly original_language_id: FieldRef<"film", 'Int'>
    readonly rental_duration: FieldRef<"film", 'Int'>
    readonly rental_rate: FieldRef<"film", 'Decimal'>
    readonly length: FieldRef<"film", 'Int'>
    readonly replacement_cost: FieldRef<"film", 'Decimal'>
    readonly rating: FieldRef<"film", 'mpaa_rating'>
    readonly last_update: FieldRef<"film", 'DateTime'>
    readonly special_features: FieldRef<"film", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * film findUnique
   */
  export type filmFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film
     */
    select?: filmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film
     */
    omit?: filmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: filmInclude<ExtArgs> | null
    /**
     * Filter, which film to fetch.
     */
    where: filmWhereUniqueInput
  }

  /**
   * film findUniqueOrThrow
   */
  export type filmFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film
     */
    select?: filmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film
     */
    omit?: filmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: filmInclude<ExtArgs> | null
    /**
     * Filter, which film to fetch.
     */
    where: filmWhereUniqueInput
  }

  /**
   * film findFirst
   */
  export type filmFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film
     */
    select?: filmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film
     */
    omit?: filmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: filmInclude<ExtArgs> | null
    /**
     * Filter, which film to fetch.
     */
    where?: filmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of films to fetch.
     */
    orderBy?: filmOrderByWithRelationInput | filmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for films.
     */
    cursor?: filmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` films from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` films.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of films.
     */
    distinct?: FilmScalarFieldEnum | FilmScalarFieldEnum[]
  }

  /**
   * film findFirstOrThrow
   */
  export type filmFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film
     */
    select?: filmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film
     */
    omit?: filmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: filmInclude<ExtArgs> | null
    /**
     * Filter, which film to fetch.
     */
    where?: filmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of films to fetch.
     */
    orderBy?: filmOrderByWithRelationInput | filmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for films.
     */
    cursor?: filmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` films from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` films.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of films.
     */
    distinct?: FilmScalarFieldEnum | FilmScalarFieldEnum[]
  }

  /**
   * film findMany
   */
  export type filmFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film
     */
    select?: filmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film
     */
    omit?: filmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: filmInclude<ExtArgs> | null
    /**
     * Filter, which films to fetch.
     */
    where?: filmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of films to fetch.
     */
    orderBy?: filmOrderByWithRelationInput | filmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing films.
     */
    cursor?: filmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` films from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` films.
     */
    skip?: number
    distinct?: FilmScalarFieldEnum | FilmScalarFieldEnum[]
  }

  /**
   * film update
   */
  export type filmUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film
     */
    select?: filmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film
     */
    omit?: filmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: filmInclude<ExtArgs> | null
    /**
     * The data needed to update a film.
     */
    data: XOR<filmUpdateInput, filmUncheckedUpdateInput>
    /**
     * Choose, which film to update.
     */
    where: filmWhereUniqueInput
  }

  /**
   * film updateMany
   */
  export type filmUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update films.
     */
    data: XOR<filmUpdateManyMutationInput, filmUncheckedUpdateManyInput>
    /**
     * Filter which films to update
     */
    where?: filmWhereInput
    /**
     * Limit how many films to update.
     */
    limit?: number
  }

  /**
   * film updateManyAndReturn
   */
  export type filmUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film
     */
    select?: filmSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the film
     */
    omit?: filmOmit<ExtArgs> | null
    /**
     * The data used to update films.
     */
    data: XOR<filmUpdateManyMutationInput, filmUncheckedUpdateManyInput>
    /**
     * Filter which films to update
     */
    where?: filmWhereInput
    /**
     * Limit how many films to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: filmIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * film delete
   */
  export type filmDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film
     */
    select?: filmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film
     */
    omit?: filmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: filmInclude<ExtArgs> | null
    /**
     * Filter which film to delete.
     */
    where: filmWhereUniqueInput
  }

  /**
   * film deleteMany
   */
  export type filmDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which films to delete
     */
    where?: filmWhereInput
    /**
     * Limit how many films to delete.
     */
    limit?: number
  }

  /**
   * film.language_film_original_language_idTolanguage
   */
  export type film$language_film_original_language_idTolanguageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: languageInclude<ExtArgs> | null
    where?: languageWhereInput
  }

  /**
   * film.film_actor
   */
  export type film$film_actorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorInclude<ExtArgs> | null
    where?: film_actorWhereInput
    orderBy?: film_actorOrderByWithRelationInput | film_actorOrderByWithRelationInput[]
    cursor?: film_actorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Film_actorScalarFieldEnum | Film_actorScalarFieldEnum[]
  }

  /**
   * film.film_category
   */
  export type film$film_categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryInclude<ExtArgs> | null
    where?: film_categoryWhereInput
    orderBy?: film_categoryOrderByWithRelationInput | film_categoryOrderByWithRelationInput[]
    cursor?: film_categoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Film_categoryScalarFieldEnum | Film_categoryScalarFieldEnum[]
  }

  /**
   * film.film_post
   */
  export type film$film_postArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postInclude<ExtArgs> | null
    where?: film_postWhereInput
    orderBy?: film_postOrderByWithRelationInput | film_postOrderByWithRelationInput[]
    cursor?: film_postWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Film_postScalarFieldEnum | Film_postScalarFieldEnum[]
  }

  /**
   * film.inventory
   */
  export type film$inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryInclude<ExtArgs> | null
    where?: inventoryWhereInput
    orderBy?: inventoryOrderByWithRelationInput | inventoryOrderByWithRelationInput[]
    cursor?: inventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * film without action
   */
  export type filmDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film
     */
    select?: filmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film
     */
    omit?: filmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: filmInclude<ExtArgs> | null
  }


  /**
   * Model film_actor
   */

  export type AggregateFilm_actor = {
    _count: Film_actorCountAggregateOutputType | null
    _avg: Film_actorAvgAggregateOutputType | null
    _sum: Film_actorSumAggregateOutputType | null
    _min: Film_actorMinAggregateOutputType | null
    _max: Film_actorMaxAggregateOutputType | null
  }

  export type Film_actorAvgAggregateOutputType = {
    actor_id: number | null
    film_id: number | null
  }

  export type Film_actorSumAggregateOutputType = {
    actor_id: number | null
    film_id: number | null
  }

  export type Film_actorMinAggregateOutputType = {
    actor_id: number | null
    film_id: number | null
    last_update: Date | null
  }

  export type Film_actorMaxAggregateOutputType = {
    actor_id: number | null
    film_id: number | null
    last_update: Date | null
  }

  export type Film_actorCountAggregateOutputType = {
    actor_id: number
    film_id: number
    last_update: number
    _all: number
  }


  export type Film_actorAvgAggregateInputType = {
    actor_id?: true
    film_id?: true
  }

  export type Film_actorSumAggregateInputType = {
    actor_id?: true
    film_id?: true
  }

  export type Film_actorMinAggregateInputType = {
    actor_id?: true
    film_id?: true
    last_update?: true
  }

  export type Film_actorMaxAggregateInputType = {
    actor_id?: true
    film_id?: true
    last_update?: true
  }

  export type Film_actorCountAggregateInputType = {
    actor_id?: true
    film_id?: true
    last_update?: true
    _all?: true
  }

  export type Film_actorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which film_actor to aggregate.
     */
    where?: film_actorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_actors to fetch.
     */
    orderBy?: film_actorOrderByWithRelationInput | film_actorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: film_actorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_actors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_actors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned film_actors
    **/
    _count?: true | Film_actorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Film_actorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Film_actorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Film_actorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Film_actorMaxAggregateInputType
  }

  export type GetFilm_actorAggregateType<T extends Film_actorAggregateArgs> = {
        [P in keyof T & keyof AggregateFilm_actor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFilm_actor[P]>
      : GetScalarType<T[P], AggregateFilm_actor[P]>
  }




  export type film_actorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: film_actorWhereInput
    orderBy?: film_actorOrderByWithAggregationInput | film_actorOrderByWithAggregationInput[]
    by: Film_actorScalarFieldEnum[] | Film_actorScalarFieldEnum
    having?: film_actorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Film_actorCountAggregateInputType | true
    _avg?: Film_actorAvgAggregateInputType
    _sum?: Film_actorSumAggregateInputType
    _min?: Film_actorMinAggregateInputType
    _max?: Film_actorMaxAggregateInputType
  }

  export type Film_actorGroupByOutputType = {
    actor_id: number
    film_id: number
    last_update: Date
    _count: Film_actorCountAggregateOutputType | null
    _avg: Film_actorAvgAggregateOutputType | null
    _sum: Film_actorSumAggregateOutputType | null
    _min: Film_actorMinAggregateOutputType | null
    _max: Film_actorMaxAggregateOutputType | null
  }

  type GetFilm_actorGroupByPayload<T extends film_actorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Film_actorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Film_actorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Film_actorGroupByOutputType[P]>
            : GetScalarType<T[P], Film_actorGroupByOutputType[P]>
        }
      >
    >


  export type film_actorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    actor_id?: boolean
    film_id?: boolean
    last_update?: boolean
    actor?: boolean | actorDefaultArgs<ExtArgs>
    film?: boolean | filmDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["film_actor"]>

  export type film_actorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    actor_id?: boolean
    film_id?: boolean
    last_update?: boolean
    actor?: boolean | actorDefaultArgs<ExtArgs>
    film?: boolean | filmDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["film_actor"]>

  export type film_actorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    actor_id?: boolean
    film_id?: boolean
    last_update?: boolean
    actor?: boolean | actorDefaultArgs<ExtArgs>
    film?: boolean | filmDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["film_actor"]>

  export type film_actorSelectScalar = {
    actor_id?: boolean
    film_id?: boolean
    last_update?: boolean
  }

  export type film_actorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"actor_id" | "film_id" | "last_update", ExtArgs["result"]["film_actor"]>
  export type film_actorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | actorDefaultArgs<ExtArgs>
    film?: boolean | filmDefaultArgs<ExtArgs>
  }
  export type film_actorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | actorDefaultArgs<ExtArgs>
    film?: boolean | filmDefaultArgs<ExtArgs>
  }
  export type film_actorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    actor?: boolean | actorDefaultArgs<ExtArgs>
    film?: boolean | filmDefaultArgs<ExtArgs>
  }

  export type $film_actorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "film_actor"
    objects: {
      actor: Prisma.$actorPayload<ExtArgs>
      film: Prisma.$filmPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      actor_id: number
      film_id: number
      last_update: Date
    }, ExtArgs["result"]["film_actor"]>
    composites: {}
  }

  type film_actorGetPayload<S extends boolean | null | undefined | film_actorDefaultArgs> = $Result.GetResult<Prisma.$film_actorPayload, S>

  type film_actorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<film_actorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Film_actorCountAggregateInputType | true
    }

  export interface film_actorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['film_actor'], meta: { name: 'film_actor' } }
    /**
     * Find zero or one Film_actor that matches the filter.
     * @param {film_actorFindUniqueArgs} args - Arguments to find a Film_actor
     * @example
     * // Get one Film_actor
     * const film_actor = await prisma.film_actor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends film_actorFindUniqueArgs>(args: SelectSubset<T, film_actorFindUniqueArgs<ExtArgs>>): Prisma__film_actorClient<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Film_actor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {film_actorFindUniqueOrThrowArgs} args - Arguments to find a Film_actor
     * @example
     * // Get one Film_actor
     * const film_actor = await prisma.film_actor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends film_actorFindUniqueOrThrowArgs>(args: SelectSubset<T, film_actorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__film_actorClient<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Film_actor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_actorFindFirstArgs} args - Arguments to find a Film_actor
     * @example
     * // Get one Film_actor
     * const film_actor = await prisma.film_actor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends film_actorFindFirstArgs>(args?: SelectSubset<T, film_actorFindFirstArgs<ExtArgs>>): Prisma__film_actorClient<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Film_actor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_actorFindFirstOrThrowArgs} args - Arguments to find a Film_actor
     * @example
     * // Get one Film_actor
     * const film_actor = await prisma.film_actor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends film_actorFindFirstOrThrowArgs>(args?: SelectSubset<T, film_actorFindFirstOrThrowArgs<ExtArgs>>): Prisma__film_actorClient<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Film_actors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_actorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Film_actors
     * const film_actors = await prisma.film_actor.findMany()
     * 
     * // Get first 10 Film_actors
     * const film_actors = await prisma.film_actor.findMany({ take: 10 })
     * 
     * // Only select the `actor_id`
     * const film_actorWithActor_idOnly = await prisma.film_actor.findMany({ select: { actor_id: true } })
     * 
     */
    findMany<T extends film_actorFindManyArgs>(args?: SelectSubset<T, film_actorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Film_actor.
     * @param {film_actorCreateArgs} args - Arguments to create a Film_actor.
     * @example
     * // Create one Film_actor
     * const Film_actor = await prisma.film_actor.create({
     *   data: {
     *     // ... data to create a Film_actor
     *   }
     * })
     * 
     */
    create<T extends film_actorCreateArgs>(args: SelectSubset<T, film_actorCreateArgs<ExtArgs>>): Prisma__film_actorClient<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Film_actors.
     * @param {film_actorCreateManyArgs} args - Arguments to create many Film_actors.
     * @example
     * // Create many Film_actors
     * const film_actor = await prisma.film_actor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends film_actorCreateManyArgs>(args?: SelectSubset<T, film_actorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Film_actors and returns the data saved in the database.
     * @param {film_actorCreateManyAndReturnArgs} args - Arguments to create many Film_actors.
     * @example
     * // Create many Film_actors
     * const film_actor = await prisma.film_actor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Film_actors and only return the `actor_id`
     * const film_actorWithActor_idOnly = await prisma.film_actor.createManyAndReturn({
     *   select: { actor_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends film_actorCreateManyAndReturnArgs>(args?: SelectSubset<T, film_actorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Film_actor.
     * @param {film_actorDeleteArgs} args - Arguments to delete one Film_actor.
     * @example
     * // Delete one Film_actor
     * const Film_actor = await prisma.film_actor.delete({
     *   where: {
     *     // ... filter to delete one Film_actor
     *   }
     * })
     * 
     */
    delete<T extends film_actorDeleteArgs>(args: SelectSubset<T, film_actorDeleteArgs<ExtArgs>>): Prisma__film_actorClient<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Film_actor.
     * @param {film_actorUpdateArgs} args - Arguments to update one Film_actor.
     * @example
     * // Update one Film_actor
     * const film_actor = await prisma.film_actor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends film_actorUpdateArgs>(args: SelectSubset<T, film_actorUpdateArgs<ExtArgs>>): Prisma__film_actorClient<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Film_actors.
     * @param {film_actorDeleteManyArgs} args - Arguments to filter Film_actors to delete.
     * @example
     * // Delete a few Film_actors
     * const { count } = await prisma.film_actor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends film_actorDeleteManyArgs>(args?: SelectSubset<T, film_actorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Film_actors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_actorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Film_actors
     * const film_actor = await prisma.film_actor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends film_actorUpdateManyArgs>(args: SelectSubset<T, film_actorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Film_actors and returns the data updated in the database.
     * @param {film_actorUpdateManyAndReturnArgs} args - Arguments to update many Film_actors.
     * @example
     * // Update many Film_actors
     * const film_actor = await prisma.film_actor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Film_actors and only return the `actor_id`
     * const film_actorWithActor_idOnly = await prisma.film_actor.updateManyAndReturn({
     *   select: { actor_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends film_actorUpdateManyAndReturnArgs>(args: SelectSubset<T, film_actorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Film_actor.
     * @param {film_actorUpsertArgs} args - Arguments to update or create a Film_actor.
     * @example
     * // Update or create a Film_actor
     * const film_actor = await prisma.film_actor.upsert({
     *   create: {
     *     // ... data to create a Film_actor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Film_actor we want to update
     *   }
     * })
     */
    upsert<T extends film_actorUpsertArgs>(args: SelectSubset<T, film_actorUpsertArgs<ExtArgs>>): Prisma__film_actorClient<$Result.GetResult<Prisma.$film_actorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Film_actors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_actorCountArgs} args - Arguments to filter Film_actors to count.
     * @example
     * // Count the number of Film_actors
     * const count = await prisma.film_actor.count({
     *   where: {
     *     // ... the filter for the Film_actors we want to count
     *   }
     * })
    **/
    count<T extends film_actorCountArgs>(
      args?: Subset<T, film_actorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Film_actorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Film_actor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Film_actorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Film_actorAggregateArgs>(args: Subset<T, Film_actorAggregateArgs>): Prisma.PrismaPromise<GetFilm_actorAggregateType<T>>

    /**
     * Group by Film_actor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_actorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends film_actorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: film_actorGroupByArgs['orderBy'] }
        : { orderBy?: film_actorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, film_actorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilm_actorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the film_actor model
   */
  readonly fields: film_actorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for film_actor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__film_actorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    actor<T extends actorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, actorDefaultArgs<ExtArgs>>): Prisma__actorClient<$Result.GetResult<Prisma.$actorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    film<T extends filmDefaultArgs<ExtArgs> = {}>(args?: Subset<T, filmDefaultArgs<ExtArgs>>): Prisma__filmClient<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the film_actor model
   */
  interface film_actorFieldRefs {
    readonly actor_id: FieldRef<"film_actor", 'Int'>
    readonly film_id: FieldRef<"film_actor", 'Int'>
    readonly last_update: FieldRef<"film_actor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * film_actor findUnique
   */
  export type film_actorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorInclude<ExtArgs> | null
    /**
     * Filter, which film_actor to fetch.
     */
    where: film_actorWhereUniqueInput
  }

  /**
   * film_actor findUniqueOrThrow
   */
  export type film_actorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorInclude<ExtArgs> | null
    /**
     * Filter, which film_actor to fetch.
     */
    where: film_actorWhereUniqueInput
  }

  /**
   * film_actor findFirst
   */
  export type film_actorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorInclude<ExtArgs> | null
    /**
     * Filter, which film_actor to fetch.
     */
    where?: film_actorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_actors to fetch.
     */
    orderBy?: film_actorOrderByWithRelationInput | film_actorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for film_actors.
     */
    cursor?: film_actorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_actors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_actors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of film_actors.
     */
    distinct?: Film_actorScalarFieldEnum | Film_actorScalarFieldEnum[]
  }

  /**
   * film_actor findFirstOrThrow
   */
  export type film_actorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorInclude<ExtArgs> | null
    /**
     * Filter, which film_actor to fetch.
     */
    where?: film_actorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_actors to fetch.
     */
    orderBy?: film_actorOrderByWithRelationInput | film_actorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for film_actors.
     */
    cursor?: film_actorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_actors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_actors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of film_actors.
     */
    distinct?: Film_actorScalarFieldEnum | Film_actorScalarFieldEnum[]
  }

  /**
   * film_actor findMany
   */
  export type film_actorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorInclude<ExtArgs> | null
    /**
     * Filter, which film_actors to fetch.
     */
    where?: film_actorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_actors to fetch.
     */
    orderBy?: film_actorOrderByWithRelationInput | film_actorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing film_actors.
     */
    cursor?: film_actorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_actors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_actors.
     */
    skip?: number
    distinct?: Film_actorScalarFieldEnum | Film_actorScalarFieldEnum[]
  }

  /**
   * film_actor create
   */
  export type film_actorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorInclude<ExtArgs> | null
    /**
     * The data needed to create a film_actor.
     */
    data: XOR<film_actorCreateInput, film_actorUncheckedCreateInput>
  }

  /**
   * film_actor createMany
   */
  export type film_actorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many film_actors.
     */
    data: film_actorCreateManyInput | film_actorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * film_actor createManyAndReturn
   */
  export type film_actorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * The data used to create many film_actors.
     */
    data: film_actorCreateManyInput | film_actorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * film_actor update
   */
  export type film_actorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorInclude<ExtArgs> | null
    /**
     * The data needed to update a film_actor.
     */
    data: XOR<film_actorUpdateInput, film_actorUncheckedUpdateInput>
    /**
     * Choose, which film_actor to update.
     */
    where: film_actorWhereUniqueInput
  }

  /**
   * film_actor updateMany
   */
  export type film_actorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update film_actors.
     */
    data: XOR<film_actorUpdateManyMutationInput, film_actorUncheckedUpdateManyInput>
    /**
     * Filter which film_actors to update
     */
    where?: film_actorWhereInput
    /**
     * Limit how many film_actors to update.
     */
    limit?: number
  }

  /**
   * film_actor updateManyAndReturn
   */
  export type film_actorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * The data used to update film_actors.
     */
    data: XOR<film_actorUpdateManyMutationInput, film_actorUncheckedUpdateManyInput>
    /**
     * Filter which film_actors to update
     */
    where?: film_actorWhereInput
    /**
     * Limit how many film_actors to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * film_actor upsert
   */
  export type film_actorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorInclude<ExtArgs> | null
    /**
     * The filter to search for the film_actor to update in case it exists.
     */
    where: film_actorWhereUniqueInput
    /**
     * In case the film_actor found by the `where` argument doesn't exist, create a new film_actor with this data.
     */
    create: XOR<film_actorCreateInput, film_actorUncheckedCreateInput>
    /**
     * In case the film_actor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<film_actorUpdateInput, film_actorUncheckedUpdateInput>
  }

  /**
   * film_actor delete
   */
  export type film_actorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorInclude<ExtArgs> | null
    /**
     * Filter which film_actor to delete.
     */
    where: film_actorWhereUniqueInput
  }

  /**
   * film_actor deleteMany
   */
  export type film_actorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which film_actors to delete
     */
    where?: film_actorWhereInput
    /**
     * Limit how many film_actors to delete.
     */
    limit?: number
  }

  /**
   * film_actor without action
   */
  export type film_actorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_actor
     */
    select?: film_actorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_actor
     */
    omit?: film_actorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_actorInclude<ExtArgs> | null
  }


  /**
   * Model film_category
   */

  export type AggregateFilm_category = {
    _count: Film_categoryCountAggregateOutputType | null
    _avg: Film_categoryAvgAggregateOutputType | null
    _sum: Film_categorySumAggregateOutputType | null
    _min: Film_categoryMinAggregateOutputType | null
    _max: Film_categoryMaxAggregateOutputType | null
  }

  export type Film_categoryAvgAggregateOutputType = {
    film_id: number | null
    category_id: number | null
  }

  export type Film_categorySumAggregateOutputType = {
    film_id: number | null
    category_id: number | null
  }

  export type Film_categoryMinAggregateOutputType = {
    film_id: number | null
    category_id: number | null
    last_update: Date | null
  }

  export type Film_categoryMaxAggregateOutputType = {
    film_id: number | null
    category_id: number | null
    last_update: Date | null
  }

  export type Film_categoryCountAggregateOutputType = {
    film_id: number
    category_id: number
    last_update: number
    _all: number
  }


  export type Film_categoryAvgAggregateInputType = {
    film_id?: true
    category_id?: true
  }

  export type Film_categorySumAggregateInputType = {
    film_id?: true
    category_id?: true
  }

  export type Film_categoryMinAggregateInputType = {
    film_id?: true
    category_id?: true
    last_update?: true
  }

  export type Film_categoryMaxAggregateInputType = {
    film_id?: true
    category_id?: true
    last_update?: true
  }

  export type Film_categoryCountAggregateInputType = {
    film_id?: true
    category_id?: true
    last_update?: true
    _all?: true
  }

  export type Film_categoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which film_category to aggregate.
     */
    where?: film_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_categories to fetch.
     */
    orderBy?: film_categoryOrderByWithRelationInput | film_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: film_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned film_categories
    **/
    _count?: true | Film_categoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Film_categoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Film_categorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Film_categoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Film_categoryMaxAggregateInputType
  }

  export type GetFilm_categoryAggregateType<T extends Film_categoryAggregateArgs> = {
        [P in keyof T & keyof AggregateFilm_category]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFilm_category[P]>
      : GetScalarType<T[P], AggregateFilm_category[P]>
  }




  export type film_categoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: film_categoryWhereInput
    orderBy?: film_categoryOrderByWithAggregationInput | film_categoryOrderByWithAggregationInput[]
    by: Film_categoryScalarFieldEnum[] | Film_categoryScalarFieldEnum
    having?: film_categoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Film_categoryCountAggregateInputType | true
    _avg?: Film_categoryAvgAggregateInputType
    _sum?: Film_categorySumAggregateInputType
    _min?: Film_categoryMinAggregateInputType
    _max?: Film_categoryMaxAggregateInputType
  }

  export type Film_categoryGroupByOutputType = {
    film_id: number
    category_id: number
    last_update: Date
    _count: Film_categoryCountAggregateOutputType | null
    _avg: Film_categoryAvgAggregateOutputType | null
    _sum: Film_categorySumAggregateOutputType | null
    _min: Film_categoryMinAggregateOutputType | null
    _max: Film_categoryMaxAggregateOutputType | null
  }

  type GetFilm_categoryGroupByPayload<T extends film_categoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Film_categoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Film_categoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Film_categoryGroupByOutputType[P]>
            : GetScalarType<T[P], Film_categoryGroupByOutputType[P]>
        }
      >
    >


  export type film_categorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    film_id?: boolean
    category_id?: boolean
    last_update?: boolean
    category?: boolean | categoryDefaultArgs<ExtArgs>
    film?: boolean | filmDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["film_category"]>

  export type film_categorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    film_id?: boolean
    category_id?: boolean
    last_update?: boolean
    category?: boolean | categoryDefaultArgs<ExtArgs>
    film?: boolean | filmDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["film_category"]>

  export type film_categorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    film_id?: boolean
    category_id?: boolean
    last_update?: boolean
    category?: boolean | categoryDefaultArgs<ExtArgs>
    film?: boolean | filmDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["film_category"]>

  export type film_categorySelectScalar = {
    film_id?: boolean
    category_id?: boolean
    last_update?: boolean
  }

  export type film_categoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"film_id" | "category_id" | "last_update", ExtArgs["result"]["film_category"]>
  export type film_categoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | categoryDefaultArgs<ExtArgs>
    film?: boolean | filmDefaultArgs<ExtArgs>
  }
  export type film_categoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | categoryDefaultArgs<ExtArgs>
    film?: boolean | filmDefaultArgs<ExtArgs>
  }
  export type film_categoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | categoryDefaultArgs<ExtArgs>
    film?: boolean | filmDefaultArgs<ExtArgs>
  }

  export type $film_categoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "film_category"
    objects: {
      category: Prisma.$categoryPayload<ExtArgs>
      film: Prisma.$filmPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      film_id: number
      category_id: number
      last_update: Date
    }, ExtArgs["result"]["film_category"]>
    composites: {}
  }

  type film_categoryGetPayload<S extends boolean | null | undefined | film_categoryDefaultArgs> = $Result.GetResult<Prisma.$film_categoryPayload, S>

  type film_categoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<film_categoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Film_categoryCountAggregateInputType | true
    }

  export interface film_categoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['film_category'], meta: { name: 'film_category' } }
    /**
     * Find zero or one Film_category that matches the filter.
     * @param {film_categoryFindUniqueArgs} args - Arguments to find a Film_category
     * @example
     * // Get one Film_category
     * const film_category = await prisma.film_category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends film_categoryFindUniqueArgs>(args: SelectSubset<T, film_categoryFindUniqueArgs<ExtArgs>>): Prisma__film_categoryClient<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Film_category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {film_categoryFindUniqueOrThrowArgs} args - Arguments to find a Film_category
     * @example
     * // Get one Film_category
     * const film_category = await prisma.film_category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends film_categoryFindUniqueOrThrowArgs>(args: SelectSubset<T, film_categoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__film_categoryClient<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Film_category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_categoryFindFirstArgs} args - Arguments to find a Film_category
     * @example
     * // Get one Film_category
     * const film_category = await prisma.film_category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends film_categoryFindFirstArgs>(args?: SelectSubset<T, film_categoryFindFirstArgs<ExtArgs>>): Prisma__film_categoryClient<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Film_category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_categoryFindFirstOrThrowArgs} args - Arguments to find a Film_category
     * @example
     * // Get one Film_category
     * const film_category = await prisma.film_category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends film_categoryFindFirstOrThrowArgs>(args?: SelectSubset<T, film_categoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__film_categoryClient<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Film_categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_categoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Film_categories
     * const film_categories = await prisma.film_category.findMany()
     * 
     * // Get first 10 Film_categories
     * const film_categories = await prisma.film_category.findMany({ take: 10 })
     * 
     * // Only select the `film_id`
     * const film_categoryWithFilm_idOnly = await prisma.film_category.findMany({ select: { film_id: true } })
     * 
     */
    findMany<T extends film_categoryFindManyArgs>(args?: SelectSubset<T, film_categoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Film_category.
     * @param {film_categoryCreateArgs} args - Arguments to create a Film_category.
     * @example
     * // Create one Film_category
     * const Film_category = await prisma.film_category.create({
     *   data: {
     *     // ... data to create a Film_category
     *   }
     * })
     * 
     */
    create<T extends film_categoryCreateArgs>(args: SelectSubset<T, film_categoryCreateArgs<ExtArgs>>): Prisma__film_categoryClient<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Film_categories.
     * @param {film_categoryCreateManyArgs} args - Arguments to create many Film_categories.
     * @example
     * // Create many Film_categories
     * const film_category = await prisma.film_category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends film_categoryCreateManyArgs>(args?: SelectSubset<T, film_categoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Film_categories and returns the data saved in the database.
     * @param {film_categoryCreateManyAndReturnArgs} args - Arguments to create many Film_categories.
     * @example
     * // Create many Film_categories
     * const film_category = await prisma.film_category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Film_categories and only return the `film_id`
     * const film_categoryWithFilm_idOnly = await prisma.film_category.createManyAndReturn({
     *   select: { film_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends film_categoryCreateManyAndReturnArgs>(args?: SelectSubset<T, film_categoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Film_category.
     * @param {film_categoryDeleteArgs} args - Arguments to delete one Film_category.
     * @example
     * // Delete one Film_category
     * const Film_category = await prisma.film_category.delete({
     *   where: {
     *     // ... filter to delete one Film_category
     *   }
     * })
     * 
     */
    delete<T extends film_categoryDeleteArgs>(args: SelectSubset<T, film_categoryDeleteArgs<ExtArgs>>): Prisma__film_categoryClient<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Film_category.
     * @param {film_categoryUpdateArgs} args - Arguments to update one Film_category.
     * @example
     * // Update one Film_category
     * const film_category = await prisma.film_category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends film_categoryUpdateArgs>(args: SelectSubset<T, film_categoryUpdateArgs<ExtArgs>>): Prisma__film_categoryClient<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Film_categories.
     * @param {film_categoryDeleteManyArgs} args - Arguments to filter Film_categories to delete.
     * @example
     * // Delete a few Film_categories
     * const { count } = await prisma.film_category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends film_categoryDeleteManyArgs>(args?: SelectSubset<T, film_categoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Film_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_categoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Film_categories
     * const film_category = await prisma.film_category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends film_categoryUpdateManyArgs>(args: SelectSubset<T, film_categoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Film_categories and returns the data updated in the database.
     * @param {film_categoryUpdateManyAndReturnArgs} args - Arguments to update many Film_categories.
     * @example
     * // Update many Film_categories
     * const film_category = await prisma.film_category.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Film_categories and only return the `film_id`
     * const film_categoryWithFilm_idOnly = await prisma.film_category.updateManyAndReturn({
     *   select: { film_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends film_categoryUpdateManyAndReturnArgs>(args: SelectSubset<T, film_categoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Film_category.
     * @param {film_categoryUpsertArgs} args - Arguments to update or create a Film_category.
     * @example
     * // Update or create a Film_category
     * const film_category = await prisma.film_category.upsert({
     *   create: {
     *     // ... data to create a Film_category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Film_category we want to update
     *   }
     * })
     */
    upsert<T extends film_categoryUpsertArgs>(args: SelectSubset<T, film_categoryUpsertArgs<ExtArgs>>): Prisma__film_categoryClient<$Result.GetResult<Prisma.$film_categoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Film_categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_categoryCountArgs} args - Arguments to filter Film_categories to count.
     * @example
     * // Count the number of Film_categories
     * const count = await prisma.film_category.count({
     *   where: {
     *     // ... the filter for the Film_categories we want to count
     *   }
     * })
    **/
    count<T extends film_categoryCountArgs>(
      args?: Subset<T, film_categoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Film_categoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Film_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Film_categoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Film_categoryAggregateArgs>(args: Subset<T, Film_categoryAggregateArgs>): Prisma.PrismaPromise<GetFilm_categoryAggregateType<T>>

    /**
     * Group by Film_category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_categoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends film_categoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: film_categoryGroupByArgs['orderBy'] }
        : { orderBy?: film_categoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, film_categoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilm_categoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the film_category model
   */
  readonly fields: film_categoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for film_category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__film_categoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends categoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoryDefaultArgs<ExtArgs>>): Prisma__categoryClient<$Result.GetResult<Prisma.$categoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    film<T extends filmDefaultArgs<ExtArgs> = {}>(args?: Subset<T, filmDefaultArgs<ExtArgs>>): Prisma__filmClient<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the film_category model
   */
  interface film_categoryFieldRefs {
    readonly film_id: FieldRef<"film_category", 'Int'>
    readonly category_id: FieldRef<"film_category", 'Int'>
    readonly last_update: FieldRef<"film_category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * film_category findUnique
   */
  export type film_categoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryInclude<ExtArgs> | null
    /**
     * Filter, which film_category to fetch.
     */
    where: film_categoryWhereUniqueInput
  }

  /**
   * film_category findUniqueOrThrow
   */
  export type film_categoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryInclude<ExtArgs> | null
    /**
     * Filter, which film_category to fetch.
     */
    where: film_categoryWhereUniqueInput
  }

  /**
   * film_category findFirst
   */
  export type film_categoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryInclude<ExtArgs> | null
    /**
     * Filter, which film_category to fetch.
     */
    where?: film_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_categories to fetch.
     */
    orderBy?: film_categoryOrderByWithRelationInput | film_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for film_categories.
     */
    cursor?: film_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of film_categories.
     */
    distinct?: Film_categoryScalarFieldEnum | Film_categoryScalarFieldEnum[]
  }

  /**
   * film_category findFirstOrThrow
   */
  export type film_categoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryInclude<ExtArgs> | null
    /**
     * Filter, which film_category to fetch.
     */
    where?: film_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_categories to fetch.
     */
    orderBy?: film_categoryOrderByWithRelationInput | film_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for film_categories.
     */
    cursor?: film_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of film_categories.
     */
    distinct?: Film_categoryScalarFieldEnum | Film_categoryScalarFieldEnum[]
  }

  /**
   * film_category findMany
   */
  export type film_categoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryInclude<ExtArgs> | null
    /**
     * Filter, which film_categories to fetch.
     */
    where?: film_categoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_categories to fetch.
     */
    orderBy?: film_categoryOrderByWithRelationInput | film_categoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing film_categories.
     */
    cursor?: film_categoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_categories.
     */
    skip?: number
    distinct?: Film_categoryScalarFieldEnum | Film_categoryScalarFieldEnum[]
  }

  /**
   * film_category create
   */
  export type film_categoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryInclude<ExtArgs> | null
    /**
     * The data needed to create a film_category.
     */
    data: XOR<film_categoryCreateInput, film_categoryUncheckedCreateInput>
  }

  /**
   * film_category createMany
   */
  export type film_categoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many film_categories.
     */
    data: film_categoryCreateManyInput | film_categoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * film_category createManyAndReturn
   */
  export type film_categoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * The data used to create many film_categories.
     */
    data: film_categoryCreateManyInput | film_categoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * film_category update
   */
  export type film_categoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryInclude<ExtArgs> | null
    /**
     * The data needed to update a film_category.
     */
    data: XOR<film_categoryUpdateInput, film_categoryUncheckedUpdateInput>
    /**
     * Choose, which film_category to update.
     */
    where: film_categoryWhereUniqueInput
  }

  /**
   * film_category updateMany
   */
  export type film_categoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update film_categories.
     */
    data: XOR<film_categoryUpdateManyMutationInput, film_categoryUncheckedUpdateManyInput>
    /**
     * Filter which film_categories to update
     */
    where?: film_categoryWhereInput
    /**
     * Limit how many film_categories to update.
     */
    limit?: number
  }

  /**
   * film_category updateManyAndReturn
   */
  export type film_categoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * The data used to update film_categories.
     */
    data: XOR<film_categoryUpdateManyMutationInput, film_categoryUncheckedUpdateManyInput>
    /**
     * Filter which film_categories to update
     */
    where?: film_categoryWhereInput
    /**
     * Limit how many film_categories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * film_category upsert
   */
  export type film_categoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryInclude<ExtArgs> | null
    /**
     * The filter to search for the film_category to update in case it exists.
     */
    where: film_categoryWhereUniqueInput
    /**
     * In case the film_category found by the `where` argument doesn't exist, create a new film_category with this data.
     */
    create: XOR<film_categoryCreateInput, film_categoryUncheckedCreateInput>
    /**
     * In case the film_category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<film_categoryUpdateInput, film_categoryUncheckedUpdateInput>
  }

  /**
   * film_category delete
   */
  export type film_categoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryInclude<ExtArgs> | null
    /**
     * Filter which film_category to delete.
     */
    where: film_categoryWhereUniqueInput
  }

  /**
   * film_category deleteMany
   */
  export type film_categoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which film_categories to delete
     */
    where?: film_categoryWhereInput
    /**
     * Limit how many film_categories to delete.
     */
    limit?: number
  }

  /**
   * film_category without action
   */
  export type film_categoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_category
     */
    select?: film_categorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_category
     */
    omit?: film_categoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_categoryInclude<ExtArgs> | null
  }


  /**
   * Model film_comment
   */

  export type AggregateFilm_comment = {
    _count: Film_commentCountAggregateOutputType | null
    _avg: Film_commentAvgAggregateOutputType | null
    _sum: Film_commentSumAggregateOutputType | null
    _min: Film_commentMinAggregateOutputType | null
    _max: Film_commentMaxAggregateOutputType | null
  }

  export type Film_commentAvgAggregateOutputType = {
    comment_id: number | null
    post_id: number | null
    customer_id: number | null
  }

  export type Film_commentSumAggregateOutputType = {
    comment_id: number | null
    post_id: number | null
    customer_id: number | null
  }

  export type Film_commentMinAggregateOutputType = {
    comment_id: number | null
    post_id: number | null
    customer_id: number | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Film_commentMaxAggregateOutputType = {
    comment_id: number | null
    post_id: number | null
    customer_id: number | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Film_commentCountAggregateOutputType = {
    comment_id: number
    post_id: number
    customer_id: number
    content: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Film_commentAvgAggregateInputType = {
    comment_id?: true
    post_id?: true
    customer_id?: true
  }

  export type Film_commentSumAggregateInputType = {
    comment_id?: true
    post_id?: true
    customer_id?: true
  }

  export type Film_commentMinAggregateInputType = {
    comment_id?: true
    post_id?: true
    customer_id?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type Film_commentMaxAggregateInputType = {
    comment_id?: true
    post_id?: true
    customer_id?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type Film_commentCountAggregateInputType = {
    comment_id?: true
    post_id?: true
    customer_id?: true
    content?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Film_commentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which film_comment to aggregate.
     */
    where?: film_commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_comments to fetch.
     */
    orderBy?: film_commentOrderByWithRelationInput | film_commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: film_commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned film_comments
    **/
    _count?: true | Film_commentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Film_commentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Film_commentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Film_commentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Film_commentMaxAggregateInputType
  }

  export type GetFilm_commentAggregateType<T extends Film_commentAggregateArgs> = {
        [P in keyof T & keyof AggregateFilm_comment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFilm_comment[P]>
      : GetScalarType<T[P], AggregateFilm_comment[P]>
  }




  export type film_commentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: film_commentWhereInput
    orderBy?: film_commentOrderByWithAggregationInput | film_commentOrderByWithAggregationInput[]
    by: Film_commentScalarFieldEnum[] | Film_commentScalarFieldEnum
    having?: film_commentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Film_commentCountAggregateInputType | true
    _avg?: Film_commentAvgAggregateInputType
    _sum?: Film_commentSumAggregateInputType
    _min?: Film_commentMinAggregateInputType
    _max?: Film_commentMaxAggregateInputType
  }

  export type Film_commentGroupByOutputType = {
    comment_id: number
    post_id: number
    customer_id: number
    content: string
    created_at: Date
    updated_at: Date
    _count: Film_commentCountAggregateOutputType | null
    _avg: Film_commentAvgAggregateOutputType | null
    _sum: Film_commentSumAggregateOutputType | null
    _min: Film_commentMinAggregateOutputType | null
    _max: Film_commentMaxAggregateOutputType | null
  }

  type GetFilm_commentGroupByPayload<T extends film_commentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Film_commentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Film_commentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Film_commentGroupByOutputType[P]>
            : GetScalarType<T[P], Film_commentGroupByOutputType[P]>
        }
      >
    >


  export type film_commentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    comment_id?: boolean
    post_id?: boolean
    customer_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    film_post?: boolean | film_postDefaultArgs<ExtArgs>
    mention?: boolean | film_comment$mentionArgs<ExtArgs>
    _count?: boolean | Film_commentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["film_comment"]>

  export type film_commentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    comment_id?: boolean
    post_id?: boolean
    customer_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    film_post?: boolean | film_postDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["film_comment"]>

  export type film_commentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    comment_id?: boolean
    post_id?: boolean
    customer_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    film_post?: boolean | film_postDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["film_comment"]>

  export type film_commentSelectScalar = {
    comment_id?: boolean
    post_id?: boolean
    customer_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type film_commentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"comment_id" | "post_id" | "customer_id" | "content" | "created_at" | "updated_at", ExtArgs["result"]["film_comment"]>
  export type film_commentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    film_post?: boolean | film_postDefaultArgs<ExtArgs>
    mention?: boolean | film_comment$mentionArgs<ExtArgs>
    _count?: boolean | Film_commentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type film_commentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    film_post?: boolean | film_postDefaultArgs<ExtArgs>
  }
  export type film_commentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    film_post?: boolean | film_postDefaultArgs<ExtArgs>
  }

  export type $film_commentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "film_comment"
    objects: {
      customer: Prisma.$customerPayload<ExtArgs>
      film_post: Prisma.$film_postPayload<ExtArgs>
      mention: Prisma.$mentionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      comment_id: number
      post_id: number
      customer_id: number
      content: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["film_comment"]>
    composites: {}
  }

  type film_commentGetPayload<S extends boolean | null | undefined | film_commentDefaultArgs> = $Result.GetResult<Prisma.$film_commentPayload, S>

  type film_commentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<film_commentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Film_commentCountAggregateInputType | true
    }

  export interface film_commentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['film_comment'], meta: { name: 'film_comment' } }
    /**
     * Find zero or one Film_comment that matches the filter.
     * @param {film_commentFindUniqueArgs} args - Arguments to find a Film_comment
     * @example
     * // Get one Film_comment
     * const film_comment = await prisma.film_comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends film_commentFindUniqueArgs>(args: SelectSubset<T, film_commentFindUniqueArgs<ExtArgs>>): Prisma__film_commentClient<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Film_comment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {film_commentFindUniqueOrThrowArgs} args - Arguments to find a Film_comment
     * @example
     * // Get one Film_comment
     * const film_comment = await prisma.film_comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends film_commentFindUniqueOrThrowArgs>(args: SelectSubset<T, film_commentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__film_commentClient<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Film_comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_commentFindFirstArgs} args - Arguments to find a Film_comment
     * @example
     * // Get one Film_comment
     * const film_comment = await prisma.film_comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends film_commentFindFirstArgs>(args?: SelectSubset<T, film_commentFindFirstArgs<ExtArgs>>): Prisma__film_commentClient<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Film_comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_commentFindFirstOrThrowArgs} args - Arguments to find a Film_comment
     * @example
     * // Get one Film_comment
     * const film_comment = await prisma.film_comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends film_commentFindFirstOrThrowArgs>(args?: SelectSubset<T, film_commentFindFirstOrThrowArgs<ExtArgs>>): Prisma__film_commentClient<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Film_comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_commentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Film_comments
     * const film_comments = await prisma.film_comment.findMany()
     * 
     * // Get first 10 Film_comments
     * const film_comments = await prisma.film_comment.findMany({ take: 10 })
     * 
     * // Only select the `comment_id`
     * const film_commentWithComment_idOnly = await prisma.film_comment.findMany({ select: { comment_id: true } })
     * 
     */
    findMany<T extends film_commentFindManyArgs>(args?: SelectSubset<T, film_commentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Film_comment.
     * @param {film_commentCreateArgs} args - Arguments to create a Film_comment.
     * @example
     * // Create one Film_comment
     * const Film_comment = await prisma.film_comment.create({
     *   data: {
     *     // ... data to create a Film_comment
     *   }
     * })
     * 
     */
    create<T extends film_commentCreateArgs>(args: SelectSubset<T, film_commentCreateArgs<ExtArgs>>): Prisma__film_commentClient<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Film_comments.
     * @param {film_commentCreateManyArgs} args - Arguments to create many Film_comments.
     * @example
     * // Create many Film_comments
     * const film_comment = await prisma.film_comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends film_commentCreateManyArgs>(args?: SelectSubset<T, film_commentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Film_comments and returns the data saved in the database.
     * @param {film_commentCreateManyAndReturnArgs} args - Arguments to create many Film_comments.
     * @example
     * // Create many Film_comments
     * const film_comment = await prisma.film_comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Film_comments and only return the `comment_id`
     * const film_commentWithComment_idOnly = await prisma.film_comment.createManyAndReturn({
     *   select: { comment_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends film_commentCreateManyAndReturnArgs>(args?: SelectSubset<T, film_commentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Film_comment.
     * @param {film_commentDeleteArgs} args - Arguments to delete one Film_comment.
     * @example
     * // Delete one Film_comment
     * const Film_comment = await prisma.film_comment.delete({
     *   where: {
     *     // ... filter to delete one Film_comment
     *   }
     * })
     * 
     */
    delete<T extends film_commentDeleteArgs>(args: SelectSubset<T, film_commentDeleteArgs<ExtArgs>>): Prisma__film_commentClient<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Film_comment.
     * @param {film_commentUpdateArgs} args - Arguments to update one Film_comment.
     * @example
     * // Update one Film_comment
     * const film_comment = await prisma.film_comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends film_commentUpdateArgs>(args: SelectSubset<T, film_commentUpdateArgs<ExtArgs>>): Prisma__film_commentClient<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Film_comments.
     * @param {film_commentDeleteManyArgs} args - Arguments to filter Film_comments to delete.
     * @example
     * // Delete a few Film_comments
     * const { count } = await prisma.film_comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends film_commentDeleteManyArgs>(args?: SelectSubset<T, film_commentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Film_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_commentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Film_comments
     * const film_comment = await prisma.film_comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends film_commentUpdateManyArgs>(args: SelectSubset<T, film_commentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Film_comments and returns the data updated in the database.
     * @param {film_commentUpdateManyAndReturnArgs} args - Arguments to update many Film_comments.
     * @example
     * // Update many Film_comments
     * const film_comment = await prisma.film_comment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Film_comments and only return the `comment_id`
     * const film_commentWithComment_idOnly = await prisma.film_comment.updateManyAndReturn({
     *   select: { comment_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends film_commentUpdateManyAndReturnArgs>(args: SelectSubset<T, film_commentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Film_comment.
     * @param {film_commentUpsertArgs} args - Arguments to update or create a Film_comment.
     * @example
     * // Update or create a Film_comment
     * const film_comment = await prisma.film_comment.upsert({
     *   create: {
     *     // ... data to create a Film_comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Film_comment we want to update
     *   }
     * })
     */
    upsert<T extends film_commentUpsertArgs>(args: SelectSubset<T, film_commentUpsertArgs<ExtArgs>>): Prisma__film_commentClient<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Film_comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_commentCountArgs} args - Arguments to filter Film_comments to count.
     * @example
     * // Count the number of Film_comments
     * const count = await prisma.film_comment.count({
     *   where: {
     *     // ... the filter for the Film_comments we want to count
     *   }
     * })
    **/
    count<T extends film_commentCountArgs>(
      args?: Subset<T, film_commentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Film_commentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Film_comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Film_commentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Film_commentAggregateArgs>(args: Subset<T, Film_commentAggregateArgs>): Prisma.PrismaPromise<GetFilm_commentAggregateType<T>>

    /**
     * Group by Film_comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_commentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends film_commentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: film_commentGroupByArgs['orderBy'] }
        : { orderBy?: film_commentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, film_commentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilm_commentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the film_comment model
   */
  readonly fields: film_commentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for film_comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__film_commentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends customerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, customerDefaultArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    film_post<T extends film_postDefaultArgs<ExtArgs> = {}>(args?: Subset<T, film_postDefaultArgs<ExtArgs>>): Prisma__film_postClient<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    mention<T extends film_comment$mentionArgs<ExtArgs> = {}>(args?: Subset<T, film_comment$mentionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the film_comment model
   */
  interface film_commentFieldRefs {
    readonly comment_id: FieldRef<"film_comment", 'Int'>
    readonly post_id: FieldRef<"film_comment", 'Int'>
    readonly customer_id: FieldRef<"film_comment", 'Int'>
    readonly content: FieldRef<"film_comment", 'String'>
    readonly created_at: FieldRef<"film_comment", 'DateTime'>
    readonly updated_at: FieldRef<"film_comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * film_comment findUnique
   */
  export type film_commentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentInclude<ExtArgs> | null
    /**
     * Filter, which film_comment to fetch.
     */
    where: film_commentWhereUniqueInput
  }

  /**
   * film_comment findUniqueOrThrow
   */
  export type film_commentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentInclude<ExtArgs> | null
    /**
     * Filter, which film_comment to fetch.
     */
    where: film_commentWhereUniqueInput
  }

  /**
   * film_comment findFirst
   */
  export type film_commentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentInclude<ExtArgs> | null
    /**
     * Filter, which film_comment to fetch.
     */
    where?: film_commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_comments to fetch.
     */
    orderBy?: film_commentOrderByWithRelationInput | film_commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for film_comments.
     */
    cursor?: film_commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of film_comments.
     */
    distinct?: Film_commentScalarFieldEnum | Film_commentScalarFieldEnum[]
  }

  /**
   * film_comment findFirstOrThrow
   */
  export type film_commentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentInclude<ExtArgs> | null
    /**
     * Filter, which film_comment to fetch.
     */
    where?: film_commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_comments to fetch.
     */
    orderBy?: film_commentOrderByWithRelationInput | film_commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for film_comments.
     */
    cursor?: film_commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of film_comments.
     */
    distinct?: Film_commentScalarFieldEnum | Film_commentScalarFieldEnum[]
  }

  /**
   * film_comment findMany
   */
  export type film_commentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentInclude<ExtArgs> | null
    /**
     * Filter, which film_comments to fetch.
     */
    where?: film_commentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_comments to fetch.
     */
    orderBy?: film_commentOrderByWithRelationInput | film_commentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing film_comments.
     */
    cursor?: film_commentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_comments.
     */
    skip?: number
    distinct?: Film_commentScalarFieldEnum | Film_commentScalarFieldEnum[]
  }

  /**
   * film_comment create
   */
  export type film_commentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentInclude<ExtArgs> | null
    /**
     * The data needed to create a film_comment.
     */
    data: XOR<film_commentCreateInput, film_commentUncheckedCreateInput>
  }

  /**
   * film_comment createMany
   */
  export type film_commentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many film_comments.
     */
    data: film_commentCreateManyInput | film_commentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * film_comment createManyAndReturn
   */
  export type film_commentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * The data used to create many film_comments.
     */
    data: film_commentCreateManyInput | film_commentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * film_comment update
   */
  export type film_commentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentInclude<ExtArgs> | null
    /**
     * The data needed to update a film_comment.
     */
    data: XOR<film_commentUpdateInput, film_commentUncheckedUpdateInput>
    /**
     * Choose, which film_comment to update.
     */
    where: film_commentWhereUniqueInput
  }

  /**
   * film_comment updateMany
   */
  export type film_commentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update film_comments.
     */
    data: XOR<film_commentUpdateManyMutationInput, film_commentUncheckedUpdateManyInput>
    /**
     * Filter which film_comments to update
     */
    where?: film_commentWhereInput
    /**
     * Limit how many film_comments to update.
     */
    limit?: number
  }

  /**
   * film_comment updateManyAndReturn
   */
  export type film_commentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * The data used to update film_comments.
     */
    data: XOR<film_commentUpdateManyMutationInput, film_commentUncheckedUpdateManyInput>
    /**
     * Filter which film_comments to update
     */
    where?: film_commentWhereInput
    /**
     * Limit how many film_comments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * film_comment upsert
   */
  export type film_commentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentInclude<ExtArgs> | null
    /**
     * The filter to search for the film_comment to update in case it exists.
     */
    where: film_commentWhereUniqueInput
    /**
     * In case the film_comment found by the `where` argument doesn't exist, create a new film_comment with this data.
     */
    create: XOR<film_commentCreateInput, film_commentUncheckedCreateInput>
    /**
     * In case the film_comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<film_commentUpdateInput, film_commentUncheckedUpdateInput>
  }

  /**
   * film_comment delete
   */
  export type film_commentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentInclude<ExtArgs> | null
    /**
     * Filter which film_comment to delete.
     */
    where: film_commentWhereUniqueInput
  }

  /**
   * film_comment deleteMany
   */
  export type film_commentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which film_comments to delete
     */
    where?: film_commentWhereInput
    /**
     * Limit how many film_comments to delete.
     */
    limit?: number
  }

  /**
   * film_comment.mention
   */
  export type film_comment$mentionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionInclude<ExtArgs> | null
    where?: mentionWhereInput
    orderBy?: mentionOrderByWithRelationInput | mentionOrderByWithRelationInput[]
    cursor?: mentionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MentionScalarFieldEnum | MentionScalarFieldEnum[]
  }

  /**
   * film_comment without action
   */
  export type film_commentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentInclude<ExtArgs> | null
  }


  /**
   * Model film_post
   */

  export type AggregateFilm_post = {
    _count: Film_postCountAggregateOutputType | null
    _avg: Film_postAvgAggregateOutputType | null
    _sum: Film_postSumAggregateOutputType | null
    _min: Film_postMinAggregateOutputType | null
    _max: Film_postMaxAggregateOutputType | null
  }

  export type Film_postAvgAggregateOutputType = {
    post_id: number | null
    film_id: number | null
  }

  export type Film_postSumAggregateOutputType = {
    post_id: number | null
    film_id: number | null
  }

  export type Film_postMinAggregateOutputType = {
    post_id: number | null
    film_id: number | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Film_postMaxAggregateOutputType = {
    post_id: number | null
    film_id: number | null
    content: string | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Film_postCountAggregateOutputType = {
    post_id: number
    film_id: number
    content: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Film_postAvgAggregateInputType = {
    post_id?: true
    film_id?: true
  }

  export type Film_postSumAggregateInputType = {
    post_id?: true
    film_id?: true
  }

  export type Film_postMinAggregateInputType = {
    post_id?: true
    film_id?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type Film_postMaxAggregateInputType = {
    post_id?: true
    film_id?: true
    content?: true
    created_at?: true
    updated_at?: true
  }

  export type Film_postCountAggregateInputType = {
    post_id?: true
    film_id?: true
    content?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Film_postAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which film_post to aggregate.
     */
    where?: film_postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_posts to fetch.
     */
    orderBy?: film_postOrderByWithRelationInput | film_postOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: film_postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned film_posts
    **/
    _count?: true | Film_postCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Film_postAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Film_postSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Film_postMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Film_postMaxAggregateInputType
  }

  export type GetFilm_postAggregateType<T extends Film_postAggregateArgs> = {
        [P in keyof T & keyof AggregateFilm_post]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFilm_post[P]>
      : GetScalarType<T[P], AggregateFilm_post[P]>
  }




  export type film_postGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: film_postWhereInput
    orderBy?: film_postOrderByWithAggregationInput | film_postOrderByWithAggregationInput[]
    by: Film_postScalarFieldEnum[] | Film_postScalarFieldEnum
    having?: film_postScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Film_postCountAggregateInputType | true
    _avg?: Film_postAvgAggregateInputType
    _sum?: Film_postSumAggregateInputType
    _min?: Film_postMinAggregateInputType
    _max?: Film_postMaxAggregateInputType
  }

  export type Film_postGroupByOutputType = {
    post_id: number
    film_id: number
    content: string
    created_at: Date
    updated_at: Date
    _count: Film_postCountAggregateOutputType | null
    _avg: Film_postAvgAggregateOutputType | null
    _sum: Film_postSumAggregateOutputType | null
    _min: Film_postMinAggregateOutputType | null
    _max: Film_postMaxAggregateOutputType | null
  }

  type GetFilm_postGroupByPayload<T extends film_postGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Film_postGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Film_postGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Film_postGroupByOutputType[P]>
            : GetScalarType<T[P], Film_postGroupByOutputType[P]>
        }
      >
    >


  export type film_postSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    film_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    film_comment?: boolean | film_post$film_commentArgs<ExtArgs>
    film?: boolean | film_post$filmArgs<ExtArgs>
    post_reaction?: boolean | film_post$post_reactionArgs<ExtArgs>
    _count?: boolean | Film_postCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["film_post"]>

  export type film_postSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    film_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    film?: boolean | film_post$filmArgs<ExtArgs>
  }, ExtArgs["result"]["film_post"]>

  export type film_postSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    film_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
    film?: boolean | film_post$filmArgs<ExtArgs>
  }, ExtArgs["result"]["film_post"]>

  export type film_postSelectScalar = {
    post_id?: boolean
    film_id?: boolean
    content?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type film_postOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"post_id" | "film_id" | "content" | "created_at" | "updated_at", ExtArgs["result"]["film_post"]>
  export type film_postInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_comment?: boolean | film_post$film_commentArgs<ExtArgs>
    film?: boolean | film_post$filmArgs<ExtArgs>
    post_reaction?: boolean | film_post$post_reactionArgs<ExtArgs>
    _count?: boolean | Film_postCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type film_postIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film?: boolean | film_post$filmArgs<ExtArgs>
  }
  export type film_postIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film?: boolean | film_post$filmArgs<ExtArgs>
  }

  export type $film_postPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "film_post"
    objects: {
      film_comment: Prisma.$film_commentPayload<ExtArgs>[]
      film: Prisma.$filmPayload<ExtArgs> | null
      post_reaction: Prisma.$post_reactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      post_id: number
      film_id: number
      content: string
      created_at: Date
      updated_at: Date
    }, ExtArgs["result"]["film_post"]>
    composites: {}
  }

  type film_postGetPayload<S extends boolean | null | undefined | film_postDefaultArgs> = $Result.GetResult<Prisma.$film_postPayload, S>

  type film_postCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<film_postFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Film_postCountAggregateInputType | true
    }

  export interface film_postDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['film_post'], meta: { name: 'film_post' } }
    /**
     * Find zero or one Film_post that matches the filter.
     * @param {film_postFindUniqueArgs} args - Arguments to find a Film_post
     * @example
     * // Get one Film_post
     * const film_post = await prisma.film_post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends film_postFindUniqueArgs>(args: SelectSubset<T, film_postFindUniqueArgs<ExtArgs>>): Prisma__film_postClient<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Film_post that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {film_postFindUniqueOrThrowArgs} args - Arguments to find a Film_post
     * @example
     * // Get one Film_post
     * const film_post = await prisma.film_post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends film_postFindUniqueOrThrowArgs>(args: SelectSubset<T, film_postFindUniqueOrThrowArgs<ExtArgs>>): Prisma__film_postClient<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Film_post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_postFindFirstArgs} args - Arguments to find a Film_post
     * @example
     * // Get one Film_post
     * const film_post = await prisma.film_post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends film_postFindFirstArgs>(args?: SelectSubset<T, film_postFindFirstArgs<ExtArgs>>): Prisma__film_postClient<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Film_post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_postFindFirstOrThrowArgs} args - Arguments to find a Film_post
     * @example
     * // Get one Film_post
     * const film_post = await prisma.film_post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends film_postFindFirstOrThrowArgs>(args?: SelectSubset<T, film_postFindFirstOrThrowArgs<ExtArgs>>): Prisma__film_postClient<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Film_posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_postFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Film_posts
     * const film_posts = await prisma.film_post.findMany()
     * 
     * // Get first 10 Film_posts
     * const film_posts = await prisma.film_post.findMany({ take: 10 })
     * 
     * // Only select the `post_id`
     * const film_postWithPost_idOnly = await prisma.film_post.findMany({ select: { post_id: true } })
     * 
     */
    findMany<T extends film_postFindManyArgs>(args?: SelectSubset<T, film_postFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Film_post.
     * @param {film_postCreateArgs} args - Arguments to create a Film_post.
     * @example
     * // Create one Film_post
     * const Film_post = await prisma.film_post.create({
     *   data: {
     *     // ... data to create a Film_post
     *   }
     * })
     * 
     */
    create<T extends film_postCreateArgs>(args: SelectSubset<T, film_postCreateArgs<ExtArgs>>): Prisma__film_postClient<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Film_posts.
     * @param {film_postCreateManyArgs} args - Arguments to create many Film_posts.
     * @example
     * // Create many Film_posts
     * const film_post = await prisma.film_post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends film_postCreateManyArgs>(args?: SelectSubset<T, film_postCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Film_posts and returns the data saved in the database.
     * @param {film_postCreateManyAndReturnArgs} args - Arguments to create many Film_posts.
     * @example
     * // Create many Film_posts
     * const film_post = await prisma.film_post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Film_posts and only return the `post_id`
     * const film_postWithPost_idOnly = await prisma.film_post.createManyAndReturn({
     *   select: { post_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends film_postCreateManyAndReturnArgs>(args?: SelectSubset<T, film_postCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Film_post.
     * @param {film_postDeleteArgs} args - Arguments to delete one Film_post.
     * @example
     * // Delete one Film_post
     * const Film_post = await prisma.film_post.delete({
     *   where: {
     *     // ... filter to delete one Film_post
     *   }
     * })
     * 
     */
    delete<T extends film_postDeleteArgs>(args: SelectSubset<T, film_postDeleteArgs<ExtArgs>>): Prisma__film_postClient<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Film_post.
     * @param {film_postUpdateArgs} args - Arguments to update one Film_post.
     * @example
     * // Update one Film_post
     * const film_post = await prisma.film_post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends film_postUpdateArgs>(args: SelectSubset<T, film_postUpdateArgs<ExtArgs>>): Prisma__film_postClient<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Film_posts.
     * @param {film_postDeleteManyArgs} args - Arguments to filter Film_posts to delete.
     * @example
     * // Delete a few Film_posts
     * const { count } = await prisma.film_post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends film_postDeleteManyArgs>(args?: SelectSubset<T, film_postDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Film_posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_postUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Film_posts
     * const film_post = await prisma.film_post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends film_postUpdateManyArgs>(args: SelectSubset<T, film_postUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Film_posts and returns the data updated in the database.
     * @param {film_postUpdateManyAndReturnArgs} args - Arguments to update many Film_posts.
     * @example
     * // Update many Film_posts
     * const film_post = await prisma.film_post.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Film_posts and only return the `post_id`
     * const film_postWithPost_idOnly = await prisma.film_post.updateManyAndReturn({
     *   select: { post_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends film_postUpdateManyAndReturnArgs>(args: SelectSubset<T, film_postUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Film_post.
     * @param {film_postUpsertArgs} args - Arguments to update or create a Film_post.
     * @example
     * // Update or create a Film_post
     * const film_post = await prisma.film_post.upsert({
     *   create: {
     *     // ... data to create a Film_post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Film_post we want to update
     *   }
     * })
     */
    upsert<T extends film_postUpsertArgs>(args: SelectSubset<T, film_postUpsertArgs<ExtArgs>>): Prisma__film_postClient<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Film_posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_postCountArgs} args - Arguments to filter Film_posts to count.
     * @example
     * // Count the number of Film_posts
     * const count = await prisma.film_post.count({
     *   where: {
     *     // ... the filter for the Film_posts we want to count
     *   }
     * })
    **/
    count<T extends film_postCountArgs>(
      args?: Subset<T, film_postCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Film_postCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Film_post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Film_postAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Film_postAggregateArgs>(args: Subset<T, Film_postAggregateArgs>): Prisma.PrismaPromise<GetFilm_postAggregateType<T>>

    /**
     * Group by Film_post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {film_postGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends film_postGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: film_postGroupByArgs['orderBy'] }
        : { orderBy?: film_postGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, film_postGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilm_postGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the film_post model
   */
  readonly fields: film_postFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for film_post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__film_postClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    film_comment<T extends film_post$film_commentArgs<ExtArgs> = {}>(args?: Subset<T, film_post$film_commentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    film<T extends film_post$filmArgs<ExtArgs> = {}>(args?: Subset<T, film_post$filmArgs<ExtArgs>>): Prisma__filmClient<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    post_reaction<T extends film_post$post_reactionArgs<ExtArgs> = {}>(args?: Subset<T, film_post$post_reactionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the film_post model
   */
  interface film_postFieldRefs {
    readonly post_id: FieldRef<"film_post", 'Int'>
    readonly film_id: FieldRef<"film_post", 'Int'>
    readonly content: FieldRef<"film_post", 'String'>
    readonly created_at: FieldRef<"film_post", 'DateTime'>
    readonly updated_at: FieldRef<"film_post", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * film_post findUnique
   */
  export type film_postFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postInclude<ExtArgs> | null
    /**
     * Filter, which film_post to fetch.
     */
    where: film_postWhereUniqueInput
  }

  /**
   * film_post findUniqueOrThrow
   */
  export type film_postFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postInclude<ExtArgs> | null
    /**
     * Filter, which film_post to fetch.
     */
    where: film_postWhereUniqueInput
  }

  /**
   * film_post findFirst
   */
  export type film_postFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postInclude<ExtArgs> | null
    /**
     * Filter, which film_post to fetch.
     */
    where?: film_postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_posts to fetch.
     */
    orderBy?: film_postOrderByWithRelationInput | film_postOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for film_posts.
     */
    cursor?: film_postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of film_posts.
     */
    distinct?: Film_postScalarFieldEnum | Film_postScalarFieldEnum[]
  }

  /**
   * film_post findFirstOrThrow
   */
  export type film_postFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postInclude<ExtArgs> | null
    /**
     * Filter, which film_post to fetch.
     */
    where?: film_postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_posts to fetch.
     */
    orderBy?: film_postOrderByWithRelationInput | film_postOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for film_posts.
     */
    cursor?: film_postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of film_posts.
     */
    distinct?: Film_postScalarFieldEnum | Film_postScalarFieldEnum[]
  }

  /**
   * film_post findMany
   */
  export type film_postFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postInclude<ExtArgs> | null
    /**
     * Filter, which film_posts to fetch.
     */
    where?: film_postWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of film_posts to fetch.
     */
    orderBy?: film_postOrderByWithRelationInput | film_postOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing film_posts.
     */
    cursor?: film_postWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` film_posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` film_posts.
     */
    skip?: number
    distinct?: Film_postScalarFieldEnum | Film_postScalarFieldEnum[]
  }

  /**
   * film_post create
   */
  export type film_postCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postInclude<ExtArgs> | null
    /**
     * The data needed to create a film_post.
     */
    data: XOR<film_postCreateInput, film_postUncheckedCreateInput>
  }

  /**
   * film_post createMany
   */
  export type film_postCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many film_posts.
     */
    data: film_postCreateManyInput | film_postCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * film_post createManyAndReturn
   */
  export type film_postCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * The data used to create many film_posts.
     */
    data: film_postCreateManyInput | film_postCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * film_post update
   */
  export type film_postUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postInclude<ExtArgs> | null
    /**
     * The data needed to update a film_post.
     */
    data: XOR<film_postUpdateInput, film_postUncheckedUpdateInput>
    /**
     * Choose, which film_post to update.
     */
    where: film_postWhereUniqueInput
  }

  /**
   * film_post updateMany
   */
  export type film_postUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update film_posts.
     */
    data: XOR<film_postUpdateManyMutationInput, film_postUncheckedUpdateManyInput>
    /**
     * Filter which film_posts to update
     */
    where?: film_postWhereInput
    /**
     * Limit how many film_posts to update.
     */
    limit?: number
  }

  /**
   * film_post updateManyAndReturn
   */
  export type film_postUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * The data used to update film_posts.
     */
    data: XOR<film_postUpdateManyMutationInput, film_postUncheckedUpdateManyInput>
    /**
     * Filter which film_posts to update
     */
    where?: film_postWhereInput
    /**
     * Limit how many film_posts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * film_post upsert
   */
  export type film_postUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postInclude<ExtArgs> | null
    /**
     * The filter to search for the film_post to update in case it exists.
     */
    where: film_postWhereUniqueInput
    /**
     * In case the film_post found by the `where` argument doesn't exist, create a new film_post with this data.
     */
    create: XOR<film_postCreateInput, film_postUncheckedCreateInput>
    /**
     * In case the film_post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<film_postUpdateInput, film_postUncheckedUpdateInput>
  }

  /**
   * film_post delete
   */
  export type film_postDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postInclude<ExtArgs> | null
    /**
     * Filter which film_post to delete.
     */
    where: film_postWhereUniqueInput
  }

  /**
   * film_post deleteMany
   */
  export type film_postDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which film_posts to delete
     */
    where?: film_postWhereInput
    /**
     * Limit how many film_posts to delete.
     */
    limit?: number
  }

  /**
   * film_post.film_comment
   */
  export type film_post$film_commentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_comment
     */
    select?: film_commentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_comment
     */
    omit?: film_commentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_commentInclude<ExtArgs> | null
    where?: film_commentWhereInput
    orderBy?: film_commentOrderByWithRelationInput | film_commentOrderByWithRelationInput[]
    cursor?: film_commentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Film_commentScalarFieldEnum | Film_commentScalarFieldEnum[]
  }

  /**
   * film_post.film
   */
  export type film_post$filmArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film
     */
    select?: filmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film
     */
    omit?: filmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: filmInclude<ExtArgs> | null
    where?: filmWhereInput
  }

  /**
   * film_post.post_reaction
   */
  export type film_post$post_reactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionInclude<ExtArgs> | null
    where?: post_reactionWhereInput
    orderBy?: post_reactionOrderByWithRelationInput | post_reactionOrderByWithRelationInput[]
    cursor?: post_reactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Post_reactionScalarFieldEnum | Post_reactionScalarFieldEnum[]
  }

  /**
   * film_post without action
   */
  export type film_postDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film_post
     */
    select?: film_postSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film_post
     */
    omit?: film_postOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: film_postInclude<ExtArgs> | null
  }


  /**
   * Model inventory
   */

  export type AggregateInventory = {
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  export type InventoryAvgAggregateOutputType = {
    inventory_id: number | null
    film_id: number | null
    store_id: number | null
  }

  export type InventorySumAggregateOutputType = {
    inventory_id: number | null
    film_id: number | null
    store_id: number | null
  }

  export type InventoryMinAggregateOutputType = {
    inventory_id: number | null
    film_id: number | null
    store_id: number | null
    last_update: Date | null
  }

  export type InventoryMaxAggregateOutputType = {
    inventory_id: number | null
    film_id: number | null
    store_id: number | null
    last_update: Date | null
  }

  export type InventoryCountAggregateOutputType = {
    inventory_id: number
    film_id: number
    store_id: number
    last_update: number
    _all: number
  }


  export type InventoryAvgAggregateInputType = {
    inventory_id?: true
    film_id?: true
    store_id?: true
  }

  export type InventorySumAggregateInputType = {
    inventory_id?: true
    film_id?: true
    store_id?: true
  }

  export type InventoryMinAggregateInputType = {
    inventory_id?: true
    film_id?: true
    store_id?: true
    last_update?: true
  }

  export type InventoryMaxAggregateInputType = {
    inventory_id?: true
    film_id?: true
    store_id?: true
    last_update?: true
  }

  export type InventoryCountAggregateInputType = {
    inventory_id?: true
    film_id?: true
    store_id?: true
    last_update?: true
    _all?: true
  }

  export type InventoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which inventory to aggregate.
     */
    where?: inventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inventories to fetch.
     */
    orderBy?: inventoryOrderByWithRelationInput | inventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: inventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned inventories
    **/
    _count?: true | InventoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InventoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InventorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InventoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InventoryMaxAggregateInputType
  }

  export type GetInventoryAggregateType<T extends InventoryAggregateArgs> = {
        [P in keyof T & keyof AggregateInventory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInventory[P]>
      : GetScalarType<T[P], AggregateInventory[P]>
  }




  export type inventoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: inventoryWhereInput
    orderBy?: inventoryOrderByWithAggregationInput | inventoryOrderByWithAggregationInput[]
    by: InventoryScalarFieldEnum[] | InventoryScalarFieldEnum
    having?: inventoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InventoryCountAggregateInputType | true
    _avg?: InventoryAvgAggregateInputType
    _sum?: InventorySumAggregateInputType
    _min?: InventoryMinAggregateInputType
    _max?: InventoryMaxAggregateInputType
  }

  export type InventoryGroupByOutputType = {
    inventory_id: number
    film_id: number
    store_id: number
    last_update: Date
    _count: InventoryCountAggregateOutputType | null
    _avg: InventoryAvgAggregateOutputType | null
    _sum: InventorySumAggregateOutputType | null
    _min: InventoryMinAggregateOutputType | null
    _max: InventoryMaxAggregateOutputType | null
  }

  type GetInventoryGroupByPayload<T extends inventoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InventoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InventoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InventoryGroupByOutputType[P]>
            : GetScalarType<T[P], InventoryGroupByOutputType[P]>
        }
      >
    >


  export type inventorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    inventory_id?: boolean
    film_id?: boolean
    store_id?: boolean
    last_update?: boolean
    film?: boolean | filmDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
    rental?: boolean | inventory$rentalArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type inventorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    inventory_id?: boolean
    film_id?: boolean
    store_id?: boolean
    last_update?: boolean
    film?: boolean | filmDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type inventorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    inventory_id?: boolean
    film_id?: boolean
    store_id?: boolean
    last_update?: boolean
    film?: boolean | filmDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inventory"]>

  export type inventorySelectScalar = {
    inventory_id?: boolean
    film_id?: boolean
    store_id?: boolean
    last_update?: boolean
  }

  export type inventoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"inventory_id" | "film_id" | "store_id" | "last_update", ExtArgs["result"]["inventory"]>
  export type inventoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film?: boolean | filmDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
    rental?: boolean | inventory$rentalArgs<ExtArgs>
    _count?: boolean | InventoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type inventoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film?: boolean | filmDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }
  export type inventoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film?: boolean | filmDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }

  export type $inventoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "inventory"
    objects: {
      film: Prisma.$filmPayload<ExtArgs>
      store: Prisma.$storePayload<ExtArgs>
      rental: Prisma.$rentalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      inventory_id: number
      film_id: number
      store_id: number
      last_update: Date
    }, ExtArgs["result"]["inventory"]>
    composites: {}
  }

  type inventoryGetPayload<S extends boolean | null | undefined | inventoryDefaultArgs> = $Result.GetResult<Prisma.$inventoryPayload, S>

  type inventoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<inventoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InventoryCountAggregateInputType | true
    }

  export interface inventoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['inventory'], meta: { name: 'inventory' } }
    /**
     * Find zero or one Inventory that matches the filter.
     * @param {inventoryFindUniqueArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends inventoryFindUniqueArgs>(args: SelectSubset<T, inventoryFindUniqueArgs<ExtArgs>>): Prisma__inventoryClient<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Inventory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {inventoryFindUniqueOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends inventoryFindUniqueOrThrowArgs>(args: SelectSubset<T, inventoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__inventoryClient<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inventory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventoryFindFirstArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends inventoryFindFirstArgs>(args?: SelectSubset<T, inventoryFindFirstArgs<ExtArgs>>): Prisma__inventoryClient<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Inventory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventoryFindFirstOrThrowArgs} args - Arguments to find a Inventory
     * @example
     * // Get one Inventory
     * const inventory = await prisma.inventory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends inventoryFindFirstOrThrowArgs>(args?: SelectSubset<T, inventoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__inventoryClient<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Inventories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Inventories
     * const inventories = await prisma.inventory.findMany()
     * 
     * // Get first 10 Inventories
     * const inventories = await prisma.inventory.findMany({ take: 10 })
     * 
     * // Only select the `inventory_id`
     * const inventoryWithInventory_idOnly = await prisma.inventory.findMany({ select: { inventory_id: true } })
     * 
     */
    findMany<T extends inventoryFindManyArgs>(args?: SelectSubset<T, inventoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Inventory.
     * @param {inventoryCreateArgs} args - Arguments to create a Inventory.
     * @example
     * // Create one Inventory
     * const Inventory = await prisma.inventory.create({
     *   data: {
     *     // ... data to create a Inventory
     *   }
     * })
     * 
     */
    create<T extends inventoryCreateArgs>(args: SelectSubset<T, inventoryCreateArgs<ExtArgs>>): Prisma__inventoryClient<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Inventories.
     * @param {inventoryCreateManyArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends inventoryCreateManyArgs>(args?: SelectSubset<T, inventoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Inventories and returns the data saved in the database.
     * @param {inventoryCreateManyAndReturnArgs} args - Arguments to create many Inventories.
     * @example
     * // Create many Inventories
     * const inventory = await prisma.inventory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Inventories and only return the `inventory_id`
     * const inventoryWithInventory_idOnly = await prisma.inventory.createManyAndReturn({
     *   select: { inventory_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends inventoryCreateManyAndReturnArgs>(args?: SelectSubset<T, inventoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Inventory.
     * @param {inventoryDeleteArgs} args - Arguments to delete one Inventory.
     * @example
     * // Delete one Inventory
     * const Inventory = await prisma.inventory.delete({
     *   where: {
     *     // ... filter to delete one Inventory
     *   }
     * })
     * 
     */
    delete<T extends inventoryDeleteArgs>(args: SelectSubset<T, inventoryDeleteArgs<ExtArgs>>): Prisma__inventoryClient<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Inventory.
     * @param {inventoryUpdateArgs} args - Arguments to update one Inventory.
     * @example
     * // Update one Inventory
     * const inventory = await prisma.inventory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends inventoryUpdateArgs>(args: SelectSubset<T, inventoryUpdateArgs<ExtArgs>>): Prisma__inventoryClient<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Inventories.
     * @param {inventoryDeleteManyArgs} args - Arguments to filter Inventories to delete.
     * @example
     * // Delete a few Inventories
     * const { count } = await prisma.inventory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends inventoryDeleteManyArgs>(args?: SelectSubset<T, inventoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Inventories
     * const inventory = await prisma.inventory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends inventoryUpdateManyArgs>(args: SelectSubset<T, inventoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Inventories and returns the data updated in the database.
     * @param {inventoryUpdateManyAndReturnArgs} args - Arguments to update many Inventories.
     * @example
     * // Update many Inventories
     * const inventory = await prisma.inventory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Inventories and only return the `inventory_id`
     * const inventoryWithInventory_idOnly = await prisma.inventory.updateManyAndReturn({
     *   select: { inventory_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends inventoryUpdateManyAndReturnArgs>(args: SelectSubset<T, inventoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Inventory.
     * @param {inventoryUpsertArgs} args - Arguments to update or create a Inventory.
     * @example
     * // Update or create a Inventory
     * const inventory = await prisma.inventory.upsert({
     *   create: {
     *     // ... data to create a Inventory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Inventory we want to update
     *   }
     * })
     */
    upsert<T extends inventoryUpsertArgs>(args: SelectSubset<T, inventoryUpsertArgs<ExtArgs>>): Prisma__inventoryClient<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Inventories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventoryCountArgs} args - Arguments to filter Inventories to count.
     * @example
     * // Count the number of Inventories
     * const count = await prisma.inventory.count({
     *   where: {
     *     // ... the filter for the Inventories we want to count
     *   }
     * })
    **/
    count<T extends inventoryCountArgs>(
      args?: Subset<T, inventoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InventoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InventoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InventoryAggregateArgs>(args: Subset<T, InventoryAggregateArgs>): Prisma.PrismaPromise<GetInventoryAggregateType<T>>

    /**
     * Group by Inventory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {inventoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends inventoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: inventoryGroupByArgs['orderBy'] }
        : { orderBy?: inventoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, inventoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInventoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the inventory model
   */
  readonly fields: inventoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for inventory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__inventoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    film<T extends filmDefaultArgs<ExtArgs> = {}>(args?: Subset<T, filmDefaultArgs<ExtArgs>>): Prisma__filmClient<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    store<T extends storeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, storeDefaultArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    rental<T extends inventory$rentalArgs<ExtArgs> = {}>(args?: Subset<T, inventory$rentalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the inventory model
   */
  interface inventoryFieldRefs {
    readonly inventory_id: FieldRef<"inventory", 'Int'>
    readonly film_id: FieldRef<"inventory", 'Int'>
    readonly store_id: FieldRef<"inventory", 'Int'>
    readonly last_update: FieldRef<"inventory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * inventory findUnique
   */
  export type inventoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryInclude<ExtArgs> | null
    /**
     * Filter, which inventory to fetch.
     */
    where: inventoryWhereUniqueInput
  }

  /**
   * inventory findUniqueOrThrow
   */
  export type inventoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryInclude<ExtArgs> | null
    /**
     * Filter, which inventory to fetch.
     */
    where: inventoryWhereUniqueInput
  }

  /**
   * inventory findFirst
   */
  export type inventoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryInclude<ExtArgs> | null
    /**
     * Filter, which inventory to fetch.
     */
    where?: inventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inventories to fetch.
     */
    orderBy?: inventoryOrderByWithRelationInput | inventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inventories.
     */
    cursor?: inventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * inventory findFirstOrThrow
   */
  export type inventoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryInclude<ExtArgs> | null
    /**
     * Filter, which inventory to fetch.
     */
    where?: inventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inventories to fetch.
     */
    orderBy?: inventoryOrderByWithRelationInput | inventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for inventories.
     */
    cursor?: inventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inventories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of inventories.
     */
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * inventory findMany
   */
  export type inventoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryInclude<ExtArgs> | null
    /**
     * Filter, which inventories to fetch.
     */
    where?: inventoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of inventories to fetch.
     */
    orderBy?: inventoryOrderByWithRelationInput | inventoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing inventories.
     */
    cursor?: inventoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` inventories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` inventories.
     */
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * inventory create
   */
  export type inventoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryInclude<ExtArgs> | null
    /**
     * The data needed to create a inventory.
     */
    data: XOR<inventoryCreateInput, inventoryUncheckedCreateInput>
  }

  /**
   * inventory createMany
   */
  export type inventoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many inventories.
     */
    data: inventoryCreateManyInput | inventoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * inventory createManyAndReturn
   */
  export type inventoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * The data used to create many inventories.
     */
    data: inventoryCreateManyInput | inventoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * inventory update
   */
  export type inventoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryInclude<ExtArgs> | null
    /**
     * The data needed to update a inventory.
     */
    data: XOR<inventoryUpdateInput, inventoryUncheckedUpdateInput>
    /**
     * Choose, which inventory to update.
     */
    where: inventoryWhereUniqueInput
  }

  /**
   * inventory updateMany
   */
  export type inventoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update inventories.
     */
    data: XOR<inventoryUpdateManyMutationInput, inventoryUncheckedUpdateManyInput>
    /**
     * Filter which inventories to update
     */
    where?: inventoryWhereInput
    /**
     * Limit how many inventories to update.
     */
    limit?: number
  }

  /**
   * inventory updateManyAndReturn
   */
  export type inventoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * The data used to update inventories.
     */
    data: XOR<inventoryUpdateManyMutationInput, inventoryUncheckedUpdateManyInput>
    /**
     * Filter which inventories to update
     */
    where?: inventoryWhereInput
    /**
     * Limit how many inventories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * inventory upsert
   */
  export type inventoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryInclude<ExtArgs> | null
    /**
     * The filter to search for the inventory to update in case it exists.
     */
    where: inventoryWhereUniqueInput
    /**
     * In case the inventory found by the `where` argument doesn't exist, create a new inventory with this data.
     */
    create: XOR<inventoryCreateInput, inventoryUncheckedCreateInput>
    /**
     * In case the inventory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<inventoryUpdateInput, inventoryUncheckedUpdateInput>
  }

  /**
   * inventory delete
   */
  export type inventoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryInclude<ExtArgs> | null
    /**
     * Filter which inventory to delete.
     */
    where: inventoryWhereUniqueInput
  }

  /**
   * inventory deleteMany
   */
  export type inventoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which inventories to delete
     */
    where?: inventoryWhereInput
    /**
     * Limit how many inventories to delete.
     */
    limit?: number
  }

  /**
   * inventory.rental
   */
  export type inventory$rentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
    where?: rentalWhereInput
    orderBy?: rentalOrderByWithRelationInput | rentalOrderByWithRelationInput[]
    cursor?: rentalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * inventory without action
   */
  export type inventoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryInclude<ExtArgs> | null
  }


  /**
   * Model language
   */

  export type AggregateLanguage = {
    _count: LanguageCountAggregateOutputType | null
    _avg: LanguageAvgAggregateOutputType | null
    _sum: LanguageSumAggregateOutputType | null
    _min: LanguageMinAggregateOutputType | null
    _max: LanguageMaxAggregateOutputType | null
  }

  export type LanguageAvgAggregateOutputType = {
    language_id: number | null
  }

  export type LanguageSumAggregateOutputType = {
    language_id: number | null
  }

  export type LanguageMinAggregateOutputType = {
    language_id: number | null
    name: string | null
    last_update: Date | null
  }

  export type LanguageMaxAggregateOutputType = {
    language_id: number | null
    name: string | null
    last_update: Date | null
  }

  export type LanguageCountAggregateOutputType = {
    language_id: number
    name: number
    last_update: number
    _all: number
  }


  export type LanguageAvgAggregateInputType = {
    language_id?: true
  }

  export type LanguageSumAggregateInputType = {
    language_id?: true
  }

  export type LanguageMinAggregateInputType = {
    language_id?: true
    name?: true
    last_update?: true
  }

  export type LanguageMaxAggregateInputType = {
    language_id?: true
    name?: true
    last_update?: true
  }

  export type LanguageCountAggregateInputType = {
    language_id?: true
    name?: true
    last_update?: true
    _all?: true
  }

  export type LanguageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which language to aggregate.
     */
    where?: languageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of languages to fetch.
     */
    orderBy?: languageOrderByWithRelationInput | languageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: languageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned languages
    **/
    _count?: true | LanguageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LanguageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LanguageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LanguageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LanguageMaxAggregateInputType
  }

  export type GetLanguageAggregateType<T extends LanguageAggregateArgs> = {
        [P in keyof T & keyof AggregateLanguage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLanguage[P]>
      : GetScalarType<T[P], AggregateLanguage[P]>
  }




  export type languageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: languageWhereInput
    orderBy?: languageOrderByWithAggregationInput | languageOrderByWithAggregationInput[]
    by: LanguageScalarFieldEnum[] | LanguageScalarFieldEnum
    having?: languageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LanguageCountAggregateInputType | true
    _avg?: LanguageAvgAggregateInputType
    _sum?: LanguageSumAggregateInputType
    _min?: LanguageMinAggregateInputType
    _max?: LanguageMaxAggregateInputType
  }

  export type LanguageGroupByOutputType = {
    language_id: number
    name: string
    last_update: Date
    _count: LanguageCountAggregateOutputType | null
    _avg: LanguageAvgAggregateOutputType | null
    _sum: LanguageSumAggregateOutputType | null
    _min: LanguageMinAggregateOutputType | null
    _max: LanguageMaxAggregateOutputType | null
  }

  type GetLanguageGroupByPayload<T extends languageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LanguageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LanguageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LanguageGroupByOutputType[P]>
            : GetScalarType<T[P], LanguageGroupByOutputType[P]>
        }
      >
    >


  export type languageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    language_id?: boolean
    name?: boolean
    last_update?: boolean
    film_film_language_idTolanguage?: boolean | language$film_film_language_idTolanguageArgs<ExtArgs>
    film_film_original_language_idTolanguage?: boolean | language$film_film_original_language_idTolanguageArgs<ExtArgs>
    _count?: boolean | LanguageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["language"]>

  export type languageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    language_id?: boolean
    name?: boolean
    last_update?: boolean
  }, ExtArgs["result"]["language"]>

  export type languageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    language_id?: boolean
    name?: boolean
    last_update?: boolean
  }, ExtArgs["result"]["language"]>

  export type languageSelectScalar = {
    language_id?: boolean
    name?: boolean
    last_update?: boolean
  }

  export type languageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"language_id" | "name" | "last_update", ExtArgs["result"]["language"]>
  export type languageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_film_language_idTolanguage?: boolean | language$film_film_language_idTolanguageArgs<ExtArgs>
    film_film_original_language_idTolanguage?: boolean | language$film_film_original_language_idTolanguageArgs<ExtArgs>
    _count?: boolean | LanguageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type languageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type languageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $languagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "language"
    objects: {
      film_film_language_idTolanguage: Prisma.$filmPayload<ExtArgs>[]
      film_film_original_language_idTolanguage: Prisma.$filmPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      language_id: number
      name: string
      last_update: Date
    }, ExtArgs["result"]["language"]>
    composites: {}
  }

  type languageGetPayload<S extends boolean | null | undefined | languageDefaultArgs> = $Result.GetResult<Prisma.$languagePayload, S>

  type languageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<languageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LanguageCountAggregateInputType | true
    }

  export interface languageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['language'], meta: { name: 'language' } }
    /**
     * Find zero or one Language that matches the filter.
     * @param {languageFindUniqueArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends languageFindUniqueArgs>(args: SelectSubset<T, languageFindUniqueArgs<ExtArgs>>): Prisma__languageClient<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Language that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {languageFindUniqueOrThrowArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends languageFindUniqueOrThrowArgs>(args: SelectSubset<T, languageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__languageClient<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Language that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {languageFindFirstArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends languageFindFirstArgs>(args?: SelectSubset<T, languageFindFirstArgs<ExtArgs>>): Prisma__languageClient<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Language that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {languageFindFirstOrThrowArgs} args - Arguments to find a Language
     * @example
     * // Get one Language
     * const language = await prisma.language.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends languageFindFirstOrThrowArgs>(args?: SelectSubset<T, languageFindFirstOrThrowArgs<ExtArgs>>): Prisma__languageClient<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Languages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {languageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Languages
     * const languages = await prisma.language.findMany()
     * 
     * // Get first 10 Languages
     * const languages = await prisma.language.findMany({ take: 10 })
     * 
     * // Only select the `language_id`
     * const languageWithLanguage_idOnly = await prisma.language.findMany({ select: { language_id: true } })
     * 
     */
    findMany<T extends languageFindManyArgs>(args?: SelectSubset<T, languageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Language.
     * @param {languageCreateArgs} args - Arguments to create a Language.
     * @example
     * // Create one Language
     * const Language = await prisma.language.create({
     *   data: {
     *     // ... data to create a Language
     *   }
     * })
     * 
     */
    create<T extends languageCreateArgs>(args: SelectSubset<T, languageCreateArgs<ExtArgs>>): Prisma__languageClient<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Languages.
     * @param {languageCreateManyArgs} args - Arguments to create many Languages.
     * @example
     * // Create many Languages
     * const language = await prisma.language.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends languageCreateManyArgs>(args?: SelectSubset<T, languageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Languages and returns the data saved in the database.
     * @param {languageCreateManyAndReturnArgs} args - Arguments to create many Languages.
     * @example
     * // Create many Languages
     * const language = await prisma.language.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Languages and only return the `language_id`
     * const languageWithLanguage_idOnly = await prisma.language.createManyAndReturn({
     *   select: { language_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends languageCreateManyAndReturnArgs>(args?: SelectSubset<T, languageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Language.
     * @param {languageDeleteArgs} args - Arguments to delete one Language.
     * @example
     * // Delete one Language
     * const Language = await prisma.language.delete({
     *   where: {
     *     // ... filter to delete one Language
     *   }
     * })
     * 
     */
    delete<T extends languageDeleteArgs>(args: SelectSubset<T, languageDeleteArgs<ExtArgs>>): Prisma__languageClient<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Language.
     * @param {languageUpdateArgs} args - Arguments to update one Language.
     * @example
     * // Update one Language
     * const language = await prisma.language.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends languageUpdateArgs>(args: SelectSubset<T, languageUpdateArgs<ExtArgs>>): Prisma__languageClient<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Languages.
     * @param {languageDeleteManyArgs} args - Arguments to filter Languages to delete.
     * @example
     * // Delete a few Languages
     * const { count } = await prisma.language.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends languageDeleteManyArgs>(args?: SelectSubset<T, languageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {languageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Languages
     * const language = await prisma.language.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends languageUpdateManyArgs>(args: SelectSubset<T, languageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Languages and returns the data updated in the database.
     * @param {languageUpdateManyAndReturnArgs} args - Arguments to update many Languages.
     * @example
     * // Update many Languages
     * const language = await prisma.language.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Languages and only return the `language_id`
     * const languageWithLanguage_idOnly = await prisma.language.updateManyAndReturn({
     *   select: { language_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends languageUpdateManyAndReturnArgs>(args: SelectSubset<T, languageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Language.
     * @param {languageUpsertArgs} args - Arguments to update or create a Language.
     * @example
     * // Update or create a Language
     * const language = await prisma.language.upsert({
     *   create: {
     *     // ... data to create a Language
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Language we want to update
     *   }
     * })
     */
    upsert<T extends languageUpsertArgs>(args: SelectSubset<T, languageUpsertArgs<ExtArgs>>): Prisma__languageClient<$Result.GetResult<Prisma.$languagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Languages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {languageCountArgs} args - Arguments to filter Languages to count.
     * @example
     * // Count the number of Languages
     * const count = await prisma.language.count({
     *   where: {
     *     // ... the filter for the Languages we want to count
     *   }
     * })
    **/
    count<T extends languageCountArgs>(
      args?: Subset<T, languageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LanguageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Language.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LanguageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LanguageAggregateArgs>(args: Subset<T, LanguageAggregateArgs>): Prisma.PrismaPromise<GetLanguageAggregateType<T>>

    /**
     * Group by Language.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {languageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends languageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: languageGroupByArgs['orderBy'] }
        : { orderBy?: languageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, languageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLanguageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the language model
   */
  readonly fields: languageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for language.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__languageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    film_film_language_idTolanguage<T extends language$film_film_language_idTolanguageArgs<ExtArgs> = {}>(args?: Subset<T, language$film_film_language_idTolanguageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    film_film_original_language_idTolanguage<T extends language$film_film_original_language_idTolanguageArgs<ExtArgs> = {}>(args?: Subset<T, language$film_film_original_language_idTolanguageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$filmPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the language model
   */
  interface languageFieldRefs {
    readonly language_id: FieldRef<"language", 'Int'>
    readonly name: FieldRef<"language", 'String'>
    readonly last_update: FieldRef<"language", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * language findUnique
   */
  export type languageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: languageInclude<ExtArgs> | null
    /**
     * Filter, which language to fetch.
     */
    where: languageWhereUniqueInput
  }

  /**
   * language findUniqueOrThrow
   */
  export type languageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: languageInclude<ExtArgs> | null
    /**
     * Filter, which language to fetch.
     */
    where: languageWhereUniqueInput
  }

  /**
   * language findFirst
   */
  export type languageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: languageInclude<ExtArgs> | null
    /**
     * Filter, which language to fetch.
     */
    where?: languageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of languages to fetch.
     */
    orderBy?: languageOrderByWithRelationInput | languageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for languages.
     */
    cursor?: languageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of languages.
     */
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * language findFirstOrThrow
   */
  export type languageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: languageInclude<ExtArgs> | null
    /**
     * Filter, which language to fetch.
     */
    where?: languageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of languages to fetch.
     */
    orderBy?: languageOrderByWithRelationInput | languageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for languages.
     */
    cursor?: languageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` languages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of languages.
     */
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * language findMany
   */
  export type languageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: languageInclude<ExtArgs> | null
    /**
     * Filter, which languages to fetch.
     */
    where?: languageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of languages to fetch.
     */
    orderBy?: languageOrderByWithRelationInput | languageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing languages.
     */
    cursor?: languageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` languages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` languages.
     */
    skip?: number
    distinct?: LanguageScalarFieldEnum | LanguageScalarFieldEnum[]
  }

  /**
   * language create
   */
  export type languageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: languageInclude<ExtArgs> | null
    /**
     * The data needed to create a language.
     */
    data: XOR<languageCreateInput, languageUncheckedCreateInput>
  }

  /**
   * language createMany
   */
  export type languageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many languages.
     */
    data: languageCreateManyInput | languageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * language createManyAndReturn
   */
  export type languageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * The data used to create many languages.
     */
    data: languageCreateManyInput | languageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * language update
   */
  export type languageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: languageInclude<ExtArgs> | null
    /**
     * The data needed to update a language.
     */
    data: XOR<languageUpdateInput, languageUncheckedUpdateInput>
    /**
     * Choose, which language to update.
     */
    where: languageWhereUniqueInput
  }

  /**
   * language updateMany
   */
  export type languageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update languages.
     */
    data: XOR<languageUpdateManyMutationInput, languageUncheckedUpdateManyInput>
    /**
     * Filter which languages to update
     */
    where?: languageWhereInput
    /**
     * Limit how many languages to update.
     */
    limit?: number
  }

  /**
   * language updateManyAndReturn
   */
  export type languageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * The data used to update languages.
     */
    data: XOR<languageUpdateManyMutationInput, languageUncheckedUpdateManyInput>
    /**
     * Filter which languages to update
     */
    where?: languageWhereInput
    /**
     * Limit how many languages to update.
     */
    limit?: number
  }

  /**
   * language upsert
   */
  export type languageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: languageInclude<ExtArgs> | null
    /**
     * The filter to search for the language to update in case it exists.
     */
    where: languageWhereUniqueInput
    /**
     * In case the language found by the `where` argument doesn't exist, create a new language with this data.
     */
    create: XOR<languageCreateInput, languageUncheckedCreateInput>
    /**
     * In case the language was found with the provided `where` argument, update it with this data.
     */
    update: XOR<languageUpdateInput, languageUncheckedUpdateInput>
  }

  /**
   * language delete
   */
  export type languageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: languageInclude<ExtArgs> | null
    /**
     * Filter which language to delete.
     */
    where: languageWhereUniqueInput
  }

  /**
   * language deleteMany
   */
  export type languageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which languages to delete
     */
    where?: languageWhereInput
    /**
     * Limit how many languages to delete.
     */
    limit?: number
  }

  /**
   * language.film_film_language_idTolanguage
   */
  export type language$film_film_language_idTolanguageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film
     */
    select?: filmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film
     */
    omit?: filmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: filmInclude<ExtArgs> | null
    where?: filmWhereInput
    orderBy?: filmOrderByWithRelationInput | filmOrderByWithRelationInput[]
    cursor?: filmWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FilmScalarFieldEnum | FilmScalarFieldEnum[]
  }

  /**
   * language.film_film_original_language_idTolanguage
   */
  export type language$film_film_original_language_idTolanguageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the film
     */
    select?: filmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the film
     */
    omit?: filmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: filmInclude<ExtArgs> | null
    where?: filmWhereInput
    orderBy?: filmOrderByWithRelationInput | filmOrderByWithRelationInput[]
    cursor?: filmWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FilmScalarFieldEnum | FilmScalarFieldEnum[]
  }

  /**
   * language without action
   */
  export type languageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the language
     */
    select?: languageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the language
     */
    omit?: languageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: languageInclude<ExtArgs> | null
  }


  /**
   * Model mention
   */

  export type AggregateMention = {
    _count: MentionCountAggregateOutputType | null
    _avg: MentionAvgAggregateOutputType | null
    _sum: MentionSumAggregateOutputType | null
    _min: MentionMinAggregateOutputType | null
    _max: MentionMaxAggregateOutputType | null
  }

  export type MentionAvgAggregateOutputType = {
    mention_id: number | null
    comment_id: number | null
    mentioned_customer_id: number | null
  }

  export type MentionSumAggregateOutputType = {
    mention_id: number | null
    comment_id: number | null
    mentioned_customer_id: number | null
  }

  export type MentionMinAggregateOutputType = {
    mention_id: number | null
    created_at: Date | null
    comment_id: number | null
    mentioned_customer_id: number | null
  }

  export type MentionMaxAggregateOutputType = {
    mention_id: number | null
    created_at: Date | null
    comment_id: number | null
    mentioned_customer_id: number | null
  }

  export type MentionCountAggregateOutputType = {
    mention_id: number
    created_at: number
    comment_id: number
    mentioned_customer_id: number
    _all: number
  }


  export type MentionAvgAggregateInputType = {
    mention_id?: true
    comment_id?: true
    mentioned_customer_id?: true
  }

  export type MentionSumAggregateInputType = {
    mention_id?: true
    comment_id?: true
    mentioned_customer_id?: true
  }

  export type MentionMinAggregateInputType = {
    mention_id?: true
    created_at?: true
    comment_id?: true
    mentioned_customer_id?: true
  }

  export type MentionMaxAggregateInputType = {
    mention_id?: true
    created_at?: true
    comment_id?: true
    mentioned_customer_id?: true
  }

  export type MentionCountAggregateInputType = {
    mention_id?: true
    created_at?: true
    comment_id?: true
    mentioned_customer_id?: true
    _all?: true
  }

  export type MentionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mention to aggregate.
     */
    where?: mentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mentions to fetch.
     */
    orderBy?: mentionOrderByWithRelationInput | mentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: mentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mentions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned mentions
    **/
    _count?: true | MentionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MentionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MentionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MentionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MentionMaxAggregateInputType
  }

  export type GetMentionAggregateType<T extends MentionAggregateArgs> = {
        [P in keyof T & keyof AggregateMention]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMention[P]>
      : GetScalarType<T[P], AggregateMention[P]>
  }




  export type mentionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: mentionWhereInput
    orderBy?: mentionOrderByWithAggregationInput | mentionOrderByWithAggregationInput[]
    by: MentionScalarFieldEnum[] | MentionScalarFieldEnum
    having?: mentionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MentionCountAggregateInputType | true
    _avg?: MentionAvgAggregateInputType
    _sum?: MentionSumAggregateInputType
    _min?: MentionMinAggregateInputType
    _max?: MentionMaxAggregateInputType
  }

  export type MentionGroupByOutputType = {
    mention_id: number
    created_at: Date
    comment_id: number
    mentioned_customer_id: number
    _count: MentionCountAggregateOutputType | null
    _avg: MentionAvgAggregateOutputType | null
    _sum: MentionSumAggregateOutputType | null
    _min: MentionMinAggregateOutputType | null
    _max: MentionMaxAggregateOutputType | null
  }

  type GetMentionGroupByPayload<T extends mentionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MentionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MentionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MentionGroupByOutputType[P]>
            : GetScalarType<T[P], MentionGroupByOutputType[P]>
        }
      >
    >


  export type mentionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    mention_id?: boolean
    created_at?: boolean
    comment_id?: boolean
    mentioned_customer_id?: boolean
    film_comment?: boolean | film_commentDefaultArgs<ExtArgs>
    customer?: boolean | customerDefaultArgs<ExtArgs>
    notification?: boolean | mention$notificationArgs<ExtArgs>
  }, ExtArgs["result"]["mention"]>

  export type mentionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    mention_id?: boolean
    created_at?: boolean
    comment_id?: boolean
    mentioned_customer_id?: boolean
    film_comment?: boolean | film_commentDefaultArgs<ExtArgs>
    customer?: boolean | customerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mention"]>

  export type mentionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    mention_id?: boolean
    created_at?: boolean
    comment_id?: boolean
    mentioned_customer_id?: boolean
    film_comment?: boolean | film_commentDefaultArgs<ExtArgs>
    customer?: boolean | customerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mention"]>

  export type mentionSelectScalar = {
    mention_id?: boolean
    created_at?: boolean
    comment_id?: boolean
    mentioned_customer_id?: boolean
  }

  export type mentionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"mention_id" | "created_at" | "comment_id" | "mentioned_customer_id", ExtArgs["result"]["mention"]>
  export type mentionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_comment?: boolean | film_commentDefaultArgs<ExtArgs>
    customer?: boolean | customerDefaultArgs<ExtArgs>
    notification?: boolean | mention$notificationArgs<ExtArgs>
  }
  export type mentionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_comment?: boolean | film_commentDefaultArgs<ExtArgs>
    customer?: boolean | customerDefaultArgs<ExtArgs>
  }
  export type mentionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film_comment?: boolean | film_commentDefaultArgs<ExtArgs>
    customer?: boolean | customerDefaultArgs<ExtArgs>
  }

  export type $mentionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "mention"
    objects: {
      film_comment: Prisma.$film_commentPayload<ExtArgs>
      customer: Prisma.$customerPayload<ExtArgs>
      notification: Prisma.$notificationPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      mention_id: number
      created_at: Date
      comment_id: number
      mentioned_customer_id: number
    }, ExtArgs["result"]["mention"]>
    composites: {}
  }

  type mentionGetPayload<S extends boolean | null | undefined | mentionDefaultArgs> = $Result.GetResult<Prisma.$mentionPayload, S>

  type mentionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<mentionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MentionCountAggregateInputType | true
    }

  export interface mentionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['mention'], meta: { name: 'mention' } }
    /**
     * Find zero or one Mention that matches the filter.
     * @param {mentionFindUniqueArgs} args - Arguments to find a Mention
     * @example
     * // Get one Mention
     * const mention = await prisma.mention.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends mentionFindUniqueArgs>(args: SelectSubset<T, mentionFindUniqueArgs<ExtArgs>>): Prisma__mentionClient<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Mention that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {mentionFindUniqueOrThrowArgs} args - Arguments to find a Mention
     * @example
     * // Get one Mention
     * const mention = await prisma.mention.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends mentionFindUniqueOrThrowArgs>(args: SelectSubset<T, mentionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__mentionClient<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mention that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mentionFindFirstArgs} args - Arguments to find a Mention
     * @example
     * // Get one Mention
     * const mention = await prisma.mention.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends mentionFindFirstArgs>(args?: SelectSubset<T, mentionFindFirstArgs<ExtArgs>>): Prisma__mentionClient<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Mention that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mentionFindFirstOrThrowArgs} args - Arguments to find a Mention
     * @example
     * // Get one Mention
     * const mention = await prisma.mention.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends mentionFindFirstOrThrowArgs>(args?: SelectSubset<T, mentionFindFirstOrThrowArgs<ExtArgs>>): Prisma__mentionClient<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Mentions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mentionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mentions
     * const mentions = await prisma.mention.findMany()
     * 
     * // Get first 10 Mentions
     * const mentions = await prisma.mention.findMany({ take: 10 })
     * 
     * // Only select the `mention_id`
     * const mentionWithMention_idOnly = await prisma.mention.findMany({ select: { mention_id: true } })
     * 
     */
    findMany<T extends mentionFindManyArgs>(args?: SelectSubset<T, mentionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Mention.
     * @param {mentionCreateArgs} args - Arguments to create a Mention.
     * @example
     * // Create one Mention
     * const Mention = await prisma.mention.create({
     *   data: {
     *     // ... data to create a Mention
     *   }
     * })
     * 
     */
    create<T extends mentionCreateArgs>(args: SelectSubset<T, mentionCreateArgs<ExtArgs>>): Prisma__mentionClient<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Mentions.
     * @param {mentionCreateManyArgs} args - Arguments to create many Mentions.
     * @example
     * // Create many Mentions
     * const mention = await prisma.mention.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends mentionCreateManyArgs>(args?: SelectSubset<T, mentionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Mentions and returns the data saved in the database.
     * @param {mentionCreateManyAndReturnArgs} args - Arguments to create many Mentions.
     * @example
     * // Create many Mentions
     * const mention = await prisma.mention.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Mentions and only return the `mention_id`
     * const mentionWithMention_idOnly = await prisma.mention.createManyAndReturn({
     *   select: { mention_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends mentionCreateManyAndReturnArgs>(args?: SelectSubset<T, mentionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Mention.
     * @param {mentionDeleteArgs} args - Arguments to delete one Mention.
     * @example
     * // Delete one Mention
     * const Mention = await prisma.mention.delete({
     *   where: {
     *     // ... filter to delete one Mention
     *   }
     * })
     * 
     */
    delete<T extends mentionDeleteArgs>(args: SelectSubset<T, mentionDeleteArgs<ExtArgs>>): Prisma__mentionClient<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Mention.
     * @param {mentionUpdateArgs} args - Arguments to update one Mention.
     * @example
     * // Update one Mention
     * const mention = await prisma.mention.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends mentionUpdateArgs>(args: SelectSubset<T, mentionUpdateArgs<ExtArgs>>): Prisma__mentionClient<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Mentions.
     * @param {mentionDeleteManyArgs} args - Arguments to filter Mentions to delete.
     * @example
     * // Delete a few Mentions
     * const { count } = await prisma.mention.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends mentionDeleteManyArgs>(args?: SelectSubset<T, mentionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mentions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mentionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mentions
     * const mention = await prisma.mention.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends mentionUpdateManyArgs>(args: SelectSubset<T, mentionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mentions and returns the data updated in the database.
     * @param {mentionUpdateManyAndReturnArgs} args - Arguments to update many Mentions.
     * @example
     * // Update many Mentions
     * const mention = await prisma.mention.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Mentions and only return the `mention_id`
     * const mentionWithMention_idOnly = await prisma.mention.updateManyAndReturn({
     *   select: { mention_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends mentionUpdateManyAndReturnArgs>(args: SelectSubset<T, mentionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Mention.
     * @param {mentionUpsertArgs} args - Arguments to update or create a Mention.
     * @example
     * // Update or create a Mention
     * const mention = await prisma.mention.upsert({
     *   create: {
     *     // ... data to create a Mention
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mention we want to update
     *   }
     * })
     */
    upsert<T extends mentionUpsertArgs>(args: SelectSubset<T, mentionUpsertArgs<ExtArgs>>): Prisma__mentionClient<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Mentions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mentionCountArgs} args - Arguments to filter Mentions to count.
     * @example
     * // Count the number of Mentions
     * const count = await prisma.mention.count({
     *   where: {
     *     // ... the filter for the Mentions we want to count
     *   }
     * })
    **/
    count<T extends mentionCountArgs>(
      args?: Subset<T, mentionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MentionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mention.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MentionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MentionAggregateArgs>(args: Subset<T, MentionAggregateArgs>): Prisma.PrismaPromise<GetMentionAggregateType<T>>

    /**
     * Group by Mention.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {mentionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends mentionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: mentionGroupByArgs['orderBy'] }
        : { orderBy?: mentionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, mentionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMentionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the mention model
   */
  readonly fields: mentionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for mention.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__mentionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    film_comment<T extends film_commentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, film_commentDefaultArgs<ExtArgs>>): Prisma__film_commentClient<$Result.GetResult<Prisma.$film_commentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    customer<T extends customerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, customerDefaultArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    notification<T extends mention$notificationArgs<ExtArgs> = {}>(args?: Subset<T, mention$notificationArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the mention model
   */
  interface mentionFieldRefs {
    readonly mention_id: FieldRef<"mention", 'Int'>
    readonly created_at: FieldRef<"mention", 'DateTime'>
    readonly comment_id: FieldRef<"mention", 'Int'>
    readonly mentioned_customer_id: FieldRef<"mention", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * mention findUnique
   */
  export type mentionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionInclude<ExtArgs> | null
    /**
     * Filter, which mention to fetch.
     */
    where: mentionWhereUniqueInput
  }

  /**
   * mention findUniqueOrThrow
   */
  export type mentionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionInclude<ExtArgs> | null
    /**
     * Filter, which mention to fetch.
     */
    where: mentionWhereUniqueInput
  }

  /**
   * mention findFirst
   */
  export type mentionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionInclude<ExtArgs> | null
    /**
     * Filter, which mention to fetch.
     */
    where?: mentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mentions to fetch.
     */
    orderBy?: mentionOrderByWithRelationInput | mentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mentions.
     */
    cursor?: mentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mentions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mentions.
     */
    distinct?: MentionScalarFieldEnum | MentionScalarFieldEnum[]
  }

  /**
   * mention findFirstOrThrow
   */
  export type mentionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionInclude<ExtArgs> | null
    /**
     * Filter, which mention to fetch.
     */
    where?: mentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mentions to fetch.
     */
    orderBy?: mentionOrderByWithRelationInput | mentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for mentions.
     */
    cursor?: mentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mentions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of mentions.
     */
    distinct?: MentionScalarFieldEnum | MentionScalarFieldEnum[]
  }

  /**
   * mention findMany
   */
  export type mentionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionInclude<ExtArgs> | null
    /**
     * Filter, which mentions to fetch.
     */
    where?: mentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of mentions to fetch.
     */
    orderBy?: mentionOrderByWithRelationInput | mentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing mentions.
     */
    cursor?: mentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` mentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` mentions.
     */
    skip?: number
    distinct?: MentionScalarFieldEnum | MentionScalarFieldEnum[]
  }

  /**
   * mention create
   */
  export type mentionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionInclude<ExtArgs> | null
    /**
     * The data needed to create a mention.
     */
    data: XOR<mentionCreateInput, mentionUncheckedCreateInput>
  }

  /**
   * mention createMany
   */
  export type mentionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many mentions.
     */
    data: mentionCreateManyInput | mentionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * mention createManyAndReturn
   */
  export type mentionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * The data used to create many mentions.
     */
    data: mentionCreateManyInput | mentionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * mention update
   */
  export type mentionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionInclude<ExtArgs> | null
    /**
     * The data needed to update a mention.
     */
    data: XOR<mentionUpdateInput, mentionUncheckedUpdateInput>
    /**
     * Choose, which mention to update.
     */
    where: mentionWhereUniqueInput
  }

  /**
   * mention updateMany
   */
  export type mentionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update mentions.
     */
    data: XOR<mentionUpdateManyMutationInput, mentionUncheckedUpdateManyInput>
    /**
     * Filter which mentions to update
     */
    where?: mentionWhereInput
    /**
     * Limit how many mentions to update.
     */
    limit?: number
  }

  /**
   * mention updateManyAndReturn
   */
  export type mentionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * The data used to update mentions.
     */
    data: XOR<mentionUpdateManyMutationInput, mentionUncheckedUpdateManyInput>
    /**
     * Filter which mentions to update
     */
    where?: mentionWhereInput
    /**
     * Limit how many mentions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * mention upsert
   */
  export type mentionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionInclude<ExtArgs> | null
    /**
     * The filter to search for the mention to update in case it exists.
     */
    where: mentionWhereUniqueInput
    /**
     * In case the mention found by the `where` argument doesn't exist, create a new mention with this data.
     */
    create: XOR<mentionCreateInput, mentionUncheckedCreateInput>
    /**
     * In case the mention was found with the provided `where` argument, update it with this data.
     */
    update: XOR<mentionUpdateInput, mentionUncheckedUpdateInput>
  }

  /**
   * mention delete
   */
  export type mentionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionInclude<ExtArgs> | null
    /**
     * Filter which mention to delete.
     */
    where: mentionWhereUniqueInput
  }

  /**
   * mention deleteMany
   */
  export type mentionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which mentions to delete
     */
    where?: mentionWhereInput
    /**
     * Limit how many mentions to delete.
     */
    limit?: number
  }

  /**
   * mention.notification
   */
  export type mention$notificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    where?: notificationWhereInput
  }

  /**
   * mention without action
   */
  export type mentionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the mention
     */
    select?: mentionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the mention
     */
    omit?: mentionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: mentionInclude<ExtArgs> | null
  }


  /**
   * Model notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    notification_id: number | null
    mentioner_id: number | null
    mention_id: number | null
  }

  export type NotificationSumAggregateOutputType = {
    notification_id: number | null
    mentioner_id: number | null
    mention_id: number | null
  }

  export type NotificationMinAggregateOutputType = {
    notification_id: number | null
    mentioner_id: number | null
    mention_id: number | null
    content: string | null
    created_at: Date | null
    is_read: boolean | null
    read_at: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    notification_id: number | null
    mentioner_id: number | null
    mention_id: number | null
    content: string | null
    created_at: Date | null
    is_read: boolean | null
    read_at: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    notification_id: number
    mentioner_id: number
    mention_id: number
    content: number
    created_at: number
    is_read: number
    read_at: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    notification_id?: true
    mentioner_id?: true
    mention_id?: true
  }

  export type NotificationSumAggregateInputType = {
    notification_id?: true
    mentioner_id?: true
    mention_id?: true
  }

  export type NotificationMinAggregateInputType = {
    notification_id?: true
    mentioner_id?: true
    mention_id?: true
    content?: true
    created_at?: true
    is_read?: true
    read_at?: true
  }

  export type NotificationMaxAggregateInputType = {
    notification_id?: true
    mentioner_id?: true
    mention_id?: true
    content?: true
    created_at?: true
    is_read?: true
    read_at?: true
  }

  export type NotificationCountAggregateInputType = {
    notification_id?: true
    mentioner_id?: true
    mention_id?: true
    content?: true
    created_at?: true
    is_read?: true
    read_at?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which notification to aggregate.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type notificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: notificationWhereInput
    orderBy?: notificationOrderByWithAggregationInput | notificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: notificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    notification_id: number
    mentioner_id: number
    mention_id: number
    content: string
    created_at: Date
    is_read: boolean
    read_at: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends notificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type notificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    notification_id?: boolean
    mentioner_id?: boolean
    mention_id?: boolean
    content?: boolean
    created_at?: boolean
    is_read?: boolean
    read_at?: boolean
    mention?: boolean | mentionDefaultArgs<ExtArgs>
    customer?: boolean | customerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type notificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    notification_id?: boolean
    mentioner_id?: boolean
    mention_id?: boolean
    content?: boolean
    created_at?: boolean
    is_read?: boolean
    read_at?: boolean
    mention?: boolean | mentionDefaultArgs<ExtArgs>
    customer?: boolean | customerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type notificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    notification_id?: boolean
    mentioner_id?: boolean
    mention_id?: boolean
    content?: boolean
    created_at?: boolean
    is_read?: boolean
    read_at?: boolean
    mention?: boolean | mentionDefaultArgs<ExtArgs>
    customer?: boolean | customerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type notificationSelectScalar = {
    notification_id?: boolean
    mentioner_id?: boolean
    mention_id?: boolean
    content?: boolean
    created_at?: boolean
    is_read?: boolean
    read_at?: boolean
  }

  export type notificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"notification_id" | "mentioner_id" | "mention_id" | "content" | "created_at" | "is_read" | "read_at", ExtArgs["result"]["notification"]>
  export type notificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mention?: boolean | mentionDefaultArgs<ExtArgs>
    customer?: boolean | customerDefaultArgs<ExtArgs>
  }
  export type notificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mention?: boolean | mentionDefaultArgs<ExtArgs>
    customer?: boolean | customerDefaultArgs<ExtArgs>
  }
  export type notificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    mention?: boolean | mentionDefaultArgs<ExtArgs>
    customer?: boolean | customerDefaultArgs<ExtArgs>
  }

  export type $notificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "notification"
    objects: {
      mention: Prisma.$mentionPayload<ExtArgs>
      customer: Prisma.$customerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      notification_id: number
      mentioner_id: number
      mention_id: number
      content: string
      created_at: Date
      is_read: boolean
      read_at: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type notificationGetPayload<S extends boolean | null | undefined | notificationDefaultArgs> = $Result.GetResult<Prisma.$notificationPayload, S>

  type notificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<notificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface notificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['notification'], meta: { name: 'notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {notificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends notificationFindUniqueArgs>(args: SelectSubset<T, notificationFindUniqueArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {notificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends notificationFindUniqueOrThrowArgs>(args: SelectSubset<T, notificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends notificationFindFirstArgs>(args?: SelectSubset<T, notificationFindFirstArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends notificationFindFirstOrThrowArgs>(args?: SelectSubset<T, notificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `notification_id`
     * const notificationWithNotification_idOnly = await prisma.notification.findMany({ select: { notification_id: true } })
     * 
     */
    findMany<T extends notificationFindManyArgs>(args?: SelectSubset<T, notificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {notificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends notificationCreateArgs>(args: SelectSubset<T, notificationCreateArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {notificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends notificationCreateManyArgs>(args?: SelectSubset<T, notificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {notificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `notification_id`
     * const notificationWithNotification_idOnly = await prisma.notification.createManyAndReturn({
     *   select: { notification_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends notificationCreateManyAndReturnArgs>(args?: SelectSubset<T, notificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {notificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends notificationDeleteArgs>(args: SelectSubset<T, notificationDeleteArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {notificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends notificationUpdateArgs>(args: SelectSubset<T, notificationUpdateArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {notificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends notificationDeleteManyArgs>(args?: SelectSubset<T, notificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends notificationUpdateManyArgs>(args: SelectSubset<T, notificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {notificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `notification_id`
     * const notificationWithNotification_idOnly = await prisma.notification.updateManyAndReturn({
     *   select: { notification_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends notificationUpdateManyAndReturnArgs>(args: SelectSubset<T, notificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {notificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends notificationUpsertArgs>(args: SelectSubset<T, notificationUpsertArgs<ExtArgs>>): Prisma__notificationClient<$Result.GetResult<Prisma.$notificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends notificationCountArgs>(
      args?: Subset<T, notificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {notificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends notificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: notificationGroupByArgs['orderBy'] }
        : { orderBy?: notificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, notificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the notification model
   */
  readonly fields: notificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__notificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    mention<T extends mentionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, mentionDefaultArgs<ExtArgs>>): Prisma__mentionClient<$Result.GetResult<Prisma.$mentionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    customer<T extends customerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, customerDefaultArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the notification model
   */
  interface notificationFieldRefs {
    readonly notification_id: FieldRef<"notification", 'Int'>
    readonly mentioner_id: FieldRef<"notification", 'Int'>
    readonly mention_id: FieldRef<"notification", 'Int'>
    readonly content: FieldRef<"notification", 'String'>
    readonly created_at: FieldRef<"notification", 'DateTime'>
    readonly is_read: FieldRef<"notification", 'Boolean'>
    readonly read_at: FieldRef<"notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * notification findUnique
   */
  export type notificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notification to fetch.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification findUniqueOrThrow
   */
  export type notificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notification to fetch.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification findFirst
   */
  export type notificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notification to fetch.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * notification findFirstOrThrow
   */
  export type notificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notification to fetch.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for notifications.
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * notification findMany
   */
  export type notificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter, which notifications to fetch.
     */
    where?: notificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of notifications to fetch.
     */
    orderBy?: notificationOrderByWithRelationInput | notificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing notifications.
     */
    cursor?: notificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * notification create
   */
  export type notificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * The data needed to create a notification.
     */
    data: XOR<notificationCreateInput, notificationUncheckedCreateInput>
  }

  /**
   * notification createMany
   */
  export type notificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many notifications.
     */
    data: notificationCreateManyInput | notificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * notification createManyAndReturn
   */
  export type notificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * The data used to create many notifications.
     */
    data: notificationCreateManyInput | notificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * notification update
   */
  export type notificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * The data needed to update a notification.
     */
    data: XOR<notificationUpdateInput, notificationUncheckedUpdateInput>
    /**
     * Choose, which notification to update.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification updateMany
   */
  export type notificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update notifications.
     */
    data: XOR<notificationUpdateManyMutationInput, notificationUncheckedUpdateManyInput>
    /**
     * Filter which notifications to update
     */
    where?: notificationWhereInput
    /**
     * Limit how many notifications to update.
     */
    limit?: number
  }

  /**
   * notification updateManyAndReturn
   */
  export type notificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * The data used to update notifications.
     */
    data: XOR<notificationUpdateManyMutationInput, notificationUncheckedUpdateManyInput>
    /**
     * Filter which notifications to update
     */
    where?: notificationWhereInput
    /**
     * Limit how many notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * notification upsert
   */
  export type notificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * The filter to search for the notification to update in case it exists.
     */
    where: notificationWhereUniqueInput
    /**
     * In case the notification found by the `where` argument doesn't exist, create a new notification with this data.
     */
    create: XOR<notificationCreateInput, notificationUncheckedCreateInput>
    /**
     * In case the notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<notificationUpdateInput, notificationUncheckedUpdateInput>
  }

  /**
   * notification delete
   */
  export type notificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
    /**
     * Filter which notification to delete.
     */
    where: notificationWhereUniqueInput
  }

  /**
   * notification deleteMany
   */
  export type notificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which notifications to delete
     */
    where?: notificationWhereInput
    /**
     * Limit how many notifications to delete.
     */
    limit?: number
  }

  /**
   * notification without action
   */
  export type notificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the notification
     */
    select?: notificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the notification
     */
    omit?: notificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: notificationInclude<ExtArgs> | null
  }


  /**
   * Model payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentAvgAggregateOutputType = {
    payment_id: number | null
    customer_id: number | null
    staff_id: number | null
    rental_id: number | null
    amount: Decimal | null
  }

  export type PaymentSumAggregateOutputType = {
    payment_id: number | null
    customer_id: number | null
    staff_id: number | null
    rental_id: number | null
    amount: Decimal | null
  }

  export type PaymentMinAggregateOutputType = {
    payment_id: number | null
    customer_id: number | null
    staff_id: number | null
    rental_id: number | null
    amount: Decimal | null
    payment_date: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    payment_id: number | null
    customer_id: number | null
    staff_id: number | null
    rental_id: number | null
    amount: Decimal | null
    payment_date: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    payment_id: number
    customer_id: number
    staff_id: number
    rental_id: number
    amount: number
    payment_date: number
    _all: number
  }


  export type PaymentAvgAggregateInputType = {
    payment_id?: true
    customer_id?: true
    staff_id?: true
    rental_id?: true
    amount?: true
  }

  export type PaymentSumAggregateInputType = {
    payment_id?: true
    customer_id?: true
    staff_id?: true
    rental_id?: true
    amount?: true
  }

  export type PaymentMinAggregateInputType = {
    payment_id?: true
    customer_id?: true
    staff_id?: true
    rental_id?: true
    amount?: true
    payment_date?: true
  }

  export type PaymentMaxAggregateInputType = {
    payment_id?: true
    customer_id?: true
    staff_id?: true
    rental_id?: true
    amount?: true
    payment_date?: true
  }

  export type PaymentCountAggregateInputType = {
    payment_id?: true
    customer_id?: true
    staff_id?: true
    rental_id?: true
    amount?: true
    payment_date?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payment to aggregate.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type paymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: paymentWhereInput
    orderBy?: paymentOrderByWithAggregationInput | paymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: paymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _avg?: PaymentAvgAggregateInputType
    _sum?: PaymentSumAggregateInputType
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    payment_id: number
    customer_id: number
    staff_id: number
    rental_id: number
    amount: Decimal
    payment_date: Date
    _count: PaymentCountAggregateOutputType | null
    _avg: PaymentAvgAggregateOutputType | null
    _sum: PaymentSumAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends paymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type paymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_id?: boolean
    customer_id?: boolean
    staff_id?: boolean
    rental_id?: boolean
    amount?: boolean
    payment_date?: boolean
  }, ExtArgs["result"]["payment"]>

  export type paymentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_id?: boolean
    customer_id?: boolean
    staff_id?: boolean
    rental_id?: boolean
    amount?: boolean
    payment_date?: boolean
  }, ExtArgs["result"]["payment"]>

  export type paymentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    payment_id?: boolean
    customer_id?: boolean
    staff_id?: boolean
    rental_id?: boolean
    amount?: boolean
    payment_date?: boolean
  }, ExtArgs["result"]["payment"]>

  export type paymentSelectScalar = {
    payment_id?: boolean
    customer_id?: boolean
    staff_id?: boolean
    rental_id?: boolean
    amount?: boolean
    payment_date?: boolean
  }

  export type paymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"payment_id" | "customer_id" | "staff_id" | "rental_id" | "amount" | "payment_date", ExtArgs["result"]["payment"]>

  export type $paymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "payment"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      payment_id: number
      customer_id: number
      staff_id: number
      rental_id: number
      amount: Prisma.Decimal
      payment_date: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type paymentGetPayload<S extends boolean | null | undefined | paymentDefaultArgs> = $Result.GetResult<Prisma.$paymentPayload, S>

  type paymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<paymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface paymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['payment'], meta: { name: 'payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {paymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends paymentFindUniqueArgs>(args: SelectSubset<T, paymentFindUniqueArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {paymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends paymentFindUniqueOrThrowArgs>(args: SelectSubset<T, paymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends paymentFindFirstArgs>(args?: SelectSubset<T, paymentFindFirstArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends paymentFindFirstOrThrowArgs>(args?: SelectSubset<T, paymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `payment_id`
     * const paymentWithPayment_idOnly = await prisma.payment.findMany({ select: { payment_id: true } })
     * 
     */
    findMany<T extends paymentFindManyArgs>(args?: SelectSubset<T, paymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {paymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends paymentCreateArgs>(args: SelectSubset<T, paymentCreateArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {paymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends paymentCreateManyArgs>(args?: SelectSubset<T, paymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Payments and returns the data saved in the database.
     * @param {paymentCreateManyAndReturnArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Payments and only return the `payment_id`
     * const paymentWithPayment_idOnly = await prisma.payment.createManyAndReturn({
     *   select: { payment_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends paymentCreateManyAndReturnArgs>(args?: SelectSubset<T, paymentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Payment.
     * @param {paymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends paymentDeleteArgs>(args: SelectSubset<T, paymentDeleteArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {paymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends paymentUpdateArgs>(args: SelectSubset<T, paymentUpdateArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {paymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends paymentDeleteManyArgs>(args?: SelectSubset<T, paymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends paymentUpdateManyArgs>(args: SelectSubset<T, paymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments and returns the data updated in the database.
     * @param {paymentUpdateManyAndReturnArgs} args - Arguments to update many Payments.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Payments and only return the `payment_id`
     * const paymentWithPayment_idOnly = await prisma.payment.updateManyAndReturn({
     *   select: { payment_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends paymentUpdateManyAndReturnArgs>(args: SelectSubset<T, paymentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Payment.
     * @param {paymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends paymentUpsertArgs>(args: SelectSubset<T, paymentUpsertArgs<ExtArgs>>): Prisma__paymentClient<$Result.GetResult<Prisma.$paymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends paymentCountArgs>(
      args?: Subset<T, paymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {paymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends paymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: paymentGroupByArgs['orderBy'] }
        : { orderBy?: paymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, paymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the payment model
   */
  readonly fields: paymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__paymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the payment model
   */
  interface paymentFieldRefs {
    readonly payment_id: FieldRef<"payment", 'Int'>
    readonly customer_id: FieldRef<"payment", 'Int'>
    readonly staff_id: FieldRef<"payment", 'Int'>
    readonly rental_id: FieldRef<"payment", 'Int'>
    readonly amount: FieldRef<"payment", 'Decimal'>
    readonly payment_date: FieldRef<"payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * payment findUnique
   */
  export type paymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment findUniqueOrThrow
   */
  export type paymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment findFirst
   */
  export type paymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment findFirstOrThrow
   */
  export type paymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Filter, which payment to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment findMany
   */
  export type paymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Filter, which payments to fetch.
     */
    where?: paymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of payments to fetch.
     */
    orderBy?: paymentOrderByWithRelationInput | paymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing payments.
     */
    cursor?: paymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * payment create
   */
  export type paymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * The data needed to create a payment.
     */
    data: XOR<paymentCreateInput, paymentUncheckedCreateInput>
  }

  /**
   * payment createMany
   */
  export type paymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many payments.
     */
    data: paymentCreateManyInput | paymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment createManyAndReturn
   */
  export type paymentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * The data used to create many payments.
     */
    data: paymentCreateManyInput | paymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * payment update
   */
  export type paymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * The data needed to update a payment.
     */
    data: XOR<paymentUpdateInput, paymentUncheckedUpdateInput>
    /**
     * Choose, which payment to update.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment updateMany
   */
  export type paymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update payments.
     */
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyInput>
    /**
     * Filter which payments to update
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to update.
     */
    limit?: number
  }

  /**
   * payment updateManyAndReturn
   */
  export type paymentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * The data used to update payments.
     */
    data: XOR<paymentUpdateManyMutationInput, paymentUncheckedUpdateManyInput>
    /**
     * Filter which payments to update
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to update.
     */
    limit?: number
  }

  /**
   * payment upsert
   */
  export type paymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * The filter to search for the payment to update in case it exists.
     */
    where: paymentWhereUniqueInput
    /**
     * In case the payment found by the `where` argument doesn't exist, create a new payment with this data.
     */
    create: XOR<paymentCreateInput, paymentUncheckedCreateInput>
    /**
     * In case the payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<paymentUpdateInput, paymentUncheckedUpdateInput>
  }

  /**
   * payment delete
   */
  export type paymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
    /**
     * Filter which payment to delete.
     */
    where: paymentWhereUniqueInput
  }

  /**
   * payment deleteMany
   */
  export type paymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which payments to delete
     */
    where?: paymentWhereInput
    /**
     * Limit how many payments to delete.
     */
    limit?: number
  }

  /**
   * payment without action
   */
  export type paymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the payment
     */
    select?: paymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the payment
     */
    omit?: paymentOmit<ExtArgs> | null
  }


  /**
   * Model post_reaction
   */

  export type AggregatePost_reaction = {
    _count: Post_reactionCountAggregateOutputType | null
    _avg: Post_reactionAvgAggregateOutputType | null
    _sum: Post_reactionSumAggregateOutputType | null
    _min: Post_reactionMinAggregateOutputType | null
    _max: Post_reactionMaxAggregateOutputType | null
  }

  export type Post_reactionAvgAggregateOutputType = {
    reaction_id: number | null
    post_id: number | null
    customer_id: number | null
  }

  export type Post_reactionSumAggregateOutputType = {
    reaction_id: number | null
    post_id: number | null
    customer_id: number | null
  }

  export type Post_reactionMinAggregateOutputType = {
    reaction_id: number | null
    reaction_type: $Enums.reaction_type | null
    post_id: number | null
    customer_id: number | null
    created_at: Date | null
  }

  export type Post_reactionMaxAggregateOutputType = {
    reaction_id: number | null
    reaction_type: $Enums.reaction_type | null
    post_id: number | null
    customer_id: number | null
    created_at: Date | null
  }

  export type Post_reactionCountAggregateOutputType = {
    reaction_id: number
    reaction_type: number
    post_id: number
    customer_id: number
    created_at: number
    _all: number
  }


  export type Post_reactionAvgAggregateInputType = {
    reaction_id?: true
    post_id?: true
    customer_id?: true
  }

  export type Post_reactionSumAggregateInputType = {
    reaction_id?: true
    post_id?: true
    customer_id?: true
  }

  export type Post_reactionMinAggregateInputType = {
    reaction_id?: true
    reaction_type?: true
    post_id?: true
    customer_id?: true
    created_at?: true
  }

  export type Post_reactionMaxAggregateInputType = {
    reaction_id?: true
    reaction_type?: true
    post_id?: true
    customer_id?: true
    created_at?: true
  }

  export type Post_reactionCountAggregateInputType = {
    reaction_id?: true
    reaction_type?: true
    post_id?: true
    customer_id?: true
    created_at?: true
    _all?: true
  }

  export type Post_reactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_reaction to aggregate.
     */
    where?: post_reactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_reactions to fetch.
     */
    orderBy?: post_reactionOrderByWithRelationInput | post_reactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: post_reactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_reactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_reactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned post_reactions
    **/
    _count?: true | Post_reactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Post_reactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Post_reactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Post_reactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Post_reactionMaxAggregateInputType
  }

  export type GetPost_reactionAggregateType<T extends Post_reactionAggregateArgs> = {
        [P in keyof T & keyof AggregatePost_reaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost_reaction[P]>
      : GetScalarType<T[P], AggregatePost_reaction[P]>
  }




  export type post_reactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: post_reactionWhereInput
    orderBy?: post_reactionOrderByWithAggregationInput | post_reactionOrderByWithAggregationInput[]
    by: Post_reactionScalarFieldEnum[] | Post_reactionScalarFieldEnum
    having?: post_reactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Post_reactionCountAggregateInputType | true
    _avg?: Post_reactionAvgAggregateInputType
    _sum?: Post_reactionSumAggregateInputType
    _min?: Post_reactionMinAggregateInputType
    _max?: Post_reactionMaxAggregateInputType
  }

  export type Post_reactionGroupByOutputType = {
    reaction_id: number
    reaction_type: $Enums.reaction_type | null
    post_id: number
    customer_id: number
    created_at: Date
    _count: Post_reactionCountAggregateOutputType | null
    _avg: Post_reactionAvgAggregateOutputType | null
    _sum: Post_reactionSumAggregateOutputType | null
    _min: Post_reactionMinAggregateOutputType | null
    _max: Post_reactionMaxAggregateOutputType | null
  }

  type GetPost_reactionGroupByPayload<T extends post_reactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Post_reactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Post_reactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Post_reactionGroupByOutputType[P]>
            : GetScalarType<T[P], Post_reactionGroupByOutputType[P]>
        }
      >
    >


  export type post_reactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    reaction_id?: boolean
    reaction_type?: boolean
    post_id?: boolean
    customer_id?: boolean
    created_at?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    film_post?: boolean | film_postDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_reaction"]>

  export type post_reactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    reaction_id?: boolean
    reaction_type?: boolean
    post_id?: boolean
    customer_id?: boolean
    created_at?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    film_post?: boolean | film_postDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_reaction"]>

  export type post_reactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    reaction_id?: boolean
    reaction_type?: boolean
    post_id?: boolean
    customer_id?: boolean
    created_at?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    film_post?: boolean | film_postDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post_reaction"]>

  export type post_reactionSelectScalar = {
    reaction_id?: boolean
    reaction_type?: boolean
    post_id?: boolean
    customer_id?: boolean
    created_at?: boolean
  }

  export type post_reactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"reaction_id" | "reaction_type" | "post_id" | "customer_id" | "created_at", ExtArgs["result"]["post_reaction"]>
  export type post_reactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    film_post?: boolean | film_postDefaultArgs<ExtArgs>
  }
  export type post_reactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    film_post?: boolean | film_postDefaultArgs<ExtArgs>
  }
  export type post_reactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    film_post?: boolean | film_postDefaultArgs<ExtArgs>
  }

  export type $post_reactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "post_reaction"
    objects: {
      customer: Prisma.$customerPayload<ExtArgs>
      film_post: Prisma.$film_postPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      reaction_id: number
      reaction_type: $Enums.reaction_type | null
      post_id: number
      customer_id: number
      created_at: Date
    }, ExtArgs["result"]["post_reaction"]>
    composites: {}
  }

  type post_reactionGetPayload<S extends boolean | null | undefined | post_reactionDefaultArgs> = $Result.GetResult<Prisma.$post_reactionPayload, S>

  type post_reactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<post_reactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: Post_reactionCountAggregateInputType | true
    }

  export interface post_reactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['post_reaction'], meta: { name: 'post_reaction' } }
    /**
     * Find zero or one Post_reaction that matches the filter.
     * @param {post_reactionFindUniqueArgs} args - Arguments to find a Post_reaction
     * @example
     * // Get one Post_reaction
     * const post_reaction = await prisma.post_reaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends post_reactionFindUniqueArgs>(args: SelectSubset<T, post_reactionFindUniqueArgs<ExtArgs>>): Prisma__post_reactionClient<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post_reaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {post_reactionFindUniqueOrThrowArgs} args - Arguments to find a Post_reaction
     * @example
     * // Get one Post_reaction
     * const post_reaction = await prisma.post_reaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends post_reactionFindUniqueOrThrowArgs>(args: SelectSubset<T, post_reactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__post_reactionClient<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_reaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_reactionFindFirstArgs} args - Arguments to find a Post_reaction
     * @example
     * // Get one Post_reaction
     * const post_reaction = await prisma.post_reaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends post_reactionFindFirstArgs>(args?: SelectSubset<T, post_reactionFindFirstArgs<ExtArgs>>): Prisma__post_reactionClient<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post_reaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_reactionFindFirstOrThrowArgs} args - Arguments to find a Post_reaction
     * @example
     * // Get one Post_reaction
     * const post_reaction = await prisma.post_reaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends post_reactionFindFirstOrThrowArgs>(args?: SelectSubset<T, post_reactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__post_reactionClient<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Post_reactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_reactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Post_reactions
     * const post_reactions = await prisma.post_reaction.findMany()
     * 
     * // Get first 10 Post_reactions
     * const post_reactions = await prisma.post_reaction.findMany({ take: 10 })
     * 
     * // Only select the `reaction_id`
     * const post_reactionWithReaction_idOnly = await prisma.post_reaction.findMany({ select: { reaction_id: true } })
     * 
     */
    findMany<T extends post_reactionFindManyArgs>(args?: SelectSubset<T, post_reactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post_reaction.
     * @param {post_reactionCreateArgs} args - Arguments to create a Post_reaction.
     * @example
     * // Create one Post_reaction
     * const Post_reaction = await prisma.post_reaction.create({
     *   data: {
     *     // ... data to create a Post_reaction
     *   }
     * })
     * 
     */
    create<T extends post_reactionCreateArgs>(args: SelectSubset<T, post_reactionCreateArgs<ExtArgs>>): Prisma__post_reactionClient<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Post_reactions.
     * @param {post_reactionCreateManyArgs} args - Arguments to create many Post_reactions.
     * @example
     * // Create many Post_reactions
     * const post_reaction = await prisma.post_reaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends post_reactionCreateManyArgs>(args?: SelectSubset<T, post_reactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Post_reactions and returns the data saved in the database.
     * @param {post_reactionCreateManyAndReturnArgs} args - Arguments to create many Post_reactions.
     * @example
     * // Create many Post_reactions
     * const post_reaction = await prisma.post_reaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Post_reactions and only return the `reaction_id`
     * const post_reactionWithReaction_idOnly = await prisma.post_reaction.createManyAndReturn({
     *   select: { reaction_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends post_reactionCreateManyAndReturnArgs>(args?: SelectSubset<T, post_reactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post_reaction.
     * @param {post_reactionDeleteArgs} args - Arguments to delete one Post_reaction.
     * @example
     * // Delete one Post_reaction
     * const Post_reaction = await prisma.post_reaction.delete({
     *   where: {
     *     // ... filter to delete one Post_reaction
     *   }
     * })
     * 
     */
    delete<T extends post_reactionDeleteArgs>(args: SelectSubset<T, post_reactionDeleteArgs<ExtArgs>>): Prisma__post_reactionClient<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post_reaction.
     * @param {post_reactionUpdateArgs} args - Arguments to update one Post_reaction.
     * @example
     * // Update one Post_reaction
     * const post_reaction = await prisma.post_reaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends post_reactionUpdateArgs>(args: SelectSubset<T, post_reactionUpdateArgs<ExtArgs>>): Prisma__post_reactionClient<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Post_reactions.
     * @param {post_reactionDeleteManyArgs} args - Arguments to filter Post_reactions to delete.
     * @example
     * // Delete a few Post_reactions
     * const { count } = await prisma.post_reaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends post_reactionDeleteManyArgs>(args?: SelectSubset<T, post_reactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_reactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_reactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Post_reactions
     * const post_reaction = await prisma.post_reaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends post_reactionUpdateManyArgs>(args: SelectSubset<T, post_reactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Post_reactions and returns the data updated in the database.
     * @param {post_reactionUpdateManyAndReturnArgs} args - Arguments to update many Post_reactions.
     * @example
     * // Update many Post_reactions
     * const post_reaction = await prisma.post_reaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Post_reactions and only return the `reaction_id`
     * const post_reactionWithReaction_idOnly = await prisma.post_reaction.updateManyAndReturn({
     *   select: { reaction_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends post_reactionUpdateManyAndReturnArgs>(args: SelectSubset<T, post_reactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post_reaction.
     * @param {post_reactionUpsertArgs} args - Arguments to update or create a Post_reaction.
     * @example
     * // Update or create a Post_reaction
     * const post_reaction = await prisma.post_reaction.upsert({
     *   create: {
     *     // ... data to create a Post_reaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post_reaction we want to update
     *   }
     * })
     */
    upsert<T extends post_reactionUpsertArgs>(args: SelectSubset<T, post_reactionUpsertArgs<ExtArgs>>): Prisma__post_reactionClient<$Result.GetResult<Prisma.$post_reactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Post_reactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_reactionCountArgs} args - Arguments to filter Post_reactions to count.
     * @example
     * // Count the number of Post_reactions
     * const count = await prisma.post_reaction.count({
     *   where: {
     *     // ... the filter for the Post_reactions we want to count
     *   }
     * })
    **/
    count<T extends post_reactionCountArgs>(
      args?: Subset<T, post_reactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Post_reactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post_reaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Post_reactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Post_reactionAggregateArgs>(args: Subset<T, Post_reactionAggregateArgs>): Prisma.PrismaPromise<GetPost_reactionAggregateType<T>>

    /**
     * Group by Post_reaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {post_reactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends post_reactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: post_reactionGroupByArgs['orderBy'] }
        : { orderBy?: post_reactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, post_reactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPost_reactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the post_reaction model
   */
  readonly fields: post_reactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for post_reaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__post_reactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends customerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, customerDefaultArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    film_post<T extends film_postDefaultArgs<ExtArgs> = {}>(args?: Subset<T, film_postDefaultArgs<ExtArgs>>): Prisma__film_postClient<$Result.GetResult<Prisma.$film_postPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the post_reaction model
   */
  interface post_reactionFieldRefs {
    readonly reaction_id: FieldRef<"post_reaction", 'Int'>
    readonly reaction_type: FieldRef<"post_reaction", 'reaction_type'>
    readonly post_id: FieldRef<"post_reaction", 'Int'>
    readonly customer_id: FieldRef<"post_reaction", 'Int'>
    readonly created_at: FieldRef<"post_reaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * post_reaction findUnique
   */
  export type post_reactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionInclude<ExtArgs> | null
    /**
     * Filter, which post_reaction to fetch.
     */
    where: post_reactionWhereUniqueInput
  }

  /**
   * post_reaction findUniqueOrThrow
   */
  export type post_reactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionInclude<ExtArgs> | null
    /**
     * Filter, which post_reaction to fetch.
     */
    where: post_reactionWhereUniqueInput
  }

  /**
   * post_reaction findFirst
   */
  export type post_reactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionInclude<ExtArgs> | null
    /**
     * Filter, which post_reaction to fetch.
     */
    where?: post_reactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_reactions to fetch.
     */
    orderBy?: post_reactionOrderByWithRelationInput | post_reactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_reactions.
     */
    cursor?: post_reactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_reactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_reactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_reactions.
     */
    distinct?: Post_reactionScalarFieldEnum | Post_reactionScalarFieldEnum[]
  }

  /**
   * post_reaction findFirstOrThrow
   */
  export type post_reactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionInclude<ExtArgs> | null
    /**
     * Filter, which post_reaction to fetch.
     */
    where?: post_reactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_reactions to fetch.
     */
    orderBy?: post_reactionOrderByWithRelationInput | post_reactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for post_reactions.
     */
    cursor?: post_reactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_reactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_reactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of post_reactions.
     */
    distinct?: Post_reactionScalarFieldEnum | Post_reactionScalarFieldEnum[]
  }

  /**
   * post_reaction findMany
   */
  export type post_reactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionInclude<ExtArgs> | null
    /**
     * Filter, which post_reactions to fetch.
     */
    where?: post_reactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of post_reactions to fetch.
     */
    orderBy?: post_reactionOrderByWithRelationInput | post_reactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing post_reactions.
     */
    cursor?: post_reactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` post_reactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` post_reactions.
     */
    skip?: number
    distinct?: Post_reactionScalarFieldEnum | Post_reactionScalarFieldEnum[]
  }

  /**
   * post_reaction create
   */
  export type post_reactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionInclude<ExtArgs> | null
    /**
     * The data needed to create a post_reaction.
     */
    data: XOR<post_reactionCreateInput, post_reactionUncheckedCreateInput>
  }

  /**
   * post_reaction createMany
   */
  export type post_reactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many post_reactions.
     */
    data: post_reactionCreateManyInput | post_reactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * post_reaction createManyAndReturn
   */
  export type post_reactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * The data used to create many post_reactions.
     */
    data: post_reactionCreateManyInput | post_reactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_reaction update
   */
  export type post_reactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionInclude<ExtArgs> | null
    /**
     * The data needed to update a post_reaction.
     */
    data: XOR<post_reactionUpdateInput, post_reactionUncheckedUpdateInput>
    /**
     * Choose, which post_reaction to update.
     */
    where: post_reactionWhereUniqueInput
  }

  /**
   * post_reaction updateMany
   */
  export type post_reactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update post_reactions.
     */
    data: XOR<post_reactionUpdateManyMutationInput, post_reactionUncheckedUpdateManyInput>
    /**
     * Filter which post_reactions to update
     */
    where?: post_reactionWhereInput
    /**
     * Limit how many post_reactions to update.
     */
    limit?: number
  }

  /**
   * post_reaction updateManyAndReturn
   */
  export type post_reactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * The data used to update post_reactions.
     */
    data: XOR<post_reactionUpdateManyMutationInput, post_reactionUncheckedUpdateManyInput>
    /**
     * Filter which post_reactions to update
     */
    where?: post_reactionWhereInput
    /**
     * Limit how many post_reactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * post_reaction upsert
   */
  export type post_reactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionInclude<ExtArgs> | null
    /**
     * The filter to search for the post_reaction to update in case it exists.
     */
    where: post_reactionWhereUniqueInput
    /**
     * In case the post_reaction found by the `where` argument doesn't exist, create a new post_reaction with this data.
     */
    create: XOR<post_reactionCreateInput, post_reactionUncheckedCreateInput>
    /**
     * In case the post_reaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<post_reactionUpdateInput, post_reactionUncheckedUpdateInput>
  }

  /**
   * post_reaction delete
   */
  export type post_reactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionInclude<ExtArgs> | null
    /**
     * Filter which post_reaction to delete.
     */
    where: post_reactionWhereUniqueInput
  }

  /**
   * post_reaction deleteMany
   */
  export type post_reactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which post_reactions to delete
     */
    where?: post_reactionWhereInput
    /**
     * Limit how many post_reactions to delete.
     */
    limit?: number
  }

  /**
   * post_reaction without action
   */
  export type post_reactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the post_reaction
     */
    select?: post_reactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the post_reaction
     */
    omit?: post_reactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: post_reactionInclude<ExtArgs> | null
  }


  /**
   * Model rental
   */

  export type AggregateRental = {
    _count: RentalCountAggregateOutputType | null
    _avg: RentalAvgAggregateOutputType | null
    _sum: RentalSumAggregateOutputType | null
    _min: RentalMinAggregateOutputType | null
    _max: RentalMaxAggregateOutputType | null
  }

  export type RentalAvgAggregateOutputType = {
    rental_id: number | null
    inventory_id: number | null
    customer_id: number | null
    staff_id: number | null
  }

  export type RentalSumAggregateOutputType = {
    rental_id: number | null
    inventory_id: number | null
    customer_id: number | null
    staff_id: number | null
  }

  export type RentalMinAggregateOutputType = {
    rental_id: number | null
    rental_date: Date | null
    inventory_id: number | null
    customer_id: number | null
    return_date: Date | null
    staff_id: number | null
    last_update: Date | null
  }

  export type RentalMaxAggregateOutputType = {
    rental_id: number | null
    rental_date: Date | null
    inventory_id: number | null
    customer_id: number | null
    return_date: Date | null
    staff_id: number | null
    last_update: Date | null
  }

  export type RentalCountAggregateOutputType = {
    rental_id: number
    rental_date: number
    inventory_id: number
    customer_id: number
    return_date: number
    staff_id: number
    last_update: number
    _all: number
  }


  export type RentalAvgAggregateInputType = {
    rental_id?: true
    inventory_id?: true
    customer_id?: true
    staff_id?: true
  }

  export type RentalSumAggregateInputType = {
    rental_id?: true
    inventory_id?: true
    customer_id?: true
    staff_id?: true
  }

  export type RentalMinAggregateInputType = {
    rental_id?: true
    rental_date?: true
    inventory_id?: true
    customer_id?: true
    return_date?: true
    staff_id?: true
    last_update?: true
  }

  export type RentalMaxAggregateInputType = {
    rental_id?: true
    rental_date?: true
    inventory_id?: true
    customer_id?: true
    return_date?: true
    staff_id?: true
    last_update?: true
  }

  export type RentalCountAggregateInputType = {
    rental_id?: true
    rental_date?: true
    inventory_id?: true
    customer_id?: true
    return_date?: true
    staff_id?: true
    last_update?: true
    _all?: true
  }

  export type RentalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rental to aggregate.
     */
    where?: rentalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rentals to fetch.
     */
    orderBy?: rentalOrderByWithRelationInput | rentalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: rentalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rentals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rentals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned rentals
    **/
    _count?: true | RentalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RentalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RentalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RentalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RentalMaxAggregateInputType
  }

  export type GetRentalAggregateType<T extends RentalAggregateArgs> = {
        [P in keyof T & keyof AggregateRental]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRental[P]>
      : GetScalarType<T[P], AggregateRental[P]>
  }




  export type rentalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: rentalWhereInput
    orderBy?: rentalOrderByWithAggregationInput | rentalOrderByWithAggregationInput[]
    by: RentalScalarFieldEnum[] | RentalScalarFieldEnum
    having?: rentalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RentalCountAggregateInputType | true
    _avg?: RentalAvgAggregateInputType
    _sum?: RentalSumAggregateInputType
    _min?: RentalMinAggregateInputType
    _max?: RentalMaxAggregateInputType
  }

  export type RentalGroupByOutputType = {
    rental_id: number
    rental_date: Date
    inventory_id: number
    customer_id: number
    return_date: Date | null
    staff_id: number
    last_update: Date
    _count: RentalCountAggregateOutputType | null
    _avg: RentalAvgAggregateOutputType | null
    _sum: RentalSumAggregateOutputType | null
    _min: RentalMinAggregateOutputType | null
    _max: RentalMaxAggregateOutputType | null
  }

  type GetRentalGroupByPayload<T extends rentalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RentalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RentalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RentalGroupByOutputType[P]>
            : GetScalarType<T[P], RentalGroupByOutputType[P]>
        }
      >
    >


  export type rentalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rental_id?: boolean
    rental_date?: boolean
    inventory_id?: boolean
    customer_id?: boolean
    return_date?: boolean
    staff_id?: boolean
    last_update?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    inventory?: boolean | inventoryDefaultArgs<ExtArgs>
    staff?: boolean | staffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rental"]>

  export type rentalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rental_id?: boolean
    rental_date?: boolean
    inventory_id?: boolean
    customer_id?: boolean
    return_date?: boolean
    staff_id?: boolean
    last_update?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    inventory?: boolean | inventoryDefaultArgs<ExtArgs>
    staff?: boolean | staffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rental"]>

  export type rentalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    rental_id?: boolean
    rental_date?: boolean
    inventory_id?: boolean
    customer_id?: boolean
    return_date?: boolean
    staff_id?: boolean
    last_update?: boolean
    customer?: boolean | customerDefaultArgs<ExtArgs>
    inventory?: boolean | inventoryDefaultArgs<ExtArgs>
    staff?: boolean | staffDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rental"]>

  export type rentalSelectScalar = {
    rental_id?: boolean
    rental_date?: boolean
    inventory_id?: boolean
    customer_id?: boolean
    return_date?: boolean
    staff_id?: boolean
    last_update?: boolean
  }

  export type rentalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"rental_id" | "rental_date" | "inventory_id" | "customer_id" | "return_date" | "staff_id" | "last_update", ExtArgs["result"]["rental"]>
  export type rentalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    inventory?: boolean | inventoryDefaultArgs<ExtArgs>
    staff?: boolean | staffDefaultArgs<ExtArgs>
  }
  export type rentalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    inventory?: boolean | inventoryDefaultArgs<ExtArgs>
    staff?: boolean | staffDefaultArgs<ExtArgs>
  }
  export type rentalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | customerDefaultArgs<ExtArgs>
    inventory?: boolean | inventoryDefaultArgs<ExtArgs>
    staff?: boolean | staffDefaultArgs<ExtArgs>
  }

  export type $rentalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "rental"
    objects: {
      customer: Prisma.$customerPayload<ExtArgs>
      inventory: Prisma.$inventoryPayload<ExtArgs>
      staff: Prisma.$staffPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      rental_id: number
      rental_date: Date
      inventory_id: number
      customer_id: number
      return_date: Date | null
      staff_id: number
      last_update: Date
    }, ExtArgs["result"]["rental"]>
    composites: {}
  }

  type rentalGetPayload<S extends boolean | null | undefined | rentalDefaultArgs> = $Result.GetResult<Prisma.$rentalPayload, S>

  type rentalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<rentalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RentalCountAggregateInputType | true
    }

  export interface rentalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['rental'], meta: { name: 'rental' } }
    /**
     * Find zero or one Rental that matches the filter.
     * @param {rentalFindUniqueArgs} args - Arguments to find a Rental
     * @example
     * // Get one Rental
     * const rental = await prisma.rental.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends rentalFindUniqueArgs>(args: SelectSubset<T, rentalFindUniqueArgs<ExtArgs>>): Prisma__rentalClient<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Rental that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {rentalFindUniqueOrThrowArgs} args - Arguments to find a Rental
     * @example
     * // Get one Rental
     * const rental = await prisma.rental.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends rentalFindUniqueOrThrowArgs>(args: SelectSubset<T, rentalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__rentalClient<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rental that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rentalFindFirstArgs} args - Arguments to find a Rental
     * @example
     * // Get one Rental
     * const rental = await prisma.rental.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends rentalFindFirstArgs>(args?: SelectSubset<T, rentalFindFirstArgs<ExtArgs>>): Prisma__rentalClient<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Rental that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rentalFindFirstOrThrowArgs} args - Arguments to find a Rental
     * @example
     * // Get one Rental
     * const rental = await prisma.rental.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends rentalFindFirstOrThrowArgs>(args?: SelectSubset<T, rentalFindFirstOrThrowArgs<ExtArgs>>): Prisma__rentalClient<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Rentals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rentalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Rentals
     * const rentals = await prisma.rental.findMany()
     * 
     * // Get first 10 Rentals
     * const rentals = await prisma.rental.findMany({ take: 10 })
     * 
     * // Only select the `rental_id`
     * const rentalWithRental_idOnly = await prisma.rental.findMany({ select: { rental_id: true } })
     * 
     */
    findMany<T extends rentalFindManyArgs>(args?: SelectSubset<T, rentalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Rental.
     * @param {rentalCreateArgs} args - Arguments to create a Rental.
     * @example
     * // Create one Rental
     * const Rental = await prisma.rental.create({
     *   data: {
     *     // ... data to create a Rental
     *   }
     * })
     * 
     */
    create<T extends rentalCreateArgs>(args: SelectSubset<T, rentalCreateArgs<ExtArgs>>): Prisma__rentalClient<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Rentals.
     * @param {rentalCreateManyArgs} args - Arguments to create many Rentals.
     * @example
     * // Create many Rentals
     * const rental = await prisma.rental.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends rentalCreateManyArgs>(args?: SelectSubset<T, rentalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Rentals and returns the data saved in the database.
     * @param {rentalCreateManyAndReturnArgs} args - Arguments to create many Rentals.
     * @example
     * // Create many Rentals
     * const rental = await prisma.rental.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Rentals and only return the `rental_id`
     * const rentalWithRental_idOnly = await prisma.rental.createManyAndReturn({
     *   select: { rental_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends rentalCreateManyAndReturnArgs>(args?: SelectSubset<T, rentalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Rental.
     * @param {rentalDeleteArgs} args - Arguments to delete one Rental.
     * @example
     * // Delete one Rental
     * const Rental = await prisma.rental.delete({
     *   where: {
     *     // ... filter to delete one Rental
     *   }
     * })
     * 
     */
    delete<T extends rentalDeleteArgs>(args: SelectSubset<T, rentalDeleteArgs<ExtArgs>>): Prisma__rentalClient<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Rental.
     * @param {rentalUpdateArgs} args - Arguments to update one Rental.
     * @example
     * // Update one Rental
     * const rental = await prisma.rental.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends rentalUpdateArgs>(args: SelectSubset<T, rentalUpdateArgs<ExtArgs>>): Prisma__rentalClient<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Rentals.
     * @param {rentalDeleteManyArgs} args - Arguments to filter Rentals to delete.
     * @example
     * // Delete a few Rentals
     * const { count } = await prisma.rental.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends rentalDeleteManyArgs>(args?: SelectSubset<T, rentalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rentals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rentalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Rentals
     * const rental = await prisma.rental.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends rentalUpdateManyArgs>(args: SelectSubset<T, rentalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Rentals and returns the data updated in the database.
     * @param {rentalUpdateManyAndReturnArgs} args - Arguments to update many Rentals.
     * @example
     * // Update many Rentals
     * const rental = await prisma.rental.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Rentals and only return the `rental_id`
     * const rentalWithRental_idOnly = await prisma.rental.updateManyAndReturn({
     *   select: { rental_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends rentalUpdateManyAndReturnArgs>(args: SelectSubset<T, rentalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Rental.
     * @param {rentalUpsertArgs} args - Arguments to update or create a Rental.
     * @example
     * // Update or create a Rental
     * const rental = await prisma.rental.upsert({
     *   create: {
     *     // ... data to create a Rental
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Rental we want to update
     *   }
     * })
     */
    upsert<T extends rentalUpsertArgs>(args: SelectSubset<T, rentalUpsertArgs<ExtArgs>>): Prisma__rentalClient<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Rentals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rentalCountArgs} args - Arguments to filter Rentals to count.
     * @example
     * // Count the number of Rentals
     * const count = await prisma.rental.count({
     *   where: {
     *     // ... the filter for the Rentals we want to count
     *   }
     * })
    **/
    count<T extends rentalCountArgs>(
      args?: Subset<T, rentalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RentalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Rental.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RentalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RentalAggregateArgs>(args: Subset<T, RentalAggregateArgs>): Prisma.PrismaPromise<GetRentalAggregateType<T>>

    /**
     * Group by Rental.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {rentalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends rentalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: rentalGroupByArgs['orderBy'] }
        : { orderBy?: rentalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, rentalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRentalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the rental model
   */
  readonly fields: rentalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for rental.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__rentalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends customerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, customerDefaultArgs<ExtArgs>>): Prisma__customerClient<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    inventory<T extends inventoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, inventoryDefaultArgs<ExtArgs>>): Prisma__inventoryClient<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    staff<T extends staffDefaultArgs<ExtArgs> = {}>(args?: Subset<T, staffDefaultArgs<ExtArgs>>): Prisma__staffClient<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the rental model
   */
  interface rentalFieldRefs {
    readonly rental_id: FieldRef<"rental", 'Int'>
    readonly rental_date: FieldRef<"rental", 'DateTime'>
    readonly inventory_id: FieldRef<"rental", 'Int'>
    readonly customer_id: FieldRef<"rental", 'Int'>
    readonly return_date: FieldRef<"rental", 'DateTime'>
    readonly staff_id: FieldRef<"rental", 'Int'>
    readonly last_update: FieldRef<"rental", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * rental findUnique
   */
  export type rentalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
    /**
     * Filter, which rental to fetch.
     */
    where: rentalWhereUniqueInput
  }

  /**
   * rental findUniqueOrThrow
   */
  export type rentalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
    /**
     * Filter, which rental to fetch.
     */
    where: rentalWhereUniqueInput
  }

  /**
   * rental findFirst
   */
  export type rentalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
    /**
     * Filter, which rental to fetch.
     */
    where?: rentalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rentals to fetch.
     */
    orderBy?: rentalOrderByWithRelationInput | rentalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rentals.
     */
    cursor?: rentalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rentals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rentals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rentals.
     */
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * rental findFirstOrThrow
   */
  export type rentalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
    /**
     * Filter, which rental to fetch.
     */
    where?: rentalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rentals to fetch.
     */
    orderBy?: rentalOrderByWithRelationInput | rentalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for rentals.
     */
    cursor?: rentalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rentals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rentals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of rentals.
     */
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * rental findMany
   */
  export type rentalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
    /**
     * Filter, which rentals to fetch.
     */
    where?: rentalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of rentals to fetch.
     */
    orderBy?: rentalOrderByWithRelationInput | rentalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing rentals.
     */
    cursor?: rentalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` rentals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` rentals.
     */
    skip?: number
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * rental create
   */
  export type rentalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
    /**
     * The data needed to create a rental.
     */
    data: XOR<rentalCreateInput, rentalUncheckedCreateInput>
  }

  /**
   * rental createMany
   */
  export type rentalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many rentals.
     */
    data: rentalCreateManyInput | rentalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * rental createManyAndReturn
   */
  export type rentalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * The data used to create many rentals.
     */
    data: rentalCreateManyInput | rentalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * rental update
   */
  export type rentalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
    /**
     * The data needed to update a rental.
     */
    data: XOR<rentalUpdateInput, rentalUncheckedUpdateInput>
    /**
     * Choose, which rental to update.
     */
    where: rentalWhereUniqueInput
  }

  /**
   * rental updateMany
   */
  export type rentalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update rentals.
     */
    data: XOR<rentalUpdateManyMutationInput, rentalUncheckedUpdateManyInput>
    /**
     * Filter which rentals to update
     */
    where?: rentalWhereInput
    /**
     * Limit how many rentals to update.
     */
    limit?: number
  }

  /**
   * rental updateManyAndReturn
   */
  export type rentalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * The data used to update rentals.
     */
    data: XOR<rentalUpdateManyMutationInput, rentalUncheckedUpdateManyInput>
    /**
     * Filter which rentals to update
     */
    where?: rentalWhereInput
    /**
     * Limit how many rentals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * rental upsert
   */
  export type rentalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
    /**
     * The filter to search for the rental to update in case it exists.
     */
    where: rentalWhereUniqueInput
    /**
     * In case the rental found by the `where` argument doesn't exist, create a new rental with this data.
     */
    create: XOR<rentalCreateInput, rentalUncheckedCreateInput>
    /**
     * In case the rental was found with the provided `where` argument, update it with this data.
     */
    update: XOR<rentalUpdateInput, rentalUncheckedUpdateInput>
  }

  /**
   * rental delete
   */
  export type rentalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
    /**
     * Filter which rental to delete.
     */
    where: rentalWhereUniqueInput
  }

  /**
   * rental deleteMany
   */
  export type rentalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which rentals to delete
     */
    where?: rentalWhereInput
    /**
     * Limit how many rentals to delete.
     */
    limit?: number
  }

  /**
   * rental without action
   */
  export type rentalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
  }


  /**
   * Model staff
   */

  export type AggregateStaff = {
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  export type StaffAvgAggregateOutputType = {
    staff_id: number | null
    address_id: number | null
    store_id: number | null
  }

  export type StaffSumAggregateOutputType = {
    staff_id: number | null
    address_id: number | null
    store_id: number | null
  }

  export type StaffMinAggregateOutputType = {
    staff_id: number | null
    first_name: string | null
    last_name: string | null
    address_id: number | null
    email: string | null
    store_id: number | null
    active: boolean | null
    username: string | null
    password: string | null
    last_update: Date | null
    picture: Uint8Array | null
  }

  export type StaffMaxAggregateOutputType = {
    staff_id: number | null
    first_name: string | null
    last_name: string | null
    address_id: number | null
    email: string | null
    store_id: number | null
    active: boolean | null
    username: string | null
    password: string | null
    last_update: Date | null
    picture: Uint8Array | null
  }

  export type StaffCountAggregateOutputType = {
    staff_id: number
    first_name: number
    last_name: number
    address_id: number
    email: number
    store_id: number
    active: number
    username: number
    password: number
    last_update: number
    picture: number
    _all: number
  }


  export type StaffAvgAggregateInputType = {
    staff_id?: true
    address_id?: true
    store_id?: true
  }

  export type StaffSumAggregateInputType = {
    staff_id?: true
    address_id?: true
    store_id?: true
  }

  export type StaffMinAggregateInputType = {
    staff_id?: true
    first_name?: true
    last_name?: true
    address_id?: true
    email?: true
    store_id?: true
    active?: true
    username?: true
    password?: true
    last_update?: true
    picture?: true
  }

  export type StaffMaxAggregateInputType = {
    staff_id?: true
    first_name?: true
    last_name?: true
    address_id?: true
    email?: true
    store_id?: true
    active?: true
    username?: true
    password?: true
    last_update?: true
    picture?: true
  }

  export type StaffCountAggregateInputType = {
    staff_id?: true
    first_name?: true
    last_name?: true
    address_id?: true
    email?: true
    store_id?: true
    active?: true
    username?: true
    password?: true
    last_update?: true
    picture?: true
    _all?: true
  }

  export type StaffAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which staff to aggregate.
     */
    where?: staffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of staff to fetch.
     */
    orderBy?: staffOrderByWithRelationInput | staffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: staffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned staff
    **/
    _count?: true | StaffCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StaffAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StaffSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StaffMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StaffMaxAggregateInputType
  }

  export type GetStaffAggregateType<T extends StaffAggregateArgs> = {
        [P in keyof T & keyof AggregateStaff]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStaff[P]>
      : GetScalarType<T[P], AggregateStaff[P]>
  }




  export type staffGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: staffWhereInput
    orderBy?: staffOrderByWithAggregationInput | staffOrderByWithAggregationInput[]
    by: StaffScalarFieldEnum[] | StaffScalarFieldEnum
    having?: staffScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StaffCountAggregateInputType | true
    _avg?: StaffAvgAggregateInputType
    _sum?: StaffSumAggregateInputType
    _min?: StaffMinAggregateInputType
    _max?: StaffMaxAggregateInputType
  }

  export type StaffGroupByOutputType = {
    staff_id: number
    first_name: string
    last_name: string
    address_id: number
    email: string | null
    store_id: number
    active: boolean
    username: string
    password: string | null
    last_update: Date
    picture: Uint8Array | null
    _count: StaffCountAggregateOutputType | null
    _avg: StaffAvgAggregateOutputType | null
    _sum: StaffSumAggregateOutputType | null
    _min: StaffMinAggregateOutputType | null
    _max: StaffMaxAggregateOutputType | null
  }

  type GetStaffGroupByPayload<T extends staffGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StaffGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StaffGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StaffGroupByOutputType[P]>
            : GetScalarType<T[P], StaffGroupByOutputType[P]>
        }
      >
    >


  export type staffSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    staff_id?: boolean
    first_name?: boolean
    last_name?: boolean
    address_id?: boolean
    email?: boolean
    store_id?: boolean
    active?: boolean
    username?: boolean
    password?: boolean
    last_update?: boolean
    picture?: boolean
    rental?: boolean | staff$rentalArgs<ExtArgs>
    address?: boolean | addressDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type staffSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    staff_id?: boolean
    first_name?: boolean
    last_name?: boolean
    address_id?: boolean
    email?: boolean
    store_id?: boolean
    active?: boolean
    username?: boolean
    password?: boolean
    last_update?: boolean
    picture?: boolean
    address?: boolean | addressDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type staffSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    staff_id?: boolean
    first_name?: boolean
    last_name?: boolean
    address_id?: boolean
    email?: boolean
    store_id?: boolean
    active?: boolean
    username?: boolean
    password?: boolean
    last_update?: boolean
    picture?: boolean
    address?: boolean | addressDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["staff"]>

  export type staffSelectScalar = {
    staff_id?: boolean
    first_name?: boolean
    last_name?: boolean
    address_id?: boolean
    email?: boolean
    store_id?: boolean
    active?: boolean
    username?: boolean
    password?: boolean
    last_update?: boolean
    picture?: boolean
  }

  export type staffOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"staff_id" | "first_name" | "last_name" | "address_id" | "email" | "store_id" | "active" | "username" | "password" | "last_update" | "picture", ExtArgs["result"]["staff"]>
  export type staffInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rental?: boolean | staff$rentalArgs<ExtArgs>
    address?: boolean | addressDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
    _count?: boolean | StaffCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type staffIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | addressDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }
  export type staffIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | addressDefaultArgs<ExtArgs>
    store?: boolean | storeDefaultArgs<ExtArgs>
  }

  export type $staffPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "staff"
    objects: {
      rental: Prisma.$rentalPayload<ExtArgs>[]
      address: Prisma.$addressPayload<ExtArgs>
      store: Prisma.$storePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      staff_id: number
      first_name: string
      last_name: string
      address_id: number
      email: string | null
      store_id: number
      active: boolean
      username: string
      password: string | null
      last_update: Date
      picture: Uint8Array | null
    }, ExtArgs["result"]["staff"]>
    composites: {}
  }

  type staffGetPayload<S extends boolean | null | undefined | staffDefaultArgs> = $Result.GetResult<Prisma.$staffPayload, S>

  type staffCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<staffFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StaffCountAggregateInputType | true
    }

  export interface staffDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['staff'], meta: { name: 'staff' } }
    /**
     * Find zero or one Staff that matches the filter.
     * @param {staffFindUniqueArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends staffFindUniqueArgs>(args: SelectSubset<T, staffFindUniqueArgs<ExtArgs>>): Prisma__staffClient<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Staff that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {staffFindUniqueOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends staffFindUniqueOrThrowArgs>(args: SelectSubset<T, staffFindUniqueOrThrowArgs<ExtArgs>>): Prisma__staffClient<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {staffFindFirstArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends staffFindFirstArgs>(args?: SelectSubset<T, staffFindFirstArgs<ExtArgs>>): Prisma__staffClient<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Staff that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {staffFindFirstOrThrowArgs} args - Arguments to find a Staff
     * @example
     * // Get one Staff
     * const staff = await prisma.staff.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends staffFindFirstOrThrowArgs>(args?: SelectSubset<T, staffFindFirstOrThrowArgs<ExtArgs>>): Prisma__staffClient<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Staff that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {staffFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Staff
     * const staff = await prisma.staff.findMany()
     * 
     * // Get first 10 Staff
     * const staff = await prisma.staff.findMany({ take: 10 })
     * 
     * // Only select the `staff_id`
     * const staffWithStaff_idOnly = await prisma.staff.findMany({ select: { staff_id: true } })
     * 
     */
    findMany<T extends staffFindManyArgs>(args?: SelectSubset<T, staffFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Staff.
     * @param {staffCreateArgs} args - Arguments to create a Staff.
     * @example
     * // Create one Staff
     * const Staff = await prisma.staff.create({
     *   data: {
     *     // ... data to create a Staff
     *   }
     * })
     * 
     */
    create<T extends staffCreateArgs>(args: SelectSubset<T, staffCreateArgs<ExtArgs>>): Prisma__staffClient<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Staff.
     * @param {staffCreateManyArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends staffCreateManyArgs>(args?: SelectSubset<T, staffCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Staff and returns the data saved in the database.
     * @param {staffCreateManyAndReturnArgs} args - Arguments to create many Staff.
     * @example
     * // Create many Staff
     * const staff = await prisma.staff.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Staff and only return the `staff_id`
     * const staffWithStaff_idOnly = await prisma.staff.createManyAndReturn({
     *   select: { staff_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends staffCreateManyAndReturnArgs>(args?: SelectSubset<T, staffCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Staff.
     * @param {staffDeleteArgs} args - Arguments to delete one Staff.
     * @example
     * // Delete one Staff
     * const Staff = await prisma.staff.delete({
     *   where: {
     *     // ... filter to delete one Staff
     *   }
     * })
     * 
     */
    delete<T extends staffDeleteArgs>(args: SelectSubset<T, staffDeleteArgs<ExtArgs>>): Prisma__staffClient<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Staff.
     * @param {staffUpdateArgs} args - Arguments to update one Staff.
     * @example
     * // Update one Staff
     * const staff = await prisma.staff.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends staffUpdateArgs>(args: SelectSubset<T, staffUpdateArgs<ExtArgs>>): Prisma__staffClient<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Staff.
     * @param {staffDeleteManyArgs} args - Arguments to filter Staff to delete.
     * @example
     * // Delete a few Staff
     * const { count } = await prisma.staff.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends staffDeleteManyArgs>(args?: SelectSubset<T, staffDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {staffUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends staffUpdateManyArgs>(args: SelectSubset<T, staffUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Staff and returns the data updated in the database.
     * @param {staffUpdateManyAndReturnArgs} args - Arguments to update many Staff.
     * @example
     * // Update many Staff
     * const staff = await prisma.staff.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Staff and only return the `staff_id`
     * const staffWithStaff_idOnly = await prisma.staff.updateManyAndReturn({
     *   select: { staff_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends staffUpdateManyAndReturnArgs>(args: SelectSubset<T, staffUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Staff.
     * @param {staffUpsertArgs} args - Arguments to update or create a Staff.
     * @example
     * // Update or create a Staff
     * const staff = await prisma.staff.upsert({
     *   create: {
     *     // ... data to create a Staff
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Staff we want to update
     *   }
     * })
     */
    upsert<T extends staffUpsertArgs>(args: SelectSubset<T, staffUpsertArgs<ExtArgs>>): Prisma__staffClient<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {staffCountArgs} args - Arguments to filter Staff to count.
     * @example
     * // Count the number of Staff
     * const count = await prisma.staff.count({
     *   where: {
     *     // ... the filter for the Staff we want to count
     *   }
     * })
    **/
    count<T extends staffCountArgs>(
      args?: Subset<T, staffCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StaffCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StaffAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StaffAggregateArgs>(args: Subset<T, StaffAggregateArgs>): Prisma.PrismaPromise<GetStaffAggregateType<T>>

    /**
     * Group by Staff.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {staffGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends staffGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: staffGroupByArgs['orderBy'] }
        : { orderBy?: staffGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, staffGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStaffGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the staff model
   */
  readonly fields: staffFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for staff.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__staffClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rental<T extends staff$rentalArgs<ExtArgs> = {}>(args?: Subset<T, staff$rentalArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$rentalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    address<T extends addressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, addressDefaultArgs<ExtArgs>>): Prisma__addressClient<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    store<T extends storeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, storeDefaultArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the staff model
   */
  interface staffFieldRefs {
    readonly staff_id: FieldRef<"staff", 'Int'>
    readonly first_name: FieldRef<"staff", 'String'>
    readonly last_name: FieldRef<"staff", 'String'>
    readonly address_id: FieldRef<"staff", 'Int'>
    readonly email: FieldRef<"staff", 'String'>
    readonly store_id: FieldRef<"staff", 'Int'>
    readonly active: FieldRef<"staff", 'Boolean'>
    readonly username: FieldRef<"staff", 'String'>
    readonly password: FieldRef<"staff", 'String'>
    readonly last_update: FieldRef<"staff", 'DateTime'>
    readonly picture: FieldRef<"staff", 'Bytes'>
  }
    

  // Custom InputTypes
  /**
   * staff findUnique
   */
  export type staffFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffInclude<ExtArgs> | null
    /**
     * Filter, which staff to fetch.
     */
    where: staffWhereUniqueInput
  }

  /**
   * staff findUniqueOrThrow
   */
  export type staffFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffInclude<ExtArgs> | null
    /**
     * Filter, which staff to fetch.
     */
    where: staffWhereUniqueInput
  }

  /**
   * staff findFirst
   */
  export type staffFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffInclude<ExtArgs> | null
    /**
     * Filter, which staff to fetch.
     */
    where?: staffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of staff to fetch.
     */
    orderBy?: staffOrderByWithRelationInput | staffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for staff.
     */
    cursor?: staffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * staff findFirstOrThrow
   */
  export type staffFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffInclude<ExtArgs> | null
    /**
     * Filter, which staff to fetch.
     */
    where?: staffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of staff to fetch.
     */
    orderBy?: staffOrderByWithRelationInput | staffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for staff.
     */
    cursor?: staffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` staff.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of staff.
     */
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * staff findMany
   */
  export type staffFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffInclude<ExtArgs> | null
    /**
     * Filter, which staff to fetch.
     */
    where?: staffWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of staff to fetch.
     */
    orderBy?: staffOrderByWithRelationInput | staffOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing staff.
     */
    cursor?: staffWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` staff from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` staff.
     */
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * staff create
   */
  export type staffCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffInclude<ExtArgs> | null
    /**
     * The data needed to create a staff.
     */
    data: XOR<staffCreateInput, staffUncheckedCreateInput>
  }

  /**
   * staff createMany
   */
  export type staffCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many staff.
     */
    data: staffCreateManyInput | staffCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * staff createManyAndReturn
   */
  export type staffCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * The data used to create many staff.
     */
    data: staffCreateManyInput | staffCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * staff update
   */
  export type staffUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffInclude<ExtArgs> | null
    /**
     * The data needed to update a staff.
     */
    data: XOR<staffUpdateInput, staffUncheckedUpdateInput>
    /**
     * Choose, which staff to update.
     */
    where: staffWhereUniqueInput
  }

  /**
   * staff updateMany
   */
  export type staffUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update staff.
     */
    data: XOR<staffUpdateManyMutationInput, staffUncheckedUpdateManyInput>
    /**
     * Filter which staff to update
     */
    where?: staffWhereInput
    /**
     * Limit how many staff to update.
     */
    limit?: number
  }

  /**
   * staff updateManyAndReturn
   */
  export type staffUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * The data used to update staff.
     */
    data: XOR<staffUpdateManyMutationInput, staffUncheckedUpdateManyInput>
    /**
     * Filter which staff to update
     */
    where?: staffWhereInput
    /**
     * Limit how many staff to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * staff upsert
   */
  export type staffUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffInclude<ExtArgs> | null
    /**
     * The filter to search for the staff to update in case it exists.
     */
    where: staffWhereUniqueInput
    /**
     * In case the staff found by the `where` argument doesn't exist, create a new staff with this data.
     */
    create: XOR<staffCreateInput, staffUncheckedCreateInput>
    /**
     * In case the staff was found with the provided `where` argument, update it with this data.
     */
    update: XOR<staffUpdateInput, staffUncheckedUpdateInput>
  }

  /**
   * staff delete
   */
  export type staffDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffInclude<ExtArgs> | null
    /**
     * Filter which staff to delete.
     */
    where: staffWhereUniqueInput
  }

  /**
   * staff deleteMany
   */
  export type staffDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which staff to delete
     */
    where?: staffWhereInput
    /**
     * Limit how many staff to delete.
     */
    limit?: number
  }

  /**
   * staff.rental
   */
  export type staff$rentalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the rental
     */
    select?: rentalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the rental
     */
    omit?: rentalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: rentalInclude<ExtArgs> | null
    where?: rentalWhereInput
    orderBy?: rentalOrderByWithRelationInput | rentalOrderByWithRelationInput[]
    cursor?: rentalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RentalScalarFieldEnum | RentalScalarFieldEnum[]
  }

  /**
   * staff without action
   */
  export type staffDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffInclude<ExtArgs> | null
  }


  /**
   * Model store
   */

  export type AggregateStore = {
    _count: StoreCountAggregateOutputType | null
    _avg: StoreAvgAggregateOutputType | null
    _sum: StoreSumAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  export type StoreAvgAggregateOutputType = {
    store_id: number | null
    manager_staff_id: number | null
    address_id: number | null
  }

  export type StoreSumAggregateOutputType = {
    store_id: number | null
    manager_staff_id: number | null
    address_id: number | null
  }

  export type StoreMinAggregateOutputType = {
    store_id: number | null
    manager_staff_id: number | null
    address_id: number | null
    last_update: Date | null
  }

  export type StoreMaxAggregateOutputType = {
    store_id: number | null
    manager_staff_id: number | null
    address_id: number | null
    last_update: Date | null
  }

  export type StoreCountAggregateOutputType = {
    store_id: number
    manager_staff_id: number
    address_id: number
    last_update: number
    _all: number
  }


  export type StoreAvgAggregateInputType = {
    store_id?: true
    manager_staff_id?: true
    address_id?: true
  }

  export type StoreSumAggregateInputType = {
    store_id?: true
    manager_staff_id?: true
    address_id?: true
  }

  export type StoreMinAggregateInputType = {
    store_id?: true
    manager_staff_id?: true
    address_id?: true
    last_update?: true
  }

  export type StoreMaxAggregateInputType = {
    store_id?: true
    manager_staff_id?: true
    address_id?: true
    last_update?: true
  }

  export type StoreCountAggregateInputType = {
    store_id?: true
    manager_staff_id?: true
    address_id?: true
    last_update?: true
    _all?: true
  }

  export type StoreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which store to aggregate.
     */
    where?: storeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stores to fetch.
     */
    orderBy?: storeOrderByWithRelationInput | storeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: storeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned stores
    **/
    _count?: true | StoreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StoreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StoreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StoreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StoreMaxAggregateInputType
  }

  export type GetStoreAggregateType<T extends StoreAggregateArgs> = {
        [P in keyof T & keyof AggregateStore]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStore[P]>
      : GetScalarType<T[P], AggregateStore[P]>
  }




  export type storeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: storeWhereInput
    orderBy?: storeOrderByWithAggregationInput | storeOrderByWithAggregationInput[]
    by: StoreScalarFieldEnum[] | StoreScalarFieldEnum
    having?: storeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StoreCountAggregateInputType | true
    _avg?: StoreAvgAggregateInputType
    _sum?: StoreSumAggregateInputType
    _min?: StoreMinAggregateInputType
    _max?: StoreMaxAggregateInputType
  }

  export type StoreGroupByOutputType = {
    store_id: number
    manager_staff_id: number
    address_id: number
    last_update: Date
    _count: StoreCountAggregateOutputType | null
    _avg: StoreAvgAggregateOutputType | null
    _sum: StoreSumAggregateOutputType | null
    _min: StoreMinAggregateOutputType | null
    _max: StoreMaxAggregateOutputType | null
  }

  type GetStoreGroupByPayload<T extends storeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StoreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StoreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StoreGroupByOutputType[P]>
            : GetScalarType<T[P], StoreGroupByOutputType[P]>
        }
      >
    >


  export type storeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    store_id?: boolean
    manager_staff_id?: boolean
    address_id?: boolean
    last_update?: boolean
    customer?: boolean | store$customerArgs<ExtArgs>
    inventory?: boolean | store$inventoryArgs<ExtArgs>
    staff?: boolean | store$staffArgs<ExtArgs>
    address?: boolean | addressDefaultArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type storeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    store_id?: boolean
    manager_staff_id?: boolean
    address_id?: boolean
    last_update?: boolean
    address?: boolean | addressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type storeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    store_id?: boolean
    manager_staff_id?: boolean
    address_id?: boolean
    last_update?: boolean
    address?: boolean | addressDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["store"]>

  export type storeSelectScalar = {
    store_id?: boolean
    manager_staff_id?: boolean
    address_id?: boolean
    last_update?: boolean
  }

  export type storeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"store_id" | "manager_staff_id" | "address_id" | "last_update", ExtArgs["result"]["store"]>
  export type storeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | store$customerArgs<ExtArgs>
    inventory?: boolean | store$inventoryArgs<ExtArgs>
    staff?: boolean | store$staffArgs<ExtArgs>
    address?: boolean | addressDefaultArgs<ExtArgs>
    _count?: boolean | StoreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type storeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | addressDefaultArgs<ExtArgs>
  }
  export type storeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | addressDefaultArgs<ExtArgs>
  }

  export type $storePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "store"
    objects: {
      customer: Prisma.$customerPayload<ExtArgs>[]
      inventory: Prisma.$inventoryPayload<ExtArgs>[]
      staff: Prisma.$staffPayload<ExtArgs>[]
      address: Prisma.$addressPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      store_id: number
      manager_staff_id: number
      address_id: number
      last_update: Date
    }, ExtArgs["result"]["store"]>
    composites: {}
  }

  type storeGetPayload<S extends boolean | null | undefined | storeDefaultArgs> = $Result.GetResult<Prisma.$storePayload, S>

  type storeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<storeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StoreCountAggregateInputType | true
    }

  export interface storeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['store'], meta: { name: 'store' } }
    /**
     * Find zero or one Store that matches the filter.
     * @param {storeFindUniqueArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends storeFindUniqueArgs>(args: SelectSubset<T, storeFindUniqueArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Store that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {storeFindUniqueOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends storeFindUniqueOrThrowArgs>(args: SelectSubset<T, storeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Store that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeFindFirstArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends storeFindFirstArgs>(args?: SelectSubset<T, storeFindFirstArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Store that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeFindFirstOrThrowArgs} args - Arguments to find a Store
     * @example
     * // Get one Store
     * const store = await prisma.store.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends storeFindFirstOrThrowArgs>(args?: SelectSubset<T, storeFindFirstOrThrowArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stores
     * const stores = await prisma.store.findMany()
     * 
     * // Get first 10 Stores
     * const stores = await prisma.store.findMany({ take: 10 })
     * 
     * // Only select the `store_id`
     * const storeWithStore_idOnly = await prisma.store.findMany({ select: { store_id: true } })
     * 
     */
    findMany<T extends storeFindManyArgs>(args?: SelectSubset<T, storeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Store.
     * @param {storeCreateArgs} args - Arguments to create a Store.
     * @example
     * // Create one Store
     * const Store = await prisma.store.create({
     *   data: {
     *     // ... data to create a Store
     *   }
     * })
     * 
     */
    create<T extends storeCreateArgs>(args: SelectSubset<T, storeCreateArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stores.
     * @param {storeCreateManyArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends storeCreateManyArgs>(args?: SelectSubset<T, storeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stores and returns the data saved in the database.
     * @param {storeCreateManyAndReturnArgs} args - Arguments to create many Stores.
     * @example
     * // Create many Stores
     * const store = await prisma.store.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stores and only return the `store_id`
     * const storeWithStore_idOnly = await prisma.store.createManyAndReturn({
     *   select: { store_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends storeCreateManyAndReturnArgs>(args?: SelectSubset<T, storeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Store.
     * @param {storeDeleteArgs} args - Arguments to delete one Store.
     * @example
     * // Delete one Store
     * const Store = await prisma.store.delete({
     *   where: {
     *     // ... filter to delete one Store
     *   }
     * })
     * 
     */
    delete<T extends storeDeleteArgs>(args: SelectSubset<T, storeDeleteArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Store.
     * @param {storeUpdateArgs} args - Arguments to update one Store.
     * @example
     * // Update one Store
     * const store = await prisma.store.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends storeUpdateArgs>(args: SelectSubset<T, storeUpdateArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stores.
     * @param {storeDeleteManyArgs} args - Arguments to filter Stores to delete.
     * @example
     * // Delete a few Stores
     * const { count } = await prisma.store.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends storeDeleteManyArgs>(args?: SelectSubset<T, storeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends storeUpdateManyArgs>(args: SelectSubset<T, storeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stores and returns the data updated in the database.
     * @param {storeUpdateManyAndReturnArgs} args - Arguments to update many Stores.
     * @example
     * // Update many Stores
     * const store = await prisma.store.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stores and only return the `store_id`
     * const storeWithStore_idOnly = await prisma.store.updateManyAndReturn({
     *   select: { store_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends storeUpdateManyAndReturnArgs>(args: SelectSubset<T, storeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Store.
     * @param {storeUpsertArgs} args - Arguments to update or create a Store.
     * @example
     * // Update or create a Store
     * const store = await prisma.store.upsert({
     *   create: {
     *     // ... data to create a Store
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Store we want to update
     *   }
     * })
     */
    upsert<T extends storeUpsertArgs>(args: SelectSubset<T, storeUpsertArgs<ExtArgs>>): Prisma__storeClient<$Result.GetResult<Prisma.$storePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeCountArgs} args - Arguments to filter Stores to count.
     * @example
     * // Count the number of Stores
     * const count = await prisma.store.count({
     *   where: {
     *     // ... the filter for the Stores we want to count
     *   }
     * })
    **/
    count<T extends storeCountArgs>(
      args?: Subset<T, storeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StoreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StoreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StoreAggregateArgs>(args: Subset<T, StoreAggregateArgs>): Prisma.PrismaPromise<GetStoreAggregateType<T>>

    /**
     * Group by Store.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {storeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends storeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: storeGroupByArgs['orderBy'] }
        : { orderBy?: storeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, storeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStoreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the store model
   */
  readonly fields: storeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for store.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__storeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends store$customerArgs<ExtArgs> = {}>(args?: Subset<T, store$customerArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inventory<T extends store$inventoryArgs<ExtArgs> = {}>(args?: Subset<T, store$inventoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$inventoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    staff<T extends store$staffArgs<ExtArgs> = {}>(args?: Subset<T, store$staffArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$staffPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    address<T extends addressDefaultArgs<ExtArgs> = {}>(args?: Subset<T, addressDefaultArgs<ExtArgs>>): Prisma__addressClient<$Result.GetResult<Prisma.$addressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the store model
   */
  interface storeFieldRefs {
    readonly store_id: FieldRef<"store", 'Int'>
    readonly manager_staff_id: FieldRef<"store", 'Int'>
    readonly address_id: FieldRef<"store", 'Int'>
    readonly last_update: FieldRef<"store", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * store findUnique
   */
  export type storeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * Filter, which store to fetch.
     */
    where: storeWhereUniqueInput
  }

  /**
   * store findUniqueOrThrow
   */
  export type storeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * Filter, which store to fetch.
     */
    where: storeWhereUniqueInput
  }

  /**
   * store findFirst
   */
  export type storeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * Filter, which store to fetch.
     */
    where?: storeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stores to fetch.
     */
    orderBy?: storeOrderByWithRelationInput | storeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for stores.
     */
    cursor?: storeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * store findFirstOrThrow
   */
  export type storeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * Filter, which store to fetch.
     */
    where?: storeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stores to fetch.
     */
    orderBy?: storeOrderByWithRelationInput | storeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for stores.
     */
    cursor?: storeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of stores.
     */
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * store findMany
   */
  export type storeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * Filter, which stores to fetch.
     */
    where?: storeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of stores to fetch.
     */
    orderBy?: storeOrderByWithRelationInput | storeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing stores.
     */
    cursor?: storeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` stores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` stores.
     */
    skip?: number
    distinct?: StoreScalarFieldEnum | StoreScalarFieldEnum[]
  }

  /**
   * store create
   */
  export type storeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * The data needed to create a store.
     */
    data: XOR<storeCreateInput, storeUncheckedCreateInput>
  }

  /**
   * store createMany
   */
  export type storeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many stores.
     */
    data: storeCreateManyInput | storeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * store createManyAndReturn
   */
  export type storeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * The data used to create many stores.
     */
    data: storeCreateManyInput | storeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * store update
   */
  export type storeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * The data needed to update a store.
     */
    data: XOR<storeUpdateInput, storeUncheckedUpdateInput>
    /**
     * Choose, which store to update.
     */
    where: storeWhereUniqueInput
  }

  /**
   * store updateMany
   */
  export type storeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update stores.
     */
    data: XOR<storeUpdateManyMutationInput, storeUncheckedUpdateManyInput>
    /**
     * Filter which stores to update
     */
    where?: storeWhereInput
    /**
     * Limit how many stores to update.
     */
    limit?: number
  }

  /**
   * store updateManyAndReturn
   */
  export type storeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * The data used to update stores.
     */
    data: XOR<storeUpdateManyMutationInput, storeUncheckedUpdateManyInput>
    /**
     * Filter which stores to update
     */
    where?: storeWhereInput
    /**
     * Limit how many stores to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * store upsert
   */
  export type storeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * The filter to search for the store to update in case it exists.
     */
    where: storeWhereUniqueInput
    /**
     * In case the store found by the `where` argument doesn't exist, create a new store with this data.
     */
    create: XOR<storeCreateInput, storeUncheckedCreateInput>
    /**
     * In case the store was found with the provided `where` argument, update it with this data.
     */
    update: XOR<storeUpdateInput, storeUncheckedUpdateInput>
  }

  /**
   * store delete
   */
  export type storeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
    /**
     * Filter which store to delete.
     */
    where: storeWhereUniqueInput
  }

  /**
   * store deleteMany
   */
  export type storeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which stores to delete
     */
    where?: storeWhereInput
    /**
     * Limit how many stores to delete.
     */
    limit?: number
  }

  /**
   * store.customer
   */
  export type store$customerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customer
     */
    select?: customerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the customer
     */
    omit?: customerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customerInclude<ExtArgs> | null
    where?: customerWhereInput
    orderBy?: customerOrderByWithRelationInput | customerOrderByWithRelationInput[]
    cursor?: customerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * store.inventory
   */
  export type store$inventoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the inventory
     */
    select?: inventorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the inventory
     */
    omit?: inventoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: inventoryInclude<ExtArgs> | null
    where?: inventoryWhereInput
    orderBy?: inventoryOrderByWithRelationInput | inventoryOrderByWithRelationInput[]
    cursor?: inventoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InventoryScalarFieldEnum | InventoryScalarFieldEnum[]
  }

  /**
   * store.staff
   */
  export type store$staffArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the staff
     */
    select?: staffSelect<ExtArgs> | null
    /**
     * Omit specific fields from the staff
     */
    omit?: staffOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: staffInclude<ExtArgs> | null
    where?: staffWhereInput
    orderBy?: staffOrderByWithRelationInput | staffOrderByWithRelationInput[]
    cursor?: staffWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StaffScalarFieldEnum | StaffScalarFieldEnum[]
  }

  /**
   * store without action
   */
  export type storeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the store
     */
    select?: storeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the store
     */
    omit?: storeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: storeInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ActorScalarFieldEnum: {
    actor_id: 'actor_id',
    first_name: 'first_name',
    last_name: 'last_name',
    last_update: 'last_update'
  };

  export type ActorScalarFieldEnum = (typeof ActorScalarFieldEnum)[keyof typeof ActorScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    address_id: 'address_id',
    address: 'address',
    address2: 'address2',
    district: 'district',
    city_id: 'city_id',
    postal_code: 'postal_code',
    phone: 'phone',
    last_update: 'last_update'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    category_id: 'category_id',
    name: 'name',
    last_update: 'last_update'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const CityScalarFieldEnum: {
    city_id: 'city_id',
    city: 'city',
    country_id: 'country_id',
    last_update: 'last_update'
  };

  export type CityScalarFieldEnum = (typeof CityScalarFieldEnum)[keyof typeof CityScalarFieldEnum]


  export const CountryScalarFieldEnum: {
    country_id: 'country_id',
    country: 'country',
    last_update: 'last_update'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    customer_id: 'customer_id',
    store_id: 'store_id',
    first_name: 'first_name',
    last_name: 'last_name',
    email: 'email',
    address_id: 'address_id',
    activebool: 'activebool',
    create_date: 'create_date',
    last_update: 'last_update',
    active: 'active'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const FilmScalarFieldEnum: {
    film_id: 'film_id',
    title: 'title',
    description: 'description',
    release_year: 'release_year',
    language_id: 'language_id',
    original_language_id: 'original_language_id',
    rental_duration: 'rental_duration',
    rental_rate: 'rental_rate',
    length: 'length',
    replacement_cost: 'replacement_cost',
    rating: 'rating',
    last_update: 'last_update',
    special_features: 'special_features'
  };

  export type FilmScalarFieldEnum = (typeof FilmScalarFieldEnum)[keyof typeof FilmScalarFieldEnum]


  export const Film_actorScalarFieldEnum: {
    actor_id: 'actor_id',
    film_id: 'film_id',
    last_update: 'last_update'
  };

  export type Film_actorScalarFieldEnum = (typeof Film_actorScalarFieldEnum)[keyof typeof Film_actorScalarFieldEnum]


  export const Film_categoryScalarFieldEnum: {
    film_id: 'film_id',
    category_id: 'category_id',
    last_update: 'last_update'
  };

  export type Film_categoryScalarFieldEnum = (typeof Film_categoryScalarFieldEnum)[keyof typeof Film_categoryScalarFieldEnum]


  export const Film_commentScalarFieldEnum: {
    comment_id: 'comment_id',
    post_id: 'post_id',
    customer_id: 'customer_id',
    content: 'content',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Film_commentScalarFieldEnum = (typeof Film_commentScalarFieldEnum)[keyof typeof Film_commentScalarFieldEnum]


  export const Film_postScalarFieldEnum: {
    post_id: 'post_id',
    film_id: 'film_id',
    content: 'content',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Film_postScalarFieldEnum = (typeof Film_postScalarFieldEnum)[keyof typeof Film_postScalarFieldEnum]


  export const InventoryScalarFieldEnum: {
    inventory_id: 'inventory_id',
    film_id: 'film_id',
    store_id: 'store_id',
    last_update: 'last_update'
  };

  export type InventoryScalarFieldEnum = (typeof InventoryScalarFieldEnum)[keyof typeof InventoryScalarFieldEnum]


  export const LanguageScalarFieldEnum: {
    language_id: 'language_id',
    name: 'name',
    last_update: 'last_update'
  };

  export type LanguageScalarFieldEnum = (typeof LanguageScalarFieldEnum)[keyof typeof LanguageScalarFieldEnum]


  export const MentionScalarFieldEnum: {
    mention_id: 'mention_id',
    created_at: 'created_at',
    comment_id: 'comment_id',
    mentioned_customer_id: 'mentioned_customer_id'
  };

  export type MentionScalarFieldEnum = (typeof MentionScalarFieldEnum)[keyof typeof MentionScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    notification_id: 'notification_id',
    mentioner_id: 'mentioner_id',
    mention_id: 'mention_id',
    content: 'content',
    created_at: 'created_at',
    is_read: 'is_read',
    read_at: 'read_at'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    payment_id: 'payment_id',
    customer_id: 'customer_id',
    staff_id: 'staff_id',
    rental_id: 'rental_id',
    amount: 'amount',
    payment_date: 'payment_date'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const Post_reactionScalarFieldEnum: {
    reaction_id: 'reaction_id',
    reaction_type: 'reaction_type',
    post_id: 'post_id',
    customer_id: 'customer_id',
    created_at: 'created_at'
  };

  export type Post_reactionScalarFieldEnum = (typeof Post_reactionScalarFieldEnum)[keyof typeof Post_reactionScalarFieldEnum]


  export const RentalScalarFieldEnum: {
    rental_id: 'rental_id',
    rental_date: 'rental_date',
    inventory_id: 'inventory_id',
    customer_id: 'customer_id',
    return_date: 'return_date',
    staff_id: 'staff_id',
    last_update: 'last_update'
  };

  export type RentalScalarFieldEnum = (typeof RentalScalarFieldEnum)[keyof typeof RentalScalarFieldEnum]


  export const StaffScalarFieldEnum: {
    staff_id: 'staff_id',
    first_name: 'first_name',
    last_name: 'last_name',
    address_id: 'address_id',
    email: 'email',
    store_id: 'store_id',
    active: 'active',
    username: 'username',
    password: 'password',
    last_update: 'last_update',
    picture: 'picture'
  };

  export type StaffScalarFieldEnum = (typeof StaffScalarFieldEnum)[keyof typeof StaffScalarFieldEnum]


  export const StoreScalarFieldEnum: {
    store_id: 'store_id',
    manager_staff_id: 'manager_staff_id',
    address_id: 'address_id',
    last_update: 'last_update'
  };

  export type StoreScalarFieldEnum = (typeof StoreScalarFieldEnum)[keyof typeof StoreScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'mpaa_rating'
   */
  export type Enummpaa_ratingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'mpaa_rating'>
    


  /**
   * Reference to a field of type 'mpaa_rating[]'
   */
  export type ListEnummpaa_ratingFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'mpaa_rating[]'>
    


  /**
   * Reference to a field of type 'reaction_type'
   */
  export type Enumreaction_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'reaction_type'>
    


  /**
   * Reference to a field of type 'reaction_type[]'
   */
  export type ListEnumreaction_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'reaction_type[]'>
    


  /**
   * Reference to a field of type 'Bytes'
   */
  export type BytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes'>
    


  /**
   * Reference to a field of type 'Bytes[]'
   */
  export type ListBytesFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Bytes[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type actorWhereInput = {
    AND?: actorWhereInput | actorWhereInput[]
    OR?: actorWhereInput[]
    NOT?: actorWhereInput | actorWhereInput[]
    actor_id?: IntFilter<"actor"> | number
    first_name?: StringFilter<"actor"> | string
    last_name?: StringFilter<"actor"> | string
    last_update?: DateTimeFilter<"actor"> | Date | string
    film_actor?: Film_actorListRelationFilter
  }

  export type actorOrderByWithRelationInput = {
    actor_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    last_update?: SortOrder
    film_actor?: film_actorOrderByRelationAggregateInput
  }

  export type actorWhereUniqueInput = Prisma.AtLeast<{
    actor_id?: number
    AND?: actorWhereInput | actorWhereInput[]
    OR?: actorWhereInput[]
    NOT?: actorWhereInput | actorWhereInput[]
    first_name?: StringFilter<"actor"> | string
    last_name?: StringFilter<"actor"> | string
    last_update?: DateTimeFilter<"actor"> | Date | string
    film_actor?: Film_actorListRelationFilter
  }, "actor_id">

  export type actorOrderByWithAggregationInput = {
    actor_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    last_update?: SortOrder
    _count?: actorCountOrderByAggregateInput
    _avg?: actorAvgOrderByAggregateInput
    _max?: actorMaxOrderByAggregateInput
    _min?: actorMinOrderByAggregateInput
    _sum?: actorSumOrderByAggregateInput
  }

  export type actorScalarWhereWithAggregatesInput = {
    AND?: actorScalarWhereWithAggregatesInput | actorScalarWhereWithAggregatesInput[]
    OR?: actorScalarWhereWithAggregatesInput[]
    NOT?: actorScalarWhereWithAggregatesInput | actorScalarWhereWithAggregatesInput[]
    actor_id?: IntWithAggregatesFilter<"actor"> | number
    first_name?: StringWithAggregatesFilter<"actor"> | string
    last_name?: StringWithAggregatesFilter<"actor"> | string
    last_update?: DateTimeWithAggregatesFilter<"actor"> | Date | string
  }

  export type addressWhereInput = {
    AND?: addressWhereInput | addressWhereInput[]
    OR?: addressWhereInput[]
    NOT?: addressWhereInput | addressWhereInput[]
    address_id?: IntFilter<"address"> | number
    address?: StringFilter<"address"> | string
    address2?: StringNullableFilter<"address"> | string | null
    district?: StringFilter<"address"> | string
    city_id?: IntFilter<"address"> | number
    postal_code?: StringNullableFilter<"address"> | string | null
    phone?: StringFilter<"address"> | string
    last_update?: DateTimeFilter<"address"> | Date | string
    city?: XOR<CityScalarRelationFilter, cityWhereInput>
    customer?: CustomerListRelationFilter
    staff?: StaffListRelationFilter
    store?: StoreListRelationFilter
  }

  export type addressOrderByWithRelationInput = {
    address_id?: SortOrder
    address?: SortOrder
    address2?: SortOrderInput | SortOrder
    district?: SortOrder
    city_id?: SortOrder
    postal_code?: SortOrderInput | SortOrder
    phone?: SortOrder
    last_update?: SortOrder
    city?: cityOrderByWithRelationInput
    customer?: customerOrderByRelationAggregateInput
    staff?: staffOrderByRelationAggregateInput
    store?: storeOrderByRelationAggregateInput
  }

  export type addressWhereUniqueInput = Prisma.AtLeast<{
    address_id?: number
    AND?: addressWhereInput | addressWhereInput[]
    OR?: addressWhereInput[]
    NOT?: addressWhereInput | addressWhereInput[]
    address?: StringFilter<"address"> | string
    address2?: StringNullableFilter<"address"> | string | null
    district?: StringFilter<"address"> | string
    city_id?: IntFilter<"address"> | number
    postal_code?: StringNullableFilter<"address"> | string | null
    phone?: StringFilter<"address"> | string
    last_update?: DateTimeFilter<"address"> | Date | string
    city?: XOR<CityScalarRelationFilter, cityWhereInput>
    customer?: CustomerListRelationFilter
    staff?: StaffListRelationFilter
    store?: StoreListRelationFilter
  }, "address_id">

  export type addressOrderByWithAggregationInput = {
    address_id?: SortOrder
    address?: SortOrder
    address2?: SortOrderInput | SortOrder
    district?: SortOrder
    city_id?: SortOrder
    postal_code?: SortOrderInput | SortOrder
    phone?: SortOrder
    last_update?: SortOrder
    _count?: addressCountOrderByAggregateInput
    _avg?: addressAvgOrderByAggregateInput
    _max?: addressMaxOrderByAggregateInput
    _min?: addressMinOrderByAggregateInput
    _sum?: addressSumOrderByAggregateInput
  }

  export type addressScalarWhereWithAggregatesInput = {
    AND?: addressScalarWhereWithAggregatesInput | addressScalarWhereWithAggregatesInput[]
    OR?: addressScalarWhereWithAggregatesInput[]
    NOT?: addressScalarWhereWithAggregatesInput | addressScalarWhereWithAggregatesInput[]
    address_id?: IntWithAggregatesFilter<"address"> | number
    address?: StringWithAggregatesFilter<"address"> | string
    address2?: StringNullableWithAggregatesFilter<"address"> | string | null
    district?: StringWithAggregatesFilter<"address"> | string
    city_id?: IntWithAggregatesFilter<"address"> | number
    postal_code?: StringNullableWithAggregatesFilter<"address"> | string | null
    phone?: StringWithAggregatesFilter<"address"> | string
    last_update?: DateTimeWithAggregatesFilter<"address"> | Date | string
  }

  export type categoryWhereInput = {
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    category_id?: IntFilter<"category"> | number
    name?: StringFilter<"category"> | string
    last_update?: DateTimeFilter<"category"> | Date | string
    film_category?: Film_categoryListRelationFilter
  }

  export type categoryOrderByWithRelationInput = {
    category_id?: SortOrder
    name?: SortOrder
    last_update?: SortOrder
    film_category?: film_categoryOrderByRelationAggregateInput
  }

  export type categoryWhereUniqueInput = Prisma.AtLeast<{
    category_id?: number
    AND?: categoryWhereInput | categoryWhereInput[]
    OR?: categoryWhereInput[]
    NOT?: categoryWhereInput | categoryWhereInput[]
    name?: StringFilter<"category"> | string
    last_update?: DateTimeFilter<"category"> | Date | string
    film_category?: Film_categoryListRelationFilter
  }, "category_id">

  export type categoryOrderByWithAggregationInput = {
    category_id?: SortOrder
    name?: SortOrder
    last_update?: SortOrder
    _count?: categoryCountOrderByAggregateInput
    _avg?: categoryAvgOrderByAggregateInput
    _max?: categoryMaxOrderByAggregateInput
    _min?: categoryMinOrderByAggregateInput
    _sum?: categorySumOrderByAggregateInput
  }

  export type categoryScalarWhereWithAggregatesInput = {
    AND?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    OR?: categoryScalarWhereWithAggregatesInput[]
    NOT?: categoryScalarWhereWithAggregatesInput | categoryScalarWhereWithAggregatesInput[]
    category_id?: IntWithAggregatesFilter<"category"> | number
    name?: StringWithAggregatesFilter<"category"> | string
    last_update?: DateTimeWithAggregatesFilter<"category"> | Date | string
  }

  export type cityWhereInput = {
    AND?: cityWhereInput | cityWhereInput[]
    OR?: cityWhereInput[]
    NOT?: cityWhereInput | cityWhereInput[]
    city_id?: IntFilter<"city"> | number
    city?: StringFilter<"city"> | string
    country_id?: IntFilter<"city"> | number
    last_update?: DateTimeFilter<"city"> | Date | string
    address?: AddressListRelationFilter
    country?: XOR<CountryScalarRelationFilter, countryWhereInput>
  }

  export type cityOrderByWithRelationInput = {
    city_id?: SortOrder
    city?: SortOrder
    country_id?: SortOrder
    last_update?: SortOrder
    address?: addressOrderByRelationAggregateInput
    country?: countryOrderByWithRelationInput
  }

  export type cityWhereUniqueInput = Prisma.AtLeast<{
    city_id?: number
    AND?: cityWhereInput | cityWhereInput[]
    OR?: cityWhereInput[]
    NOT?: cityWhereInput | cityWhereInput[]
    city?: StringFilter<"city"> | string
    country_id?: IntFilter<"city"> | number
    last_update?: DateTimeFilter<"city"> | Date | string
    address?: AddressListRelationFilter
    country?: XOR<CountryScalarRelationFilter, countryWhereInput>
  }, "city_id">

  export type cityOrderByWithAggregationInput = {
    city_id?: SortOrder
    city?: SortOrder
    country_id?: SortOrder
    last_update?: SortOrder
    _count?: cityCountOrderByAggregateInput
    _avg?: cityAvgOrderByAggregateInput
    _max?: cityMaxOrderByAggregateInput
    _min?: cityMinOrderByAggregateInput
    _sum?: citySumOrderByAggregateInput
  }

  export type cityScalarWhereWithAggregatesInput = {
    AND?: cityScalarWhereWithAggregatesInput | cityScalarWhereWithAggregatesInput[]
    OR?: cityScalarWhereWithAggregatesInput[]
    NOT?: cityScalarWhereWithAggregatesInput | cityScalarWhereWithAggregatesInput[]
    city_id?: IntWithAggregatesFilter<"city"> | number
    city?: StringWithAggregatesFilter<"city"> | string
    country_id?: IntWithAggregatesFilter<"city"> | number
    last_update?: DateTimeWithAggregatesFilter<"city"> | Date | string
  }

  export type countryWhereInput = {
    AND?: countryWhereInput | countryWhereInput[]
    OR?: countryWhereInput[]
    NOT?: countryWhereInput | countryWhereInput[]
    country_id?: IntFilter<"country"> | number
    country?: StringFilter<"country"> | string
    last_update?: DateTimeFilter<"country"> | Date | string
    city?: CityListRelationFilter
  }

  export type countryOrderByWithRelationInput = {
    country_id?: SortOrder
    country?: SortOrder
    last_update?: SortOrder
    city?: cityOrderByRelationAggregateInput
  }

  export type countryWhereUniqueInput = Prisma.AtLeast<{
    country_id?: number
    AND?: countryWhereInput | countryWhereInput[]
    OR?: countryWhereInput[]
    NOT?: countryWhereInput | countryWhereInput[]
    country?: StringFilter<"country"> | string
    last_update?: DateTimeFilter<"country"> | Date | string
    city?: CityListRelationFilter
  }, "country_id">

  export type countryOrderByWithAggregationInput = {
    country_id?: SortOrder
    country?: SortOrder
    last_update?: SortOrder
    _count?: countryCountOrderByAggregateInput
    _avg?: countryAvgOrderByAggregateInput
    _max?: countryMaxOrderByAggregateInput
    _min?: countryMinOrderByAggregateInput
    _sum?: countrySumOrderByAggregateInput
  }

  export type countryScalarWhereWithAggregatesInput = {
    AND?: countryScalarWhereWithAggregatesInput | countryScalarWhereWithAggregatesInput[]
    OR?: countryScalarWhereWithAggregatesInput[]
    NOT?: countryScalarWhereWithAggregatesInput | countryScalarWhereWithAggregatesInput[]
    country_id?: IntWithAggregatesFilter<"country"> | number
    country?: StringWithAggregatesFilter<"country"> | string
    last_update?: DateTimeWithAggregatesFilter<"country"> | Date | string
  }

  export type customerWhereInput = {
    AND?: customerWhereInput | customerWhereInput[]
    OR?: customerWhereInput[]
    NOT?: customerWhereInput | customerWhereInput[]
    customer_id?: IntFilter<"customer"> | number
    store_id?: IntFilter<"customer"> | number
    first_name?: StringFilter<"customer"> | string
    last_name?: StringFilter<"customer"> | string
    email?: StringNullableFilter<"customer"> | string | null
    address_id?: IntFilter<"customer"> | number
    activebool?: BoolFilter<"customer"> | boolean
    create_date?: DateTimeFilter<"customer"> | Date | string
    last_update?: DateTimeNullableFilter<"customer"> | Date | string | null
    active?: IntNullableFilter<"customer"> | number | null
    address?: XOR<AddressScalarRelationFilter, addressWhereInput>
    store?: XOR<StoreScalarRelationFilter, storeWhereInput>
    film_comment?: Film_commentListRelationFilter
    mention?: MentionListRelationFilter
    notification?: NotificationListRelationFilter
    post_reaction?: Post_reactionListRelationFilter
    rental?: RentalListRelationFilter
  }

  export type customerOrderByWithRelationInput = {
    customer_id?: SortOrder
    store_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrderInput | SortOrder
    address_id?: SortOrder
    activebool?: SortOrder
    create_date?: SortOrder
    last_update?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    address?: addressOrderByWithRelationInput
    store?: storeOrderByWithRelationInput
    film_comment?: film_commentOrderByRelationAggregateInput
    mention?: mentionOrderByRelationAggregateInput
    notification?: notificationOrderByRelationAggregateInput
    post_reaction?: post_reactionOrderByRelationAggregateInput
    rental?: rentalOrderByRelationAggregateInput
  }

  export type customerWhereUniqueInput = Prisma.AtLeast<{
    customer_id?: number
    AND?: customerWhereInput | customerWhereInput[]
    OR?: customerWhereInput[]
    NOT?: customerWhereInput | customerWhereInput[]
    store_id?: IntFilter<"customer"> | number
    first_name?: StringFilter<"customer"> | string
    last_name?: StringFilter<"customer"> | string
    email?: StringNullableFilter<"customer"> | string | null
    address_id?: IntFilter<"customer"> | number
    activebool?: BoolFilter<"customer"> | boolean
    create_date?: DateTimeFilter<"customer"> | Date | string
    last_update?: DateTimeNullableFilter<"customer"> | Date | string | null
    active?: IntNullableFilter<"customer"> | number | null
    address?: XOR<AddressScalarRelationFilter, addressWhereInput>
    store?: XOR<StoreScalarRelationFilter, storeWhereInput>
    film_comment?: Film_commentListRelationFilter
    mention?: MentionListRelationFilter
    notification?: NotificationListRelationFilter
    post_reaction?: Post_reactionListRelationFilter
    rental?: RentalListRelationFilter
  }, "customer_id">

  export type customerOrderByWithAggregationInput = {
    customer_id?: SortOrder
    store_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrderInput | SortOrder
    address_id?: SortOrder
    activebool?: SortOrder
    create_date?: SortOrder
    last_update?: SortOrderInput | SortOrder
    active?: SortOrderInput | SortOrder
    _count?: customerCountOrderByAggregateInput
    _avg?: customerAvgOrderByAggregateInput
    _max?: customerMaxOrderByAggregateInput
    _min?: customerMinOrderByAggregateInput
    _sum?: customerSumOrderByAggregateInput
  }

  export type customerScalarWhereWithAggregatesInput = {
    AND?: customerScalarWhereWithAggregatesInput | customerScalarWhereWithAggregatesInput[]
    OR?: customerScalarWhereWithAggregatesInput[]
    NOT?: customerScalarWhereWithAggregatesInput | customerScalarWhereWithAggregatesInput[]
    customer_id?: IntWithAggregatesFilter<"customer"> | number
    store_id?: IntWithAggregatesFilter<"customer"> | number
    first_name?: StringWithAggregatesFilter<"customer"> | string
    last_name?: StringWithAggregatesFilter<"customer"> | string
    email?: StringNullableWithAggregatesFilter<"customer"> | string | null
    address_id?: IntWithAggregatesFilter<"customer"> | number
    activebool?: BoolWithAggregatesFilter<"customer"> | boolean
    create_date?: DateTimeWithAggregatesFilter<"customer"> | Date | string
    last_update?: DateTimeNullableWithAggregatesFilter<"customer"> | Date | string | null
    active?: IntNullableWithAggregatesFilter<"customer"> | number | null
  }

  export type filmWhereInput = {
    AND?: filmWhereInput | filmWhereInput[]
    OR?: filmWhereInput[]
    NOT?: filmWhereInput | filmWhereInput[]
    film_id?: IntFilter<"film"> | number
    title?: StringFilter<"film"> | string
    description?: StringNullableFilter<"film"> | string | null
    release_year?: IntNullableFilter<"film"> | number | null
    language_id?: IntFilter<"film"> | number
    original_language_id?: IntNullableFilter<"film"> | number | null
    rental_duration?: IntFilter<"film"> | number
    rental_rate?: DecimalFilter<"film"> | Decimal | DecimalJsLike | number | string
    length?: IntNullableFilter<"film"> | number | null
    replacement_cost?: DecimalFilter<"film"> | Decimal | DecimalJsLike | number | string
    rating?: Enummpaa_ratingNullableFilter<"film"> | $Enums.mpaa_rating | null
    last_update?: DateTimeFilter<"film"> | Date | string
    special_features?: StringNullableListFilter<"film">
    language_film_language_idTolanguage?: XOR<LanguageScalarRelationFilter, languageWhereInput>
    language_film_original_language_idTolanguage?: XOR<LanguageNullableScalarRelationFilter, languageWhereInput> | null
    film_actor?: Film_actorListRelationFilter
    film_category?: Film_categoryListRelationFilter
    film_post?: Film_postListRelationFilter
    inventory?: InventoryListRelationFilter
  }

  export type filmOrderByWithRelationInput = {
    film_id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    release_year?: SortOrderInput | SortOrder
    language_id?: SortOrder
    original_language_id?: SortOrderInput | SortOrder
    rental_duration?: SortOrder
    rental_rate?: SortOrder
    length?: SortOrderInput | SortOrder
    replacement_cost?: SortOrder
    rating?: SortOrderInput | SortOrder
    last_update?: SortOrder
    special_features?: SortOrder
    language_film_language_idTolanguage?: languageOrderByWithRelationInput
    language_film_original_language_idTolanguage?: languageOrderByWithRelationInput
    film_actor?: film_actorOrderByRelationAggregateInput
    film_category?: film_categoryOrderByRelationAggregateInput
    film_post?: film_postOrderByRelationAggregateInput
    inventory?: inventoryOrderByRelationAggregateInput
  }

  export type filmWhereUniqueInput = Prisma.AtLeast<{
    film_id?: number
    AND?: filmWhereInput | filmWhereInput[]
    OR?: filmWhereInput[]
    NOT?: filmWhereInput | filmWhereInput[]
    title?: StringFilter<"film"> | string
    description?: StringNullableFilter<"film"> | string | null
    release_year?: IntNullableFilter<"film"> | number | null
    language_id?: IntFilter<"film"> | number
    original_language_id?: IntNullableFilter<"film"> | number | null
    rental_duration?: IntFilter<"film"> | number
    rental_rate?: DecimalFilter<"film"> | Decimal | DecimalJsLike | number | string
    length?: IntNullableFilter<"film"> | number | null
    replacement_cost?: DecimalFilter<"film"> | Decimal | DecimalJsLike | number | string
    rating?: Enummpaa_ratingNullableFilter<"film"> | $Enums.mpaa_rating | null
    last_update?: DateTimeFilter<"film"> | Date | string
    special_features?: StringNullableListFilter<"film">
    language_film_language_idTolanguage?: XOR<LanguageScalarRelationFilter, languageWhereInput>
    language_film_original_language_idTolanguage?: XOR<LanguageNullableScalarRelationFilter, languageWhereInput> | null
    film_actor?: Film_actorListRelationFilter
    film_category?: Film_categoryListRelationFilter
    film_post?: Film_postListRelationFilter
    inventory?: InventoryListRelationFilter
  }, "film_id">

  export type filmOrderByWithAggregationInput = {
    film_id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    release_year?: SortOrderInput | SortOrder
    language_id?: SortOrder
    original_language_id?: SortOrderInput | SortOrder
    rental_duration?: SortOrder
    rental_rate?: SortOrder
    length?: SortOrderInput | SortOrder
    replacement_cost?: SortOrder
    rating?: SortOrderInput | SortOrder
    last_update?: SortOrder
    special_features?: SortOrder
    _count?: filmCountOrderByAggregateInput
    _avg?: filmAvgOrderByAggregateInput
    _max?: filmMaxOrderByAggregateInput
    _min?: filmMinOrderByAggregateInput
    _sum?: filmSumOrderByAggregateInput
  }

  export type filmScalarWhereWithAggregatesInput = {
    AND?: filmScalarWhereWithAggregatesInput | filmScalarWhereWithAggregatesInput[]
    OR?: filmScalarWhereWithAggregatesInput[]
    NOT?: filmScalarWhereWithAggregatesInput | filmScalarWhereWithAggregatesInput[]
    film_id?: IntWithAggregatesFilter<"film"> | number
    title?: StringWithAggregatesFilter<"film"> | string
    description?: StringNullableWithAggregatesFilter<"film"> | string | null
    release_year?: IntNullableWithAggregatesFilter<"film"> | number | null
    language_id?: IntWithAggregatesFilter<"film"> | number
    original_language_id?: IntNullableWithAggregatesFilter<"film"> | number | null
    rental_duration?: IntWithAggregatesFilter<"film"> | number
    rental_rate?: DecimalWithAggregatesFilter<"film"> | Decimal | DecimalJsLike | number | string
    length?: IntNullableWithAggregatesFilter<"film"> | number | null
    replacement_cost?: DecimalWithAggregatesFilter<"film"> | Decimal | DecimalJsLike | number | string
    rating?: Enummpaa_ratingNullableWithAggregatesFilter<"film"> | $Enums.mpaa_rating | null
    last_update?: DateTimeWithAggregatesFilter<"film"> | Date | string
    special_features?: StringNullableListFilter<"film">
  }

  export type film_actorWhereInput = {
    AND?: film_actorWhereInput | film_actorWhereInput[]
    OR?: film_actorWhereInput[]
    NOT?: film_actorWhereInput | film_actorWhereInput[]
    actor_id?: IntFilter<"film_actor"> | number
    film_id?: IntFilter<"film_actor"> | number
    last_update?: DateTimeFilter<"film_actor"> | Date | string
    actor?: XOR<ActorScalarRelationFilter, actorWhereInput>
    film?: XOR<FilmScalarRelationFilter, filmWhereInput>
  }

  export type film_actorOrderByWithRelationInput = {
    actor_id?: SortOrder
    film_id?: SortOrder
    last_update?: SortOrder
    actor?: actorOrderByWithRelationInput
    film?: filmOrderByWithRelationInput
  }

  export type film_actorWhereUniqueInput = Prisma.AtLeast<{
    actor_id_film_id?: film_actorActor_idFilm_idCompoundUniqueInput
    AND?: film_actorWhereInput | film_actorWhereInput[]
    OR?: film_actorWhereInput[]
    NOT?: film_actorWhereInput | film_actorWhereInput[]
    actor_id?: IntFilter<"film_actor"> | number
    film_id?: IntFilter<"film_actor"> | number
    last_update?: DateTimeFilter<"film_actor"> | Date | string
    actor?: XOR<ActorScalarRelationFilter, actorWhereInput>
    film?: XOR<FilmScalarRelationFilter, filmWhereInput>
  }, "actor_id_film_id">

  export type film_actorOrderByWithAggregationInput = {
    actor_id?: SortOrder
    film_id?: SortOrder
    last_update?: SortOrder
    _count?: film_actorCountOrderByAggregateInput
    _avg?: film_actorAvgOrderByAggregateInput
    _max?: film_actorMaxOrderByAggregateInput
    _min?: film_actorMinOrderByAggregateInput
    _sum?: film_actorSumOrderByAggregateInput
  }

  export type film_actorScalarWhereWithAggregatesInput = {
    AND?: film_actorScalarWhereWithAggregatesInput | film_actorScalarWhereWithAggregatesInput[]
    OR?: film_actorScalarWhereWithAggregatesInput[]
    NOT?: film_actorScalarWhereWithAggregatesInput | film_actorScalarWhereWithAggregatesInput[]
    actor_id?: IntWithAggregatesFilter<"film_actor"> | number
    film_id?: IntWithAggregatesFilter<"film_actor"> | number
    last_update?: DateTimeWithAggregatesFilter<"film_actor"> | Date | string
  }

  export type film_categoryWhereInput = {
    AND?: film_categoryWhereInput | film_categoryWhereInput[]
    OR?: film_categoryWhereInput[]
    NOT?: film_categoryWhereInput | film_categoryWhereInput[]
    film_id?: IntFilter<"film_category"> | number
    category_id?: IntFilter<"film_category"> | number
    last_update?: DateTimeFilter<"film_category"> | Date | string
    category?: XOR<CategoryScalarRelationFilter, categoryWhereInput>
    film?: XOR<FilmScalarRelationFilter, filmWhereInput>
  }

  export type film_categoryOrderByWithRelationInput = {
    film_id?: SortOrder
    category_id?: SortOrder
    last_update?: SortOrder
    category?: categoryOrderByWithRelationInput
    film?: filmOrderByWithRelationInput
  }

  export type film_categoryWhereUniqueInput = Prisma.AtLeast<{
    film_id_category_id?: film_categoryFilm_idCategory_idCompoundUniqueInput
    AND?: film_categoryWhereInput | film_categoryWhereInput[]
    OR?: film_categoryWhereInput[]
    NOT?: film_categoryWhereInput | film_categoryWhereInput[]
    film_id?: IntFilter<"film_category"> | number
    category_id?: IntFilter<"film_category"> | number
    last_update?: DateTimeFilter<"film_category"> | Date | string
    category?: XOR<CategoryScalarRelationFilter, categoryWhereInput>
    film?: XOR<FilmScalarRelationFilter, filmWhereInput>
  }, "film_id_category_id">

  export type film_categoryOrderByWithAggregationInput = {
    film_id?: SortOrder
    category_id?: SortOrder
    last_update?: SortOrder
    _count?: film_categoryCountOrderByAggregateInput
    _avg?: film_categoryAvgOrderByAggregateInput
    _max?: film_categoryMaxOrderByAggregateInput
    _min?: film_categoryMinOrderByAggregateInput
    _sum?: film_categorySumOrderByAggregateInput
  }

  export type film_categoryScalarWhereWithAggregatesInput = {
    AND?: film_categoryScalarWhereWithAggregatesInput | film_categoryScalarWhereWithAggregatesInput[]
    OR?: film_categoryScalarWhereWithAggregatesInput[]
    NOT?: film_categoryScalarWhereWithAggregatesInput | film_categoryScalarWhereWithAggregatesInput[]
    film_id?: IntWithAggregatesFilter<"film_category"> | number
    category_id?: IntWithAggregatesFilter<"film_category"> | number
    last_update?: DateTimeWithAggregatesFilter<"film_category"> | Date | string
  }

  export type film_commentWhereInput = {
    AND?: film_commentWhereInput | film_commentWhereInput[]
    OR?: film_commentWhereInput[]
    NOT?: film_commentWhereInput | film_commentWhereInput[]
    comment_id?: IntFilter<"film_comment"> | number
    post_id?: IntFilter<"film_comment"> | number
    customer_id?: IntFilter<"film_comment"> | number
    content?: StringFilter<"film_comment"> | string
    created_at?: DateTimeFilter<"film_comment"> | Date | string
    updated_at?: DateTimeFilter<"film_comment"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, customerWhereInput>
    film_post?: XOR<Film_postScalarRelationFilter, film_postWhereInput>
    mention?: MentionListRelationFilter
  }

  export type film_commentOrderByWithRelationInput = {
    comment_id?: SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    customer?: customerOrderByWithRelationInput
    film_post?: film_postOrderByWithRelationInput
    mention?: mentionOrderByRelationAggregateInput
  }

  export type film_commentWhereUniqueInput = Prisma.AtLeast<{
    comment_id?: number
    AND?: film_commentWhereInput | film_commentWhereInput[]
    OR?: film_commentWhereInput[]
    NOT?: film_commentWhereInput | film_commentWhereInput[]
    post_id?: IntFilter<"film_comment"> | number
    customer_id?: IntFilter<"film_comment"> | number
    content?: StringFilter<"film_comment"> | string
    created_at?: DateTimeFilter<"film_comment"> | Date | string
    updated_at?: DateTimeFilter<"film_comment"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, customerWhereInput>
    film_post?: XOR<Film_postScalarRelationFilter, film_postWhereInput>
    mention?: MentionListRelationFilter
  }, "comment_id">

  export type film_commentOrderByWithAggregationInput = {
    comment_id?: SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: film_commentCountOrderByAggregateInput
    _avg?: film_commentAvgOrderByAggregateInput
    _max?: film_commentMaxOrderByAggregateInput
    _min?: film_commentMinOrderByAggregateInput
    _sum?: film_commentSumOrderByAggregateInput
  }

  export type film_commentScalarWhereWithAggregatesInput = {
    AND?: film_commentScalarWhereWithAggregatesInput | film_commentScalarWhereWithAggregatesInput[]
    OR?: film_commentScalarWhereWithAggregatesInput[]
    NOT?: film_commentScalarWhereWithAggregatesInput | film_commentScalarWhereWithAggregatesInput[]
    comment_id?: IntWithAggregatesFilter<"film_comment"> | number
    post_id?: IntWithAggregatesFilter<"film_comment"> | number
    customer_id?: IntWithAggregatesFilter<"film_comment"> | number
    content?: StringWithAggregatesFilter<"film_comment"> | string
    created_at?: DateTimeWithAggregatesFilter<"film_comment"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"film_comment"> | Date | string
  }

  export type film_postWhereInput = {
    AND?: film_postWhereInput | film_postWhereInput[]
    OR?: film_postWhereInput[]
    NOT?: film_postWhereInput | film_postWhereInput[]
    post_id?: IntFilter<"film_post"> | number
    film_id?: IntFilter<"film_post"> | number
    content?: StringFilter<"film_post"> | string
    created_at?: DateTimeFilter<"film_post"> | Date | string
    updated_at?: DateTimeFilter<"film_post"> | Date | string
    film_comment?: Film_commentListRelationFilter
    film?: XOR<FilmNullableScalarRelationFilter, filmWhereInput> | null
    post_reaction?: Post_reactionListRelationFilter
  }

  export type film_postOrderByWithRelationInput = {
    post_id?: SortOrder
    film_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    film_comment?: film_commentOrderByRelationAggregateInput
    film?: filmOrderByWithRelationInput
    post_reaction?: post_reactionOrderByRelationAggregateInput
  }

  export type film_postWhereUniqueInput = Prisma.AtLeast<{
    post_id?: number
    AND?: film_postWhereInput | film_postWhereInput[]
    OR?: film_postWhereInput[]
    NOT?: film_postWhereInput | film_postWhereInput[]
    film_id?: IntFilter<"film_post"> | number
    content?: StringFilter<"film_post"> | string
    created_at?: DateTimeFilter<"film_post"> | Date | string
    updated_at?: DateTimeFilter<"film_post"> | Date | string
    film_comment?: Film_commentListRelationFilter
    film?: XOR<FilmNullableScalarRelationFilter, filmWhereInput> | null
    post_reaction?: Post_reactionListRelationFilter
  }, "post_id">

  export type film_postOrderByWithAggregationInput = {
    post_id?: SortOrder
    film_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: film_postCountOrderByAggregateInput
    _avg?: film_postAvgOrderByAggregateInput
    _max?: film_postMaxOrderByAggregateInput
    _min?: film_postMinOrderByAggregateInput
    _sum?: film_postSumOrderByAggregateInput
  }

  export type film_postScalarWhereWithAggregatesInput = {
    AND?: film_postScalarWhereWithAggregatesInput | film_postScalarWhereWithAggregatesInput[]
    OR?: film_postScalarWhereWithAggregatesInput[]
    NOT?: film_postScalarWhereWithAggregatesInput | film_postScalarWhereWithAggregatesInput[]
    post_id?: IntWithAggregatesFilter<"film_post"> | number
    film_id?: IntWithAggregatesFilter<"film_post"> | number
    content?: StringWithAggregatesFilter<"film_post"> | string
    created_at?: DateTimeWithAggregatesFilter<"film_post"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"film_post"> | Date | string
  }

  export type inventoryWhereInput = {
    AND?: inventoryWhereInput | inventoryWhereInput[]
    OR?: inventoryWhereInput[]
    NOT?: inventoryWhereInput | inventoryWhereInput[]
    inventory_id?: IntFilter<"inventory"> | number
    film_id?: IntFilter<"inventory"> | number
    store_id?: IntFilter<"inventory"> | number
    last_update?: DateTimeFilter<"inventory"> | Date | string
    film?: XOR<FilmScalarRelationFilter, filmWhereInput>
    store?: XOR<StoreScalarRelationFilter, storeWhereInput>
    rental?: RentalListRelationFilter
  }

  export type inventoryOrderByWithRelationInput = {
    inventory_id?: SortOrder
    film_id?: SortOrder
    store_id?: SortOrder
    last_update?: SortOrder
    film?: filmOrderByWithRelationInput
    store?: storeOrderByWithRelationInput
    rental?: rentalOrderByRelationAggregateInput
  }

  export type inventoryWhereUniqueInput = Prisma.AtLeast<{
    inventory_id?: number
    AND?: inventoryWhereInput | inventoryWhereInput[]
    OR?: inventoryWhereInput[]
    NOT?: inventoryWhereInput | inventoryWhereInput[]
    film_id?: IntFilter<"inventory"> | number
    store_id?: IntFilter<"inventory"> | number
    last_update?: DateTimeFilter<"inventory"> | Date | string
    film?: XOR<FilmScalarRelationFilter, filmWhereInput>
    store?: XOR<StoreScalarRelationFilter, storeWhereInput>
    rental?: RentalListRelationFilter
  }, "inventory_id">

  export type inventoryOrderByWithAggregationInput = {
    inventory_id?: SortOrder
    film_id?: SortOrder
    store_id?: SortOrder
    last_update?: SortOrder
    _count?: inventoryCountOrderByAggregateInput
    _avg?: inventoryAvgOrderByAggregateInput
    _max?: inventoryMaxOrderByAggregateInput
    _min?: inventoryMinOrderByAggregateInput
    _sum?: inventorySumOrderByAggregateInput
  }

  export type inventoryScalarWhereWithAggregatesInput = {
    AND?: inventoryScalarWhereWithAggregatesInput | inventoryScalarWhereWithAggregatesInput[]
    OR?: inventoryScalarWhereWithAggregatesInput[]
    NOT?: inventoryScalarWhereWithAggregatesInput | inventoryScalarWhereWithAggregatesInput[]
    inventory_id?: IntWithAggregatesFilter<"inventory"> | number
    film_id?: IntWithAggregatesFilter<"inventory"> | number
    store_id?: IntWithAggregatesFilter<"inventory"> | number
    last_update?: DateTimeWithAggregatesFilter<"inventory"> | Date | string
  }

  export type languageWhereInput = {
    AND?: languageWhereInput | languageWhereInput[]
    OR?: languageWhereInput[]
    NOT?: languageWhereInput | languageWhereInput[]
    language_id?: IntFilter<"language"> | number
    name?: StringFilter<"language"> | string
    last_update?: DateTimeFilter<"language"> | Date | string
    film_film_language_idTolanguage?: FilmListRelationFilter
    film_film_original_language_idTolanguage?: FilmListRelationFilter
  }

  export type languageOrderByWithRelationInput = {
    language_id?: SortOrder
    name?: SortOrder
    last_update?: SortOrder
    film_film_language_idTolanguage?: filmOrderByRelationAggregateInput
    film_film_original_language_idTolanguage?: filmOrderByRelationAggregateInput
  }

  export type languageWhereUniqueInput = Prisma.AtLeast<{
    language_id?: number
    AND?: languageWhereInput | languageWhereInput[]
    OR?: languageWhereInput[]
    NOT?: languageWhereInput | languageWhereInput[]
    name?: StringFilter<"language"> | string
    last_update?: DateTimeFilter<"language"> | Date | string
    film_film_language_idTolanguage?: FilmListRelationFilter
    film_film_original_language_idTolanguage?: FilmListRelationFilter
  }, "language_id">

  export type languageOrderByWithAggregationInput = {
    language_id?: SortOrder
    name?: SortOrder
    last_update?: SortOrder
    _count?: languageCountOrderByAggregateInput
    _avg?: languageAvgOrderByAggregateInput
    _max?: languageMaxOrderByAggregateInput
    _min?: languageMinOrderByAggregateInput
    _sum?: languageSumOrderByAggregateInput
  }

  export type languageScalarWhereWithAggregatesInput = {
    AND?: languageScalarWhereWithAggregatesInput | languageScalarWhereWithAggregatesInput[]
    OR?: languageScalarWhereWithAggregatesInput[]
    NOT?: languageScalarWhereWithAggregatesInput | languageScalarWhereWithAggregatesInput[]
    language_id?: IntWithAggregatesFilter<"language"> | number
    name?: StringWithAggregatesFilter<"language"> | string
    last_update?: DateTimeWithAggregatesFilter<"language"> | Date | string
  }

  export type mentionWhereInput = {
    AND?: mentionWhereInput | mentionWhereInput[]
    OR?: mentionWhereInput[]
    NOT?: mentionWhereInput | mentionWhereInput[]
    mention_id?: IntFilter<"mention"> | number
    created_at?: DateTimeFilter<"mention"> | Date | string
    comment_id?: IntFilter<"mention"> | number
    mentioned_customer_id?: IntFilter<"mention"> | number
    film_comment?: XOR<Film_commentScalarRelationFilter, film_commentWhereInput>
    customer?: XOR<CustomerScalarRelationFilter, customerWhereInput>
    notification?: XOR<NotificationNullableScalarRelationFilter, notificationWhereInput> | null
  }

  export type mentionOrderByWithRelationInput = {
    mention_id?: SortOrder
    created_at?: SortOrder
    comment_id?: SortOrder
    mentioned_customer_id?: SortOrder
    film_comment?: film_commentOrderByWithRelationInput
    customer?: customerOrderByWithRelationInput
    notification?: notificationOrderByWithRelationInput
  }

  export type mentionWhereUniqueInput = Prisma.AtLeast<{
    mention_id?: number
    AND?: mentionWhereInput | mentionWhereInput[]
    OR?: mentionWhereInput[]
    NOT?: mentionWhereInput | mentionWhereInput[]
    created_at?: DateTimeFilter<"mention"> | Date | string
    comment_id?: IntFilter<"mention"> | number
    mentioned_customer_id?: IntFilter<"mention"> | number
    film_comment?: XOR<Film_commentScalarRelationFilter, film_commentWhereInput>
    customer?: XOR<CustomerScalarRelationFilter, customerWhereInput>
    notification?: XOR<NotificationNullableScalarRelationFilter, notificationWhereInput> | null
  }, "mention_id">

  export type mentionOrderByWithAggregationInput = {
    mention_id?: SortOrder
    created_at?: SortOrder
    comment_id?: SortOrder
    mentioned_customer_id?: SortOrder
    _count?: mentionCountOrderByAggregateInput
    _avg?: mentionAvgOrderByAggregateInput
    _max?: mentionMaxOrderByAggregateInput
    _min?: mentionMinOrderByAggregateInput
    _sum?: mentionSumOrderByAggregateInput
  }

  export type mentionScalarWhereWithAggregatesInput = {
    AND?: mentionScalarWhereWithAggregatesInput | mentionScalarWhereWithAggregatesInput[]
    OR?: mentionScalarWhereWithAggregatesInput[]
    NOT?: mentionScalarWhereWithAggregatesInput | mentionScalarWhereWithAggregatesInput[]
    mention_id?: IntWithAggregatesFilter<"mention"> | number
    created_at?: DateTimeWithAggregatesFilter<"mention"> | Date | string
    comment_id?: IntWithAggregatesFilter<"mention"> | number
    mentioned_customer_id?: IntWithAggregatesFilter<"mention"> | number
  }

  export type notificationWhereInput = {
    AND?: notificationWhereInput | notificationWhereInput[]
    OR?: notificationWhereInput[]
    NOT?: notificationWhereInput | notificationWhereInput[]
    notification_id?: IntFilter<"notification"> | number
    mentioner_id?: IntFilter<"notification"> | number
    mention_id?: IntFilter<"notification"> | number
    content?: StringFilter<"notification"> | string
    created_at?: DateTimeFilter<"notification"> | Date | string
    is_read?: BoolFilter<"notification"> | boolean
    read_at?: DateTimeFilter<"notification"> | Date | string
    mention?: XOR<MentionScalarRelationFilter, mentionWhereInput>
    customer?: XOR<CustomerScalarRelationFilter, customerWhereInput>
  }

  export type notificationOrderByWithRelationInput = {
    notification_id?: SortOrder
    mentioner_id?: SortOrder
    mention_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    is_read?: SortOrder
    read_at?: SortOrder
    mention?: mentionOrderByWithRelationInput
    customer?: customerOrderByWithRelationInput
  }

  export type notificationWhereUniqueInput = Prisma.AtLeast<{
    notification_id?: number
    mention_id?: number
    AND?: notificationWhereInput | notificationWhereInput[]
    OR?: notificationWhereInput[]
    NOT?: notificationWhereInput | notificationWhereInput[]
    mentioner_id?: IntFilter<"notification"> | number
    content?: StringFilter<"notification"> | string
    created_at?: DateTimeFilter<"notification"> | Date | string
    is_read?: BoolFilter<"notification"> | boolean
    read_at?: DateTimeFilter<"notification"> | Date | string
    mention?: XOR<MentionScalarRelationFilter, mentionWhereInput>
    customer?: XOR<CustomerScalarRelationFilter, customerWhereInput>
  }, "notification_id" | "mention_id">

  export type notificationOrderByWithAggregationInput = {
    notification_id?: SortOrder
    mentioner_id?: SortOrder
    mention_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    is_read?: SortOrder
    read_at?: SortOrder
    _count?: notificationCountOrderByAggregateInput
    _avg?: notificationAvgOrderByAggregateInput
    _max?: notificationMaxOrderByAggregateInput
    _min?: notificationMinOrderByAggregateInput
    _sum?: notificationSumOrderByAggregateInput
  }

  export type notificationScalarWhereWithAggregatesInput = {
    AND?: notificationScalarWhereWithAggregatesInput | notificationScalarWhereWithAggregatesInput[]
    OR?: notificationScalarWhereWithAggregatesInput[]
    NOT?: notificationScalarWhereWithAggregatesInput | notificationScalarWhereWithAggregatesInput[]
    notification_id?: IntWithAggregatesFilter<"notification"> | number
    mentioner_id?: IntWithAggregatesFilter<"notification"> | number
    mention_id?: IntWithAggregatesFilter<"notification"> | number
    content?: StringWithAggregatesFilter<"notification"> | string
    created_at?: DateTimeWithAggregatesFilter<"notification"> | Date | string
    is_read?: BoolWithAggregatesFilter<"notification"> | boolean
    read_at?: DateTimeWithAggregatesFilter<"notification"> | Date | string
  }

  export type paymentWhereInput = {
    AND?: paymentWhereInput | paymentWhereInput[]
    OR?: paymentWhereInput[]
    NOT?: paymentWhereInput | paymentWhereInput[]
    payment_id?: IntFilter<"payment"> | number
    customer_id?: IntFilter<"payment"> | number
    staff_id?: IntFilter<"payment"> | number
    rental_id?: IntFilter<"payment"> | number
    amount?: DecimalFilter<"payment"> | Decimal | DecimalJsLike | number | string
    payment_date?: DateTimeFilter<"payment"> | Date | string
  }

  export type paymentOrderByWithRelationInput = {
    payment_id?: SortOrder
    customer_id?: SortOrder
    staff_id?: SortOrder
    rental_id?: SortOrder
    amount?: SortOrder
    payment_date?: SortOrder
  }

  export type paymentWhereUniqueInput = Prisma.AtLeast<{
    payment_date_payment_id?: paymentPayment_datePayment_idCompoundUniqueInput
    AND?: paymentWhereInput | paymentWhereInput[]
    OR?: paymentWhereInput[]
    NOT?: paymentWhereInput | paymentWhereInput[]
    payment_id?: IntFilter<"payment"> | number
    customer_id?: IntFilter<"payment"> | number
    staff_id?: IntFilter<"payment"> | number
    rental_id?: IntFilter<"payment"> | number
    amount?: DecimalFilter<"payment"> | Decimal | DecimalJsLike | number | string
    payment_date?: DateTimeFilter<"payment"> | Date | string
  }, "payment_date_payment_id">

  export type paymentOrderByWithAggregationInput = {
    payment_id?: SortOrder
    customer_id?: SortOrder
    staff_id?: SortOrder
    rental_id?: SortOrder
    amount?: SortOrder
    payment_date?: SortOrder
    _count?: paymentCountOrderByAggregateInput
    _avg?: paymentAvgOrderByAggregateInput
    _max?: paymentMaxOrderByAggregateInput
    _min?: paymentMinOrderByAggregateInput
    _sum?: paymentSumOrderByAggregateInput
  }

  export type paymentScalarWhereWithAggregatesInput = {
    AND?: paymentScalarWhereWithAggregatesInput | paymentScalarWhereWithAggregatesInput[]
    OR?: paymentScalarWhereWithAggregatesInput[]
    NOT?: paymentScalarWhereWithAggregatesInput | paymentScalarWhereWithAggregatesInput[]
    payment_id?: IntWithAggregatesFilter<"payment"> | number
    customer_id?: IntWithAggregatesFilter<"payment"> | number
    staff_id?: IntWithAggregatesFilter<"payment"> | number
    rental_id?: IntWithAggregatesFilter<"payment"> | number
    amount?: DecimalWithAggregatesFilter<"payment"> | Decimal | DecimalJsLike | number | string
    payment_date?: DateTimeWithAggregatesFilter<"payment"> | Date | string
  }

  export type post_reactionWhereInput = {
    AND?: post_reactionWhereInput | post_reactionWhereInput[]
    OR?: post_reactionWhereInput[]
    NOT?: post_reactionWhereInput | post_reactionWhereInput[]
    reaction_id?: IntFilter<"post_reaction"> | number
    reaction_type?: Enumreaction_typeNullableFilter<"post_reaction"> | $Enums.reaction_type | null
    post_id?: IntFilter<"post_reaction"> | number
    customer_id?: IntFilter<"post_reaction"> | number
    created_at?: DateTimeFilter<"post_reaction"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, customerWhereInput>
    film_post?: XOR<Film_postScalarRelationFilter, film_postWhereInput>
  }

  export type post_reactionOrderByWithRelationInput = {
    reaction_id?: SortOrder
    reaction_type?: SortOrderInput | SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
    created_at?: SortOrder
    customer?: customerOrderByWithRelationInput
    film_post?: film_postOrderByWithRelationInput
  }

  export type post_reactionWhereUniqueInput = Prisma.AtLeast<{
    reaction_id?: number
    post_id_customer_id?: post_reactionPost_idCustomer_idCompoundUniqueInput
    AND?: post_reactionWhereInput | post_reactionWhereInput[]
    OR?: post_reactionWhereInput[]
    NOT?: post_reactionWhereInput | post_reactionWhereInput[]
    reaction_type?: Enumreaction_typeNullableFilter<"post_reaction"> | $Enums.reaction_type | null
    post_id?: IntFilter<"post_reaction"> | number
    customer_id?: IntFilter<"post_reaction"> | number
    created_at?: DateTimeFilter<"post_reaction"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, customerWhereInput>
    film_post?: XOR<Film_postScalarRelationFilter, film_postWhereInput>
  }, "reaction_id" | "post_id_customer_id">

  export type post_reactionOrderByWithAggregationInput = {
    reaction_id?: SortOrder
    reaction_type?: SortOrderInput | SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
    created_at?: SortOrder
    _count?: post_reactionCountOrderByAggregateInput
    _avg?: post_reactionAvgOrderByAggregateInput
    _max?: post_reactionMaxOrderByAggregateInput
    _min?: post_reactionMinOrderByAggregateInput
    _sum?: post_reactionSumOrderByAggregateInput
  }

  export type post_reactionScalarWhereWithAggregatesInput = {
    AND?: post_reactionScalarWhereWithAggregatesInput | post_reactionScalarWhereWithAggregatesInput[]
    OR?: post_reactionScalarWhereWithAggregatesInput[]
    NOT?: post_reactionScalarWhereWithAggregatesInput | post_reactionScalarWhereWithAggregatesInput[]
    reaction_id?: IntWithAggregatesFilter<"post_reaction"> | number
    reaction_type?: Enumreaction_typeNullableWithAggregatesFilter<"post_reaction"> | $Enums.reaction_type | null
    post_id?: IntWithAggregatesFilter<"post_reaction"> | number
    customer_id?: IntWithAggregatesFilter<"post_reaction"> | number
    created_at?: DateTimeWithAggregatesFilter<"post_reaction"> | Date | string
  }

  export type rentalWhereInput = {
    AND?: rentalWhereInput | rentalWhereInput[]
    OR?: rentalWhereInput[]
    NOT?: rentalWhereInput | rentalWhereInput[]
    rental_id?: IntFilter<"rental"> | number
    rental_date?: DateTimeFilter<"rental"> | Date | string
    inventory_id?: IntFilter<"rental"> | number
    customer_id?: IntFilter<"rental"> | number
    return_date?: DateTimeNullableFilter<"rental"> | Date | string | null
    staff_id?: IntFilter<"rental"> | number
    last_update?: DateTimeFilter<"rental"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, customerWhereInput>
    inventory?: XOR<InventoryScalarRelationFilter, inventoryWhereInput>
    staff?: XOR<StaffScalarRelationFilter, staffWhereInput>
  }

  export type rentalOrderByWithRelationInput = {
    rental_id?: SortOrder
    rental_date?: SortOrder
    inventory_id?: SortOrder
    customer_id?: SortOrder
    return_date?: SortOrderInput | SortOrder
    staff_id?: SortOrder
    last_update?: SortOrder
    customer?: customerOrderByWithRelationInput
    inventory?: inventoryOrderByWithRelationInput
    staff?: staffOrderByWithRelationInput
  }

  export type rentalWhereUniqueInput = Prisma.AtLeast<{
    rental_id?: number
    rental_date_inventory_id_customer_id?: rentalRental_dateInventory_idCustomer_idCompoundUniqueInput
    AND?: rentalWhereInput | rentalWhereInput[]
    OR?: rentalWhereInput[]
    NOT?: rentalWhereInput | rentalWhereInput[]
    rental_date?: DateTimeFilter<"rental"> | Date | string
    inventory_id?: IntFilter<"rental"> | number
    customer_id?: IntFilter<"rental"> | number
    return_date?: DateTimeNullableFilter<"rental"> | Date | string | null
    staff_id?: IntFilter<"rental"> | number
    last_update?: DateTimeFilter<"rental"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, customerWhereInput>
    inventory?: XOR<InventoryScalarRelationFilter, inventoryWhereInput>
    staff?: XOR<StaffScalarRelationFilter, staffWhereInput>
  }, "rental_id" | "rental_date_inventory_id_customer_id">

  export type rentalOrderByWithAggregationInput = {
    rental_id?: SortOrder
    rental_date?: SortOrder
    inventory_id?: SortOrder
    customer_id?: SortOrder
    return_date?: SortOrderInput | SortOrder
    staff_id?: SortOrder
    last_update?: SortOrder
    _count?: rentalCountOrderByAggregateInput
    _avg?: rentalAvgOrderByAggregateInput
    _max?: rentalMaxOrderByAggregateInput
    _min?: rentalMinOrderByAggregateInput
    _sum?: rentalSumOrderByAggregateInput
  }

  export type rentalScalarWhereWithAggregatesInput = {
    AND?: rentalScalarWhereWithAggregatesInput | rentalScalarWhereWithAggregatesInput[]
    OR?: rentalScalarWhereWithAggregatesInput[]
    NOT?: rentalScalarWhereWithAggregatesInput | rentalScalarWhereWithAggregatesInput[]
    rental_id?: IntWithAggregatesFilter<"rental"> | number
    rental_date?: DateTimeWithAggregatesFilter<"rental"> | Date | string
    inventory_id?: IntWithAggregatesFilter<"rental"> | number
    customer_id?: IntWithAggregatesFilter<"rental"> | number
    return_date?: DateTimeNullableWithAggregatesFilter<"rental"> | Date | string | null
    staff_id?: IntWithAggregatesFilter<"rental"> | number
    last_update?: DateTimeWithAggregatesFilter<"rental"> | Date | string
  }

  export type staffWhereInput = {
    AND?: staffWhereInput | staffWhereInput[]
    OR?: staffWhereInput[]
    NOT?: staffWhereInput | staffWhereInput[]
    staff_id?: IntFilter<"staff"> | number
    first_name?: StringFilter<"staff"> | string
    last_name?: StringFilter<"staff"> | string
    address_id?: IntFilter<"staff"> | number
    email?: StringNullableFilter<"staff"> | string | null
    store_id?: IntFilter<"staff"> | number
    active?: BoolFilter<"staff"> | boolean
    username?: StringFilter<"staff"> | string
    password?: StringNullableFilter<"staff"> | string | null
    last_update?: DateTimeFilter<"staff"> | Date | string
    picture?: BytesNullableFilter<"staff"> | Uint8Array | null
    rental?: RentalListRelationFilter
    address?: XOR<AddressScalarRelationFilter, addressWhereInput>
    store?: XOR<StoreScalarRelationFilter, storeWhereInput>
  }

  export type staffOrderByWithRelationInput = {
    staff_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    address_id?: SortOrder
    email?: SortOrderInput | SortOrder
    store_id?: SortOrder
    active?: SortOrder
    username?: SortOrder
    password?: SortOrderInput | SortOrder
    last_update?: SortOrder
    picture?: SortOrderInput | SortOrder
    rental?: rentalOrderByRelationAggregateInput
    address?: addressOrderByWithRelationInput
    store?: storeOrderByWithRelationInput
  }

  export type staffWhereUniqueInput = Prisma.AtLeast<{
    staff_id?: number
    AND?: staffWhereInput | staffWhereInput[]
    OR?: staffWhereInput[]
    NOT?: staffWhereInput | staffWhereInput[]
    first_name?: StringFilter<"staff"> | string
    last_name?: StringFilter<"staff"> | string
    address_id?: IntFilter<"staff"> | number
    email?: StringNullableFilter<"staff"> | string | null
    store_id?: IntFilter<"staff"> | number
    active?: BoolFilter<"staff"> | boolean
    username?: StringFilter<"staff"> | string
    password?: StringNullableFilter<"staff"> | string | null
    last_update?: DateTimeFilter<"staff"> | Date | string
    picture?: BytesNullableFilter<"staff"> | Uint8Array | null
    rental?: RentalListRelationFilter
    address?: XOR<AddressScalarRelationFilter, addressWhereInput>
    store?: XOR<StoreScalarRelationFilter, storeWhereInput>
  }, "staff_id">

  export type staffOrderByWithAggregationInput = {
    staff_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    address_id?: SortOrder
    email?: SortOrderInput | SortOrder
    store_id?: SortOrder
    active?: SortOrder
    username?: SortOrder
    password?: SortOrderInput | SortOrder
    last_update?: SortOrder
    picture?: SortOrderInput | SortOrder
    _count?: staffCountOrderByAggregateInput
    _avg?: staffAvgOrderByAggregateInput
    _max?: staffMaxOrderByAggregateInput
    _min?: staffMinOrderByAggregateInput
    _sum?: staffSumOrderByAggregateInput
  }

  export type staffScalarWhereWithAggregatesInput = {
    AND?: staffScalarWhereWithAggregatesInput | staffScalarWhereWithAggregatesInput[]
    OR?: staffScalarWhereWithAggregatesInput[]
    NOT?: staffScalarWhereWithAggregatesInput | staffScalarWhereWithAggregatesInput[]
    staff_id?: IntWithAggregatesFilter<"staff"> | number
    first_name?: StringWithAggregatesFilter<"staff"> | string
    last_name?: StringWithAggregatesFilter<"staff"> | string
    address_id?: IntWithAggregatesFilter<"staff"> | number
    email?: StringNullableWithAggregatesFilter<"staff"> | string | null
    store_id?: IntWithAggregatesFilter<"staff"> | number
    active?: BoolWithAggregatesFilter<"staff"> | boolean
    username?: StringWithAggregatesFilter<"staff"> | string
    password?: StringNullableWithAggregatesFilter<"staff"> | string | null
    last_update?: DateTimeWithAggregatesFilter<"staff"> | Date | string
    picture?: BytesNullableWithAggregatesFilter<"staff"> | Uint8Array | null
  }

  export type storeWhereInput = {
    AND?: storeWhereInput | storeWhereInput[]
    OR?: storeWhereInput[]
    NOT?: storeWhereInput | storeWhereInput[]
    store_id?: IntFilter<"store"> | number
    manager_staff_id?: IntFilter<"store"> | number
    address_id?: IntFilter<"store"> | number
    last_update?: DateTimeFilter<"store"> | Date | string
    customer?: CustomerListRelationFilter
    inventory?: InventoryListRelationFilter
    staff?: StaffListRelationFilter
    address?: XOR<AddressScalarRelationFilter, addressWhereInput>
  }

  export type storeOrderByWithRelationInput = {
    store_id?: SortOrder
    manager_staff_id?: SortOrder
    address_id?: SortOrder
    last_update?: SortOrder
    customer?: customerOrderByRelationAggregateInput
    inventory?: inventoryOrderByRelationAggregateInput
    staff?: staffOrderByRelationAggregateInput
    address?: addressOrderByWithRelationInput
  }

  export type storeWhereUniqueInput = Prisma.AtLeast<{
    store_id?: number
    manager_staff_id?: number
    AND?: storeWhereInput | storeWhereInput[]
    OR?: storeWhereInput[]
    NOT?: storeWhereInput | storeWhereInput[]
    address_id?: IntFilter<"store"> | number
    last_update?: DateTimeFilter<"store"> | Date | string
    customer?: CustomerListRelationFilter
    inventory?: InventoryListRelationFilter
    staff?: StaffListRelationFilter
    address?: XOR<AddressScalarRelationFilter, addressWhereInput>
  }, "store_id" | "manager_staff_id">

  export type storeOrderByWithAggregationInput = {
    store_id?: SortOrder
    manager_staff_id?: SortOrder
    address_id?: SortOrder
    last_update?: SortOrder
    _count?: storeCountOrderByAggregateInput
    _avg?: storeAvgOrderByAggregateInput
    _max?: storeMaxOrderByAggregateInput
    _min?: storeMinOrderByAggregateInput
    _sum?: storeSumOrderByAggregateInput
  }

  export type storeScalarWhereWithAggregatesInput = {
    AND?: storeScalarWhereWithAggregatesInput | storeScalarWhereWithAggregatesInput[]
    OR?: storeScalarWhereWithAggregatesInput[]
    NOT?: storeScalarWhereWithAggregatesInput | storeScalarWhereWithAggregatesInput[]
    store_id?: IntWithAggregatesFilter<"store"> | number
    manager_staff_id?: IntWithAggregatesFilter<"store"> | number
    address_id?: IntWithAggregatesFilter<"store"> | number
    last_update?: DateTimeWithAggregatesFilter<"store"> | Date | string
  }

  export type actorCreateInput = {
    first_name: string
    last_name: string
    last_update?: Date | string
    film_actor?: film_actorCreateNestedManyWithoutActorInput
  }

  export type actorUncheckedCreateInput = {
    actor_id?: number
    first_name: string
    last_name: string
    last_update?: Date | string
    film_actor?: film_actorUncheckedCreateNestedManyWithoutActorInput
  }

  export type actorUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film_actor?: film_actorUpdateManyWithoutActorNestedInput
  }

  export type actorUncheckedUpdateInput = {
    actor_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film_actor?: film_actorUncheckedUpdateManyWithoutActorNestedInput
  }

  export type actorCreateManyInput = {
    actor_id?: number
    first_name: string
    last_name: string
    last_update?: Date | string
  }

  export type actorUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type actorUncheckedUpdateManyInput = {
    actor_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type addressCreateInput = {
    address: string
    address2?: string | null
    district: string
    postal_code?: string | null
    phone: string
    last_update?: Date | string
    city: cityCreateNestedOneWithoutAddressInput
    customer?: customerCreateNestedManyWithoutAddressInput
    staff?: staffCreateNestedManyWithoutAddressInput
    store?: storeCreateNestedManyWithoutAddressInput
  }

  export type addressUncheckedCreateInput = {
    address_id?: number
    address: string
    address2?: string | null
    district: string
    city_id: number
    postal_code?: string | null
    phone: string
    last_update?: Date | string
    customer?: customerUncheckedCreateNestedManyWithoutAddressInput
    staff?: staffUncheckedCreateNestedManyWithoutAddressInput
    store?: storeUncheckedCreateNestedManyWithoutAddressInput
  }

  export type addressUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: cityUpdateOneRequiredWithoutAddressNestedInput
    customer?: customerUpdateManyWithoutAddressNestedInput
    staff?: staffUpdateManyWithoutAddressNestedInput
    store?: storeUpdateManyWithoutAddressNestedInput
  }

  export type addressUncheckedUpdateInput = {
    address_id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    city_id?: IntFieldUpdateOperationsInput | number
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUncheckedUpdateManyWithoutAddressNestedInput
    staff?: staffUncheckedUpdateManyWithoutAddressNestedInput
    store?: storeUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type addressCreateManyInput = {
    address_id?: number
    address: string
    address2?: string | null
    district: string
    city_id: number
    postal_code?: string | null
    phone: string
    last_update?: Date | string
  }

  export type addressUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type addressUncheckedUpdateManyInput = {
    address_id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    city_id?: IntFieldUpdateOperationsInput | number
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoryCreateInput = {
    name: string
    last_update?: Date | string
    film_category?: film_categoryCreateNestedManyWithoutCategoryInput
  }

  export type categoryUncheckedCreateInput = {
    category_id?: number
    name: string
    last_update?: Date | string
    film_category?: film_categoryUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoryUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film_category?: film_categoryUpdateManyWithoutCategoryNestedInput
  }

  export type categoryUncheckedUpdateInput = {
    category_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film_category?: film_categoryUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoryCreateManyInput = {
    category_id?: number
    name: string
    last_update?: Date | string
  }

  export type categoryUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoryUncheckedUpdateManyInput = {
    category_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cityCreateInput = {
    city: string
    last_update?: Date | string
    address?: addressCreateNestedManyWithoutCityInput
    country: countryCreateNestedOneWithoutCityInput
  }

  export type cityUncheckedCreateInput = {
    city_id?: number
    city: string
    country_id: number
    last_update?: Date | string
    address?: addressUncheckedCreateNestedManyWithoutCityInput
  }

  export type cityUpdateInput = {
    city?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: addressUpdateManyWithoutCityNestedInput
    country?: countryUpdateOneRequiredWithoutCityNestedInput
  }

  export type cityUncheckedUpdateInput = {
    city_id?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    country_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: addressUncheckedUpdateManyWithoutCityNestedInput
  }

  export type cityCreateManyInput = {
    city_id?: number
    city: string
    country_id: number
    last_update?: Date | string
  }

  export type cityUpdateManyMutationInput = {
    city?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cityUncheckedUpdateManyInput = {
    city_id?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    country_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type countryCreateInput = {
    country: string
    last_update?: Date | string
    city?: cityCreateNestedManyWithoutCountryInput
  }

  export type countryUncheckedCreateInput = {
    country_id?: number
    country: string
    last_update?: Date | string
    city?: cityUncheckedCreateNestedManyWithoutCountryInput
  }

  export type countryUpdateInput = {
    country?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: cityUpdateManyWithoutCountryNestedInput
  }

  export type countryUncheckedUpdateInput = {
    country_id?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: cityUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type countryCreateManyInput = {
    country_id?: number
    country: string
    last_update?: Date | string
  }

  export type countryUpdateManyMutationInput = {
    country?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type countryUncheckedUpdateManyInput = {
    country_id?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customerCreateInput = {
    first_name: string
    last_name: string
    email?: string | null
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    address: addressCreateNestedOneWithoutCustomerInput
    store: storeCreateNestedOneWithoutCustomerInput
    film_comment?: film_commentCreateNestedManyWithoutCustomerInput
    mention?: mentionCreateNestedManyWithoutCustomerInput
    notification?: notificationCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionCreateNestedManyWithoutCustomerInput
    rental?: rentalCreateNestedManyWithoutCustomerInput
  }

  export type customerUncheckedCreateInput = {
    customer_id?: number
    store_id: number
    first_name: string
    last_name: string
    email?: string | null
    address_id: number
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    film_comment?: film_commentUncheckedCreateNestedManyWithoutCustomerInput
    mention?: mentionUncheckedCreateNestedManyWithoutCustomerInput
    notification?: notificationUncheckedCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionUncheckedCreateNestedManyWithoutCustomerInput
    rental?: rentalUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type customerUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    address?: addressUpdateOneRequiredWithoutCustomerNestedInput
    store?: storeUpdateOneRequiredWithoutCustomerNestedInput
    film_comment?: film_commentUpdateManyWithoutCustomerNestedInput
    mention?: mentionUpdateManyWithoutCustomerNestedInput
    notification?: notificationUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUpdateManyWithoutCustomerNestedInput
    rental?: rentalUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address_id?: IntFieldUpdateOperationsInput | number
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    film_comment?: film_commentUncheckedUpdateManyWithoutCustomerNestedInput
    mention?: mentionUncheckedUpdateManyWithoutCustomerNestedInput
    notification?: notificationUncheckedUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUncheckedUpdateManyWithoutCustomerNestedInput
    rental?: rentalUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type customerCreateManyInput = {
    customer_id?: number
    store_id: number
    first_name: string
    last_name: string
    email?: string | null
    address_id: number
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
  }

  export type customerUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type customerUncheckedUpdateManyInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address_id?: IntFieldUpdateOperationsInput | number
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type filmUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    language_film_language_idTolanguage?: languageUpdateOneRequiredWithoutFilm_film_language_idTolanguageNestedInput
    language_film_original_language_idTolanguage?: languageUpdateOneWithoutFilm_film_original_language_idTolanguageNestedInput
    film_actor?: film_actorUpdateManyWithoutFilmNestedInput
    film_category?: film_categoryUpdateManyWithoutFilmNestedInput
    film_post?: film_postUpdateManyWithoutFilmNestedInput
    inventory?: inventoryUpdateManyWithoutFilmNestedInput
  }

  export type filmUncheckedUpdateInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    language_id?: IntFieldUpdateOperationsInput | number
    original_language_id?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    film_actor?: film_actorUncheckedUpdateManyWithoutFilmNestedInput
    film_category?: film_categoryUncheckedUpdateManyWithoutFilmNestedInput
    film_post?: film_postUncheckedUpdateManyWithoutFilmNestedInput
    inventory?: inventoryUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type filmUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
  }

  export type filmUncheckedUpdateManyInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    language_id?: IntFieldUpdateOperationsInput | number
    original_language_id?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
  }

  export type film_actorCreateInput = {
    last_update?: Date | string
    actor: actorCreateNestedOneWithoutFilm_actorInput
    film: filmCreateNestedOneWithoutFilm_actorInput
  }

  export type film_actorUncheckedCreateInput = {
    actor_id: number
    film_id: number
    last_update?: Date | string
  }

  export type film_actorUpdateInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    actor?: actorUpdateOneRequiredWithoutFilm_actorNestedInput
    film?: filmUpdateOneRequiredWithoutFilm_actorNestedInput
  }

  export type film_actorUncheckedUpdateInput = {
    actor_id?: IntFieldUpdateOperationsInput | number
    film_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_actorCreateManyInput = {
    actor_id: number
    film_id: number
    last_update?: Date | string
  }

  export type film_actorUpdateManyMutationInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_actorUncheckedUpdateManyInput = {
    actor_id?: IntFieldUpdateOperationsInput | number
    film_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_categoryCreateInput = {
    last_update?: Date | string
    category: categoryCreateNestedOneWithoutFilm_categoryInput
    film: filmCreateNestedOneWithoutFilm_categoryInput
  }

  export type film_categoryUncheckedCreateInput = {
    film_id: number
    category_id: number
    last_update?: Date | string
  }

  export type film_categoryUpdateInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: categoryUpdateOneRequiredWithoutFilm_categoryNestedInput
    film?: filmUpdateOneRequiredWithoutFilm_categoryNestedInput
  }

  export type film_categoryUncheckedUpdateInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_categoryCreateManyInput = {
    film_id: number
    category_id: number
    last_update?: Date | string
  }

  export type film_categoryUpdateManyMutationInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_categoryUncheckedUpdateManyInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    category_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_commentCreateInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    customer: customerCreateNestedOneWithoutFilm_commentInput
    film_post: film_postCreateNestedOneWithoutFilm_commentInput
    mention?: mentionCreateNestedManyWithoutFilm_commentInput
  }

  export type film_commentUncheckedCreateInput = {
    comment_id?: number
    post_id: number
    customer_id: number
    content: string
    created_at: Date | string
    updated_at: Date | string
    mention?: mentionUncheckedCreateNestedManyWithoutFilm_commentInput
  }

  export type film_commentUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateOneRequiredWithoutFilm_commentNestedInput
    film_post?: film_postUpdateOneRequiredWithoutFilm_commentNestedInput
    mention?: mentionUpdateManyWithoutFilm_commentNestedInput
  }

  export type film_commentUncheckedUpdateInput = {
    comment_id?: IntFieldUpdateOperationsInput | number
    post_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    mention?: mentionUncheckedUpdateManyWithoutFilm_commentNestedInput
  }

  export type film_commentCreateManyInput = {
    comment_id?: number
    post_id: number
    customer_id: number
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type film_commentUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_commentUncheckedUpdateManyInput = {
    comment_id?: IntFieldUpdateOperationsInput | number
    post_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_postCreateInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    film_comment?: film_commentCreateNestedManyWithoutFilm_postInput
    film?: filmCreateNestedOneWithoutFilm_postInput
    post_reaction?: post_reactionCreateNestedManyWithoutFilm_postInput
  }

  export type film_postUncheckedCreateInput = {
    post_id?: number
    film_id: number
    content: string
    created_at: Date | string
    updated_at: Date | string
    film_comment?: film_commentUncheckedCreateNestedManyWithoutFilm_postInput
    post_reaction?: post_reactionUncheckedCreateNestedManyWithoutFilm_postInput
  }

  export type film_postUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    film_comment?: film_commentUpdateManyWithoutFilm_postNestedInput
    film?: filmUpdateOneWithoutFilm_postNestedInput
    post_reaction?: post_reactionUpdateManyWithoutFilm_postNestedInput
  }

  export type film_postUncheckedUpdateInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    film_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    film_comment?: film_commentUncheckedUpdateManyWithoutFilm_postNestedInput
    post_reaction?: post_reactionUncheckedUpdateManyWithoutFilm_postNestedInput
  }

  export type film_postCreateManyInput = {
    post_id?: number
    film_id: number
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type film_postUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_postUncheckedUpdateManyInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    film_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type inventoryCreateInput = {
    last_update?: Date | string
    film: filmCreateNestedOneWithoutInventoryInput
    store: storeCreateNestedOneWithoutInventoryInput
    rental?: rentalCreateNestedManyWithoutInventoryInput
  }

  export type inventoryUncheckedCreateInput = {
    inventory_id?: number
    film_id: number
    store_id: number
    last_update?: Date | string
    rental?: rentalUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type inventoryUpdateInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film?: filmUpdateOneRequiredWithoutInventoryNestedInput
    store?: storeUpdateOneRequiredWithoutInventoryNestedInput
    rental?: rentalUpdateManyWithoutInventoryNestedInput
  }

  export type inventoryUncheckedUpdateInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    film_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: rentalUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type inventoryCreateManyInput = {
    inventory_id?: number
    film_id: number
    store_id: number
    last_update?: Date | string
  }

  export type inventoryUpdateManyMutationInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type inventoryUncheckedUpdateManyInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    film_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type languageCreateInput = {
    name: string
    last_update?: Date | string
    film_film_language_idTolanguage?: filmCreateNestedManyWithoutLanguage_film_language_idTolanguageInput
    film_film_original_language_idTolanguage?: filmCreateNestedManyWithoutLanguage_film_original_language_idTolanguageInput
  }

  export type languageUncheckedCreateInput = {
    language_id?: number
    name: string
    last_update?: Date | string
    film_film_language_idTolanguage?: filmUncheckedCreateNestedManyWithoutLanguage_film_language_idTolanguageInput
    film_film_original_language_idTolanguage?: filmUncheckedCreateNestedManyWithoutLanguage_film_original_language_idTolanguageInput
  }

  export type languageUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film_film_language_idTolanguage?: filmUpdateManyWithoutLanguage_film_language_idTolanguageNestedInput
    film_film_original_language_idTolanguage?: filmUpdateManyWithoutLanguage_film_original_language_idTolanguageNestedInput
  }

  export type languageUncheckedUpdateInput = {
    language_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film_film_language_idTolanguage?: filmUncheckedUpdateManyWithoutLanguage_film_language_idTolanguageNestedInput
    film_film_original_language_idTolanguage?: filmUncheckedUpdateManyWithoutLanguage_film_original_language_idTolanguageNestedInput
  }

  export type languageCreateManyInput = {
    language_id?: number
    name: string
    last_update?: Date | string
  }

  export type languageUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type languageUncheckedUpdateManyInput = {
    language_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mentionCreateInput = {
    created_at: Date | string
    film_comment: film_commentCreateNestedOneWithoutMentionInput
    customer: customerCreateNestedOneWithoutMentionInput
    notification?: notificationCreateNestedOneWithoutMentionInput
  }

  export type mentionUncheckedCreateInput = {
    mention_id?: number
    created_at: Date | string
    comment_id: number
    mentioned_customer_id: number
    notification?: notificationUncheckedCreateNestedOneWithoutMentionInput
  }

  export type mentionUpdateInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    film_comment?: film_commentUpdateOneRequiredWithoutMentionNestedInput
    customer?: customerUpdateOneRequiredWithoutMentionNestedInput
    notification?: notificationUpdateOneWithoutMentionNestedInput
  }

  export type mentionUncheckedUpdateInput = {
    mention_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment_id?: IntFieldUpdateOperationsInput | number
    mentioned_customer_id?: IntFieldUpdateOperationsInput | number
    notification?: notificationUncheckedUpdateOneWithoutMentionNestedInput
  }

  export type mentionCreateManyInput = {
    mention_id?: number
    created_at: Date | string
    comment_id: number
    mentioned_customer_id: number
  }

  export type mentionUpdateManyMutationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mentionUncheckedUpdateManyInput = {
    mention_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment_id?: IntFieldUpdateOperationsInput | number
    mentioned_customer_id?: IntFieldUpdateOperationsInput | number
  }

  export type notificationCreateInput = {
    content: string
    created_at: Date | string
    is_read: boolean
    read_at: Date | string
    mention: mentionCreateNestedOneWithoutNotificationInput
    customer: customerCreateNestedOneWithoutNotificationInput
  }

  export type notificationUncheckedCreateInput = {
    notification_id?: number
    mentioner_id: number
    mention_id: number
    content: string
    created_at: Date | string
    is_read: boolean
    read_at: Date | string
  }

  export type notificationUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    read_at?: DateTimeFieldUpdateOperationsInput | Date | string
    mention?: mentionUpdateOneRequiredWithoutNotificationNestedInput
    customer?: customerUpdateOneRequiredWithoutNotificationNestedInput
  }

  export type notificationUncheckedUpdateInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    mentioner_id?: IntFieldUpdateOperationsInput | number
    mention_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    read_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notificationCreateManyInput = {
    notification_id?: number
    mentioner_id: number
    mention_id: number
    content: string
    created_at: Date | string
    is_read: boolean
    read_at: Date | string
  }

  export type notificationUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    read_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notificationUncheckedUpdateManyInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    mentioner_id?: IntFieldUpdateOperationsInput | number
    mention_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    read_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentCreateInput = {
    payment_id?: number
    customer_id: number
    staff_id: number
    rental_id: number
    amount: Decimal | DecimalJsLike | number | string
    payment_date: Date | string
  }

  export type paymentUncheckedCreateInput = {
    payment_id?: number
    customer_id: number
    staff_id: number
    rental_id: number
    amount: Decimal | DecimalJsLike | number | string
    payment_date: Date | string
  }

  export type paymentUpdateInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    staff_id?: IntFieldUpdateOperationsInput | number
    rental_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentUncheckedUpdateInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    staff_id?: IntFieldUpdateOperationsInput | number
    rental_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentCreateManyInput = {
    payment_id?: number
    customer_id: number
    staff_id: number
    rental_id: number
    amount: Decimal | DecimalJsLike | number | string
    payment_date: Date | string
  }

  export type paymentUpdateManyMutationInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    staff_id?: IntFieldUpdateOperationsInput | number
    rental_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type paymentUncheckedUpdateManyInput = {
    payment_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    staff_id?: IntFieldUpdateOperationsInput | number
    rental_id?: IntFieldUpdateOperationsInput | number
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    payment_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type post_reactionCreateInput = {
    reaction_type?: $Enums.reaction_type | null
    created_at: Date | string
    customer: customerCreateNestedOneWithoutPost_reactionInput
    film_post: film_postCreateNestedOneWithoutPost_reactionInput
  }

  export type post_reactionUncheckedCreateInput = {
    reaction_id?: number
    reaction_type?: $Enums.reaction_type | null
    post_id: number
    customer_id: number
    created_at: Date | string
  }

  export type post_reactionUpdateInput = {
    reaction_type?: NullableEnumreaction_typeFieldUpdateOperationsInput | $Enums.reaction_type | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateOneRequiredWithoutPost_reactionNestedInput
    film_post?: film_postUpdateOneRequiredWithoutPost_reactionNestedInput
  }

  export type post_reactionUncheckedUpdateInput = {
    reaction_id?: IntFieldUpdateOperationsInput | number
    reaction_type?: NullableEnumreaction_typeFieldUpdateOperationsInput | $Enums.reaction_type | null
    post_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type post_reactionCreateManyInput = {
    reaction_id?: number
    reaction_type?: $Enums.reaction_type | null
    post_id: number
    customer_id: number
    created_at: Date | string
  }

  export type post_reactionUpdateManyMutationInput = {
    reaction_type?: NullableEnumreaction_typeFieldUpdateOperationsInput | $Enums.reaction_type | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type post_reactionUncheckedUpdateManyInput = {
    reaction_id?: IntFieldUpdateOperationsInput | number
    reaction_type?: NullableEnumreaction_typeFieldUpdateOperationsInput | $Enums.reaction_type | null
    post_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rentalCreateInput = {
    rental_date: Date | string
    return_date?: Date | string | null
    last_update?: Date | string
    customer: customerCreateNestedOneWithoutRentalInput
    inventory: inventoryCreateNestedOneWithoutRentalInput
    staff: staffCreateNestedOneWithoutRentalInput
  }

  export type rentalUncheckedCreateInput = {
    rental_id?: number
    rental_date: Date | string
    inventory_id: number
    customer_id: number
    return_date?: Date | string | null
    staff_id: number
    last_update?: Date | string
  }

  export type rentalUpdateInput = {
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateOneRequiredWithoutRentalNestedInput
    inventory?: inventoryUpdateOneRequiredWithoutRentalNestedInput
    staff?: staffUpdateOneRequiredWithoutRentalNestedInput
  }

  export type rentalUncheckedUpdateInput = {
    rental_id?: IntFieldUpdateOperationsInput | number
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rentalCreateManyInput = {
    rental_id?: number
    rental_date: Date | string
    inventory_id: number
    customer_id: number
    return_date?: Date | string | null
    staff_id: number
    last_update?: Date | string
  }

  export type rentalUpdateManyMutationInput = {
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rentalUncheckedUpdateManyInput = {
    rental_id?: IntFieldUpdateOperationsInput | number
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type staffCreateInput = {
    first_name: string
    last_name: string
    email?: string | null
    active?: boolean
    username: string
    password?: string | null
    last_update?: Date | string
    picture?: Uint8Array | null
    rental?: rentalCreateNestedManyWithoutStaffInput
    address: addressCreateNestedOneWithoutStaffInput
    store: storeCreateNestedOneWithoutStaffInput
  }

  export type staffUncheckedCreateInput = {
    staff_id?: number
    first_name: string
    last_name: string
    address_id: number
    email?: string | null
    store_id: number
    active?: boolean
    username: string
    password?: string | null
    last_update?: Date | string
    picture?: Uint8Array | null
    rental?: rentalUncheckedCreateNestedManyWithoutStaffInput
  }

  export type staffUpdateInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    username?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    rental?: rentalUpdateManyWithoutStaffNestedInput
    address?: addressUpdateOneRequiredWithoutStaffNestedInput
    store?: storeUpdateOneRequiredWithoutStaffNestedInput
  }

  export type staffUncheckedUpdateInput = {
    staff_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    address_id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    username?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    rental?: rentalUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type staffCreateManyInput = {
    staff_id?: number
    first_name: string
    last_name: string
    address_id: number
    email?: string | null
    store_id: number
    active?: boolean
    username: string
    password?: string | null
    last_update?: Date | string
    picture?: Uint8Array | null
  }

  export type staffUpdateManyMutationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    username?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type staffUncheckedUpdateManyInput = {
    staff_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    address_id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    username?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type storeCreateInput = {
    manager_staff_id: number
    last_update?: Date | string
    customer?: customerCreateNestedManyWithoutStoreInput
    inventory?: inventoryCreateNestedManyWithoutStoreInput
    staff?: staffCreateNestedManyWithoutStoreInput
    address: addressCreateNestedOneWithoutStoreInput
  }

  export type storeUncheckedCreateInput = {
    store_id?: number
    manager_staff_id: number
    address_id: number
    last_update?: Date | string
    customer?: customerUncheckedCreateNestedManyWithoutStoreInput
    inventory?: inventoryUncheckedCreateNestedManyWithoutStoreInput
    staff?: staffUncheckedCreateNestedManyWithoutStoreInput
  }

  export type storeUpdateInput = {
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateManyWithoutStoreNestedInput
    inventory?: inventoryUpdateManyWithoutStoreNestedInput
    staff?: staffUpdateManyWithoutStoreNestedInput
    address?: addressUpdateOneRequiredWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUncheckedUpdateManyWithoutStoreNestedInput
    inventory?: inventoryUncheckedUpdateManyWithoutStoreNestedInput
    staff?: staffUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type storeCreateManyInput = {
    store_id?: number
    manager_staff_id: number
    address_id: number
    last_update?: Date | string
  }

  export type storeUpdateManyMutationInput = {
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type storeUncheckedUpdateManyInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type Film_actorListRelationFilter = {
    every?: film_actorWhereInput
    some?: film_actorWhereInput
    none?: film_actorWhereInput
  }

  export type film_actorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type actorCountOrderByAggregateInput = {
    actor_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    last_update?: SortOrder
  }

  export type actorAvgOrderByAggregateInput = {
    actor_id?: SortOrder
  }

  export type actorMaxOrderByAggregateInput = {
    actor_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    last_update?: SortOrder
  }

  export type actorMinOrderByAggregateInput = {
    actor_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    last_update?: SortOrder
  }

  export type actorSumOrderByAggregateInput = {
    actor_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CityScalarRelationFilter = {
    is?: cityWhereInput
    isNot?: cityWhereInput
  }

  export type CustomerListRelationFilter = {
    every?: customerWhereInput
    some?: customerWhereInput
    none?: customerWhereInput
  }

  export type StaffListRelationFilter = {
    every?: staffWhereInput
    some?: staffWhereInput
    none?: staffWhereInput
  }

  export type StoreListRelationFilter = {
    every?: storeWhereInput
    some?: storeWhereInput
    none?: storeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type customerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type staffOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type storeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type addressCountOrderByAggregateInput = {
    address_id?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    district?: SortOrder
    city_id?: SortOrder
    postal_code?: SortOrder
    phone?: SortOrder
    last_update?: SortOrder
  }

  export type addressAvgOrderByAggregateInput = {
    address_id?: SortOrder
    city_id?: SortOrder
  }

  export type addressMaxOrderByAggregateInput = {
    address_id?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    district?: SortOrder
    city_id?: SortOrder
    postal_code?: SortOrder
    phone?: SortOrder
    last_update?: SortOrder
  }

  export type addressMinOrderByAggregateInput = {
    address_id?: SortOrder
    address?: SortOrder
    address2?: SortOrder
    district?: SortOrder
    city_id?: SortOrder
    postal_code?: SortOrder
    phone?: SortOrder
    last_update?: SortOrder
  }

  export type addressSumOrderByAggregateInput = {
    address_id?: SortOrder
    city_id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type Film_categoryListRelationFilter = {
    every?: film_categoryWhereInput
    some?: film_categoryWhereInput
    none?: film_categoryWhereInput
  }

  export type film_categoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoryCountOrderByAggregateInput = {
    category_id?: SortOrder
    name?: SortOrder
    last_update?: SortOrder
  }

  export type categoryAvgOrderByAggregateInput = {
    category_id?: SortOrder
  }

  export type categoryMaxOrderByAggregateInput = {
    category_id?: SortOrder
    name?: SortOrder
    last_update?: SortOrder
  }

  export type categoryMinOrderByAggregateInput = {
    category_id?: SortOrder
    name?: SortOrder
    last_update?: SortOrder
  }

  export type categorySumOrderByAggregateInput = {
    category_id?: SortOrder
  }

  export type AddressListRelationFilter = {
    every?: addressWhereInput
    some?: addressWhereInput
    none?: addressWhereInput
  }

  export type CountryScalarRelationFilter = {
    is?: countryWhereInput
    isNot?: countryWhereInput
  }

  export type addressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type cityCountOrderByAggregateInput = {
    city_id?: SortOrder
    city?: SortOrder
    country_id?: SortOrder
    last_update?: SortOrder
  }

  export type cityAvgOrderByAggregateInput = {
    city_id?: SortOrder
    country_id?: SortOrder
  }

  export type cityMaxOrderByAggregateInput = {
    city_id?: SortOrder
    city?: SortOrder
    country_id?: SortOrder
    last_update?: SortOrder
  }

  export type cityMinOrderByAggregateInput = {
    city_id?: SortOrder
    city?: SortOrder
    country_id?: SortOrder
    last_update?: SortOrder
  }

  export type citySumOrderByAggregateInput = {
    city_id?: SortOrder
    country_id?: SortOrder
  }

  export type CityListRelationFilter = {
    every?: cityWhereInput
    some?: cityWhereInput
    none?: cityWhereInput
  }

  export type cityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type countryCountOrderByAggregateInput = {
    country_id?: SortOrder
    country?: SortOrder
    last_update?: SortOrder
  }

  export type countryAvgOrderByAggregateInput = {
    country_id?: SortOrder
  }

  export type countryMaxOrderByAggregateInput = {
    country_id?: SortOrder
    country?: SortOrder
    last_update?: SortOrder
  }

  export type countryMinOrderByAggregateInput = {
    country_id?: SortOrder
    country?: SortOrder
    last_update?: SortOrder
  }

  export type countrySumOrderByAggregateInput = {
    country_id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type AddressScalarRelationFilter = {
    is?: addressWhereInput
    isNot?: addressWhereInput
  }

  export type StoreScalarRelationFilter = {
    is?: storeWhereInput
    isNot?: storeWhereInput
  }

  export type Film_commentListRelationFilter = {
    every?: film_commentWhereInput
    some?: film_commentWhereInput
    none?: film_commentWhereInput
  }

  export type MentionListRelationFilter = {
    every?: mentionWhereInput
    some?: mentionWhereInput
    none?: mentionWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: notificationWhereInput
    some?: notificationWhereInput
    none?: notificationWhereInput
  }

  export type Post_reactionListRelationFilter = {
    every?: post_reactionWhereInput
    some?: post_reactionWhereInput
    none?: post_reactionWhereInput
  }

  export type RentalListRelationFilter = {
    every?: rentalWhereInput
    some?: rentalWhereInput
    none?: rentalWhereInput
  }

  export type film_commentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type mentionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type notificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type post_reactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type rentalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type customerCountOrderByAggregateInput = {
    customer_id?: SortOrder
    store_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    address_id?: SortOrder
    activebool?: SortOrder
    create_date?: SortOrder
    last_update?: SortOrder
    active?: SortOrder
  }

  export type customerAvgOrderByAggregateInput = {
    customer_id?: SortOrder
    store_id?: SortOrder
    address_id?: SortOrder
    active?: SortOrder
  }

  export type customerMaxOrderByAggregateInput = {
    customer_id?: SortOrder
    store_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    address_id?: SortOrder
    activebool?: SortOrder
    create_date?: SortOrder
    last_update?: SortOrder
    active?: SortOrder
  }

  export type customerMinOrderByAggregateInput = {
    customer_id?: SortOrder
    store_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    email?: SortOrder
    address_id?: SortOrder
    activebool?: SortOrder
    create_date?: SortOrder
    last_update?: SortOrder
    active?: SortOrder
  }

  export type customerSumOrderByAggregateInput = {
    customer_id?: SortOrder
    store_id?: SortOrder
    address_id?: SortOrder
    active?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type Enummpaa_ratingNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.mpaa_rating | Enummpaa_ratingFieldRefInput<$PrismaModel> | null
    in?: $Enums.mpaa_rating[] | ListEnummpaa_ratingFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.mpaa_rating[] | ListEnummpaa_ratingFieldRefInput<$PrismaModel> | null
    not?: NestedEnummpaa_ratingNullableFilter<$PrismaModel> | $Enums.mpaa_rating | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type LanguageScalarRelationFilter = {
    is?: languageWhereInput
    isNot?: languageWhereInput
  }

  export type LanguageNullableScalarRelationFilter = {
    is?: languageWhereInput | null
    isNot?: languageWhereInput | null
  }

  export type Film_postListRelationFilter = {
    every?: film_postWhereInput
    some?: film_postWhereInput
    none?: film_postWhereInput
  }

  export type InventoryListRelationFilter = {
    every?: inventoryWhereInput
    some?: inventoryWhereInput
    none?: inventoryWhereInput
  }

  export type film_postOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type inventoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type filmCountOrderByAggregateInput = {
    film_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    release_year?: SortOrder
    language_id?: SortOrder
    original_language_id?: SortOrder
    rental_duration?: SortOrder
    rental_rate?: SortOrder
    length?: SortOrder
    replacement_cost?: SortOrder
    rating?: SortOrder
    last_update?: SortOrder
    special_features?: SortOrder
  }

  export type filmAvgOrderByAggregateInput = {
    film_id?: SortOrder
    release_year?: SortOrder
    language_id?: SortOrder
    original_language_id?: SortOrder
    rental_duration?: SortOrder
    rental_rate?: SortOrder
    length?: SortOrder
    replacement_cost?: SortOrder
  }

  export type filmMaxOrderByAggregateInput = {
    film_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    release_year?: SortOrder
    language_id?: SortOrder
    original_language_id?: SortOrder
    rental_duration?: SortOrder
    rental_rate?: SortOrder
    length?: SortOrder
    replacement_cost?: SortOrder
    rating?: SortOrder
    last_update?: SortOrder
  }

  export type filmMinOrderByAggregateInput = {
    film_id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    release_year?: SortOrder
    language_id?: SortOrder
    original_language_id?: SortOrder
    rental_duration?: SortOrder
    rental_rate?: SortOrder
    length?: SortOrder
    replacement_cost?: SortOrder
    rating?: SortOrder
    last_update?: SortOrder
  }

  export type filmSumOrderByAggregateInput = {
    film_id?: SortOrder
    release_year?: SortOrder
    language_id?: SortOrder
    original_language_id?: SortOrder
    rental_duration?: SortOrder
    rental_rate?: SortOrder
    length?: SortOrder
    replacement_cost?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type Enummpaa_ratingNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.mpaa_rating | Enummpaa_ratingFieldRefInput<$PrismaModel> | null
    in?: $Enums.mpaa_rating[] | ListEnummpaa_ratingFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.mpaa_rating[] | ListEnummpaa_ratingFieldRefInput<$PrismaModel> | null
    not?: NestedEnummpaa_ratingNullableWithAggregatesFilter<$PrismaModel> | $Enums.mpaa_rating | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnummpaa_ratingNullableFilter<$PrismaModel>
    _max?: NestedEnummpaa_ratingNullableFilter<$PrismaModel>
  }

  export type ActorScalarRelationFilter = {
    is?: actorWhereInput
    isNot?: actorWhereInput
  }

  export type FilmScalarRelationFilter = {
    is?: filmWhereInput
    isNot?: filmWhereInput
  }

  export type film_actorActor_idFilm_idCompoundUniqueInput = {
    actor_id: number
    film_id: number
  }

  export type film_actorCountOrderByAggregateInput = {
    actor_id?: SortOrder
    film_id?: SortOrder
    last_update?: SortOrder
  }

  export type film_actorAvgOrderByAggregateInput = {
    actor_id?: SortOrder
    film_id?: SortOrder
  }

  export type film_actorMaxOrderByAggregateInput = {
    actor_id?: SortOrder
    film_id?: SortOrder
    last_update?: SortOrder
  }

  export type film_actorMinOrderByAggregateInput = {
    actor_id?: SortOrder
    film_id?: SortOrder
    last_update?: SortOrder
  }

  export type film_actorSumOrderByAggregateInput = {
    actor_id?: SortOrder
    film_id?: SortOrder
  }

  export type CategoryScalarRelationFilter = {
    is?: categoryWhereInput
    isNot?: categoryWhereInput
  }

  export type film_categoryFilm_idCategory_idCompoundUniqueInput = {
    film_id: number
    category_id: number
  }

  export type film_categoryCountOrderByAggregateInput = {
    film_id?: SortOrder
    category_id?: SortOrder
    last_update?: SortOrder
  }

  export type film_categoryAvgOrderByAggregateInput = {
    film_id?: SortOrder
    category_id?: SortOrder
  }

  export type film_categoryMaxOrderByAggregateInput = {
    film_id?: SortOrder
    category_id?: SortOrder
    last_update?: SortOrder
  }

  export type film_categoryMinOrderByAggregateInput = {
    film_id?: SortOrder
    category_id?: SortOrder
    last_update?: SortOrder
  }

  export type film_categorySumOrderByAggregateInput = {
    film_id?: SortOrder
    category_id?: SortOrder
  }

  export type CustomerScalarRelationFilter = {
    is?: customerWhereInput
    isNot?: customerWhereInput
  }

  export type Film_postScalarRelationFilter = {
    is?: film_postWhereInput
    isNot?: film_postWhereInput
  }

  export type film_commentCountOrderByAggregateInput = {
    comment_id?: SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type film_commentAvgOrderByAggregateInput = {
    comment_id?: SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
  }

  export type film_commentMaxOrderByAggregateInput = {
    comment_id?: SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type film_commentMinOrderByAggregateInput = {
    comment_id?: SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type film_commentSumOrderByAggregateInput = {
    comment_id?: SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
  }

  export type FilmNullableScalarRelationFilter = {
    is?: filmWhereInput | null
    isNot?: filmWhereInput | null
  }

  export type film_postCountOrderByAggregateInput = {
    post_id?: SortOrder
    film_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type film_postAvgOrderByAggregateInput = {
    post_id?: SortOrder
    film_id?: SortOrder
  }

  export type film_postMaxOrderByAggregateInput = {
    post_id?: SortOrder
    film_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type film_postMinOrderByAggregateInput = {
    post_id?: SortOrder
    film_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type film_postSumOrderByAggregateInput = {
    post_id?: SortOrder
    film_id?: SortOrder
  }

  export type inventoryCountOrderByAggregateInput = {
    inventory_id?: SortOrder
    film_id?: SortOrder
    store_id?: SortOrder
    last_update?: SortOrder
  }

  export type inventoryAvgOrderByAggregateInput = {
    inventory_id?: SortOrder
    film_id?: SortOrder
    store_id?: SortOrder
  }

  export type inventoryMaxOrderByAggregateInput = {
    inventory_id?: SortOrder
    film_id?: SortOrder
    store_id?: SortOrder
    last_update?: SortOrder
  }

  export type inventoryMinOrderByAggregateInput = {
    inventory_id?: SortOrder
    film_id?: SortOrder
    store_id?: SortOrder
    last_update?: SortOrder
  }

  export type inventorySumOrderByAggregateInput = {
    inventory_id?: SortOrder
    film_id?: SortOrder
    store_id?: SortOrder
  }

  export type FilmListRelationFilter = {
    every?: filmWhereInput
    some?: filmWhereInput
    none?: filmWhereInput
  }

  export type filmOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type languageCountOrderByAggregateInput = {
    language_id?: SortOrder
    name?: SortOrder
    last_update?: SortOrder
  }

  export type languageAvgOrderByAggregateInput = {
    language_id?: SortOrder
  }

  export type languageMaxOrderByAggregateInput = {
    language_id?: SortOrder
    name?: SortOrder
    last_update?: SortOrder
  }

  export type languageMinOrderByAggregateInput = {
    language_id?: SortOrder
    name?: SortOrder
    last_update?: SortOrder
  }

  export type languageSumOrderByAggregateInput = {
    language_id?: SortOrder
  }

  export type Film_commentScalarRelationFilter = {
    is?: film_commentWhereInput
    isNot?: film_commentWhereInput
  }

  export type NotificationNullableScalarRelationFilter = {
    is?: notificationWhereInput | null
    isNot?: notificationWhereInput | null
  }

  export type mentionCountOrderByAggregateInput = {
    mention_id?: SortOrder
    created_at?: SortOrder
    comment_id?: SortOrder
    mentioned_customer_id?: SortOrder
  }

  export type mentionAvgOrderByAggregateInput = {
    mention_id?: SortOrder
    comment_id?: SortOrder
    mentioned_customer_id?: SortOrder
  }

  export type mentionMaxOrderByAggregateInput = {
    mention_id?: SortOrder
    created_at?: SortOrder
    comment_id?: SortOrder
    mentioned_customer_id?: SortOrder
  }

  export type mentionMinOrderByAggregateInput = {
    mention_id?: SortOrder
    created_at?: SortOrder
    comment_id?: SortOrder
    mentioned_customer_id?: SortOrder
  }

  export type mentionSumOrderByAggregateInput = {
    mention_id?: SortOrder
    comment_id?: SortOrder
    mentioned_customer_id?: SortOrder
  }

  export type MentionScalarRelationFilter = {
    is?: mentionWhereInput
    isNot?: mentionWhereInput
  }

  export type notificationCountOrderByAggregateInput = {
    notification_id?: SortOrder
    mentioner_id?: SortOrder
    mention_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    is_read?: SortOrder
    read_at?: SortOrder
  }

  export type notificationAvgOrderByAggregateInput = {
    notification_id?: SortOrder
    mentioner_id?: SortOrder
    mention_id?: SortOrder
  }

  export type notificationMaxOrderByAggregateInput = {
    notification_id?: SortOrder
    mentioner_id?: SortOrder
    mention_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    is_read?: SortOrder
    read_at?: SortOrder
  }

  export type notificationMinOrderByAggregateInput = {
    notification_id?: SortOrder
    mentioner_id?: SortOrder
    mention_id?: SortOrder
    content?: SortOrder
    created_at?: SortOrder
    is_read?: SortOrder
    read_at?: SortOrder
  }

  export type notificationSumOrderByAggregateInput = {
    notification_id?: SortOrder
    mentioner_id?: SortOrder
    mention_id?: SortOrder
  }

  export type paymentPayment_datePayment_idCompoundUniqueInput = {
    payment_date: Date | string
    payment_id: number
  }

  export type paymentCountOrderByAggregateInput = {
    payment_id?: SortOrder
    customer_id?: SortOrder
    staff_id?: SortOrder
    rental_id?: SortOrder
    amount?: SortOrder
    payment_date?: SortOrder
  }

  export type paymentAvgOrderByAggregateInput = {
    payment_id?: SortOrder
    customer_id?: SortOrder
    staff_id?: SortOrder
    rental_id?: SortOrder
    amount?: SortOrder
  }

  export type paymentMaxOrderByAggregateInput = {
    payment_id?: SortOrder
    customer_id?: SortOrder
    staff_id?: SortOrder
    rental_id?: SortOrder
    amount?: SortOrder
    payment_date?: SortOrder
  }

  export type paymentMinOrderByAggregateInput = {
    payment_id?: SortOrder
    customer_id?: SortOrder
    staff_id?: SortOrder
    rental_id?: SortOrder
    amount?: SortOrder
    payment_date?: SortOrder
  }

  export type paymentSumOrderByAggregateInput = {
    payment_id?: SortOrder
    customer_id?: SortOrder
    staff_id?: SortOrder
    rental_id?: SortOrder
    amount?: SortOrder
  }

  export type Enumreaction_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.reaction_type | Enumreaction_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.reaction_type[] | ListEnumreaction_typeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.reaction_type[] | ListEnumreaction_typeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumreaction_typeNullableFilter<$PrismaModel> | $Enums.reaction_type | null
  }

  export type post_reactionPost_idCustomer_idCompoundUniqueInput = {
    post_id: number
    customer_id: number
  }

  export type post_reactionCountOrderByAggregateInput = {
    reaction_id?: SortOrder
    reaction_type?: SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
    created_at?: SortOrder
  }

  export type post_reactionAvgOrderByAggregateInput = {
    reaction_id?: SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
  }

  export type post_reactionMaxOrderByAggregateInput = {
    reaction_id?: SortOrder
    reaction_type?: SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
    created_at?: SortOrder
  }

  export type post_reactionMinOrderByAggregateInput = {
    reaction_id?: SortOrder
    reaction_type?: SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
    created_at?: SortOrder
  }

  export type post_reactionSumOrderByAggregateInput = {
    reaction_id?: SortOrder
    post_id?: SortOrder
    customer_id?: SortOrder
  }

  export type Enumreaction_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reaction_type | Enumreaction_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.reaction_type[] | ListEnumreaction_typeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.reaction_type[] | ListEnumreaction_typeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumreaction_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.reaction_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumreaction_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumreaction_typeNullableFilter<$PrismaModel>
  }

  export type InventoryScalarRelationFilter = {
    is?: inventoryWhereInput
    isNot?: inventoryWhereInput
  }

  export type StaffScalarRelationFilter = {
    is?: staffWhereInput
    isNot?: staffWhereInput
  }

  export type rentalRental_dateInventory_idCustomer_idCompoundUniqueInput = {
    rental_date: Date | string
    inventory_id: number
    customer_id: number
  }

  export type rentalCountOrderByAggregateInput = {
    rental_id?: SortOrder
    rental_date?: SortOrder
    inventory_id?: SortOrder
    customer_id?: SortOrder
    return_date?: SortOrder
    staff_id?: SortOrder
    last_update?: SortOrder
  }

  export type rentalAvgOrderByAggregateInput = {
    rental_id?: SortOrder
    inventory_id?: SortOrder
    customer_id?: SortOrder
    staff_id?: SortOrder
  }

  export type rentalMaxOrderByAggregateInput = {
    rental_id?: SortOrder
    rental_date?: SortOrder
    inventory_id?: SortOrder
    customer_id?: SortOrder
    return_date?: SortOrder
    staff_id?: SortOrder
    last_update?: SortOrder
  }

  export type rentalMinOrderByAggregateInput = {
    rental_id?: SortOrder
    rental_date?: SortOrder
    inventory_id?: SortOrder
    customer_id?: SortOrder
    return_date?: SortOrder
    staff_id?: SortOrder
    last_update?: SortOrder
  }

  export type rentalSumOrderByAggregateInput = {
    rental_id?: SortOrder
    inventory_id?: SortOrder
    customer_id?: SortOrder
    staff_id?: SortOrder
  }

  export type BytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type staffCountOrderByAggregateInput = {
    staff_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    address_id?: SortOrder
    email?: SortOrder
    store_id?: SortOrder
    active?: SortOrder
    username?: SortOrder
    password?: SortOrder
    last_update?: SortOrder
    picture?: SortOrder
  }

  export type staffAvgOrderByAggregateInput = {
    staff_id?: SortOrder
    address_id?: SortOrder
    store_id?: SortOrder
  }

  export type staffMaxOrderByAggregateInput = {
    staff_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    address_id?: SortOrder
    email?: SortOrder
    store_id?: SortOrder
    active?: SortOrder
    username?: SortOrder
    password?: SortOrder
    last_update?: SortOrder
    picture?: SortOrder
  }

  export type staffMinOrderByAggregateInput = {
    staff_id?: SortOrder
    first_name?: SortOrder
    last_name?: SortOrder
    address_id?: SortOrder
    email?: SortOrder
    store_id?: SortOrder
    active?: SortOrder
    username?: SortOrder
    password?: SortOrder
    last_update?: SortOrder
    picture?: SortOrder
  }

  export type staffSumOrderByAggregateInput = {
    staff_id?: SortOrder
    address_id?: SortOrder
    store_id?: SortOrder
  }

  export type BytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type storeCountOrderByAggregateInput = {
    store_id?: SortOrder
    manager_staff_id?: SortOrder
    address_id?: SortOrder
    last_update?: SortOrder
  }

  export type storeAvgOrderByAggregateInput = {
    store_id?: SortOrder
    manager_staff_id?: SortOrder
    address_id?: SortOrder
  }

  export type storeMaxOrderByAggregateInput = {
    store_id?: SortOrder
    manager_staff_id?: SortOrder
    address_id?: SortOrder
    last_update?: SortOrder
  }

  export type storeMinOrderByAggregateInput = {
    store_id?: SortOrder
    manager_staff_id?: SortOrder
    address_id?: SortOrder
    last_update?: SortOrder
  }

  export type storeSumOrderByAggregateInput = {
    store_id?: SortOrder
    manager_staff_id?: SortOrder
    address_id?: SortOrder
  }

  export type film_actorCreateNestedManyWithoutActorInput = {
    create?: XOR<film_actorCreateWithoutActorInput, film_actorUncheckedCreateWithoutActorInput> | film_actorCreateWithoutActorInput[] | film_actorUncheckedCreateWithoutActorInput[]
    connectOrCreate?: film_actorCreateOrConnectWithoutActorInput | film_actorCreateOrConnectWithoutActorInput[]
    createMany?: film_actorCreateManyActorInputEnvelope
    connect?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
  }

  export type film_actorUncheckedCreateNestedManyWithoutActorInput = {
    create?: XOR<film_actorCreateWithoutActorInput, film_actorUncheckedCreateWithoutActorInput> | film_actorCreateWithoutActorInput[] | film_actorUncheckedCreateWithoutActorInput[]
    connectOrCreate?: film_actorCreateOrConnectWithoutActorInput | film_actorCreateOrConnectWithoutActorInput[]
    createMany?: film_actorCreateManyActorInputEnvelope
    connect?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type film_actorUpdateManyWithoutActorNestedInput = {
    create?: XOR<film_actorCreateWithoutActorInput, film_actorUncheckedCreateWithoutActorInput> | film_actorCreateWithoutActorInput[] | film_actorUncheckedCreateWithoutActorInput[]
    connectOrCreate?: film_actorCreateOrConnectWithoutActorInput | film_actorCreateOrConnectWithoutActorInput[]
    upsert?: film_actorUpsertWithWhereUniqueWithoutActorInput | film_actorUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: film_actorCreateManyActorInputEnvelope
    set?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    disconnect?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    delete?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    connect?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    update?: film_actorUpdateWithWhereUniqueWithoutActorInput | film_actorUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: film_actorUpdateManyWithWhereWithoutActorInput | film_actorUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: film_actorScalarWhereInput | film_actorScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type film_actorUncheckedUpdateManyWithoutActorNestedInput = {
    create?: XOR<film_actorCreateWithoutActorInput, film_actorUncheckedCreateWithoutActorInput> | film_actorCreateWithoutActorInput[] | film_actorUncheckedCreateWithoutActorInput[]
    connectOrCreate?: film_actorCreateOrConnectWithoutActorInput | film_actorCreateOrConnectWithoutActorInput[]
    upsert?: film_actorUpsertWithWhereUniqueWithoutActorInput | film_actorUpsertWithWhereUniqueWithoutActorInput[]
    createMany?: film_actorCreateManyActorInputEnvelope
    set?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    disconnect?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    delete?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    connect?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    update?: film_actorUpdateWithWhereUniqueWithoutActorInput | film_actorUpdateWithWhereUniqueWithoutActorInput[]
    updateMany?: film_actorUpdateManyWithWhereWithoutActorInput | film_actorUpdateManyWithWhereWithoutActorInput[]
    deleteMany?: film_actorScalarWhereInput | film_actorScalarWhereInput[]
  }

  export type cityCreateNestedOneWithoutAddressInput = {
    create?: XOR<cityCreateWithoutAddressInput, cityUncheckedCreateWithoutAddressInput>
    connectOrCreate?: cityCreateOrConnectWithoutAddressInput
    connect?: cityWhereUniqueInput
  }

  export type customerCreateNestedManyWithoutAddressInput = {
    create?: XOR<customerCreateWithoutAddressInput, customerUncheckedCreateWithoutAddressInput> | customerCreateWithoutAddressInput[] | customerUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: customerCreateOrConnectWithoutAddressInput | customerCreateOrConnectWithoutAddressInput[]
    createMany?: customerCreateManyAddressInputEnvelope
    connect?: customerWhereUniqueInput | customerWhereUniqueInput[]
  }

  export type staffCreateNestedManyWithoutAddressInput = {
    create?: XOR<staffCreateWithoutAddressInput, staffUncheckedCreateWithoutAddressInput> | staffCreateWithoutAddressInput[] | staffUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: staffCreateOrConnectWithoutAddressInput | staffCreateOrConnectWithoutAddressInput[]
    createMany?: staffCreateManyAddressInputEnvelope
    connect?: staffWhereUniqueInput | staffWhereUniqueInput[]
  }

  export type storeCreateNestedManyWithoutAddressInput = {
    create?: XOR<storeCreateWithoutAddressInput, storeUncheckedCreateWithoutAddressInput> | storeCreateWithoutAddressInput[] | storeUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: storeCreateOrConnectWithoutAddressInput | storeCreateOrConnectWithoutAddressInput[]
    createMany?: storeCreateManyAddressInputEnvelope
    connect?: storeWhereUniqueInput | storeWhereUniqueInput[]
  }

  export type customerUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<customerCreateWithoutAddressInput, customerUncheckedCreateWithoutAddressInput> | customerCreateWithoutAddressInput[] | customerUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: customerCreateOrConnectWithoutAddressInput | customerCreateOrConnectWithoutAddressInput[]
    createMany?: customerCreateManyAddressInputEnvelope
    connect?: customerWhereUniqueInput | customerWhereUniqueInput[]
  }

  export type staffUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<staffCreateWithoutAddressInput, staffUncheckedCreateWithoutAddressInput> | staffCreateWithoutAddressInput[] | staffUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: staffCreateOrConnectWithoutAddressInput | staffCreateOrConnectWithoutAddressInput[]
    createMany?: staffCreateManyAddressInputEnvelope
    connect?: staffWhereUniqueInput | staffWhereUniqueInput[]
  }

  export type storeUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<storeCreateWithoutAddressInput, storeUncheckedCreateWithoutAddressInput> | storeCreateWithoutAddressInput[] | storeUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: storeCreateOrConnectWithoutAddressInput | storeCreateOrConnectWithoutAddressInput[]
    createMany?: storeCreateManyAddressInputEnvelope
    connect?: storeWhereUniqueInput | storeWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type cityUpdateOneRequiredWithoutAddressNestedInput = {
    create?: XOR<cityCreateWithoutAddressInput, cityUncheckedCreateWithoutAddressInput>
    connectOrCreate?: cityCreateOrConnectWithoutAddressInput
    upsert?: cityUpsertWithoutAddressInput
    connect?: cityWhereUniqueInput
    update?: XOR<XOR<cityUpdateToOneWithWhereWithoutAddressInput, cityUpdateWithoutAddressInput>, cityUncheckedUpdateWithoutAddressInput>
  }

  export type customerUpdateManyWithoutAddressNestedInput = {
    create?: XOR<customerCreateWithoutAddressInput, customerUncheckedCreateWithoutAddressInput> | customerCreateWithoutAddressInput[] | customerUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: customerCreateOrConnectWithoutAddressInput | customerCreateOrConnectWithoutAddressInput[]
    upsert?: customerUpsertWithWhereUniqueWithoutAddressInput | customerUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: customerCreateManyAddressInputEnvelope
    set?: customerWhereUniqueInput | customerWhereUniqueInput[]
    disconnect?: customerWhereUniqueInput | customerWhereUniqueInput[]
    delete?: customerWhereUniqueInput | customerWhereUniqueInput[]
    connect?: customerWhereUniqueInput | customerWhereUniqueInput[]
    update?: customerUpdateWithWhereUniqueWithoutAddressInput | customerUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: customerUpdateManyWithWhereWithoutAddressInput | customerUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: customerScalarWhereInput | customerScalarWhereInput[]
  }

  export type staffUpdateManyWithoutAddressNestedInput = {
    create?: XOR<staffCreateWithoutAddressInput, staffUncheckedCreateWithoutAddressInput> | staffCreateWithoutAddressInput[] | staffUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: staffCreateOrConnectWithoutAddressInput | staffCreateOrConnectWithoutAddressInput[]
    upsert?: staffUpsertWithWhereUniqueWithoutAddressInput | staffUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: staffCreateManyAddressInputEnvelope
    set?: staffWhereUniqueInput | staffWhereUniqueInput[]
    disconnect?: staffWhereUniqueInput | staffWhereUniqueInput[]
    delete?: staffWhereUniqueInput | staffWhereUniqueInput[]
    connect?: staffWhereUniqueInput | staffWhereUniqueInput[]
    update?: staffUpdateWithWhereUniqueWithoutAddressInput | staffUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: staffUpdateManyWithWhereWithoutAddressInput | staffUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: staffScalarWhereInput | staffScalarWhereInput[]
  }

  export type storeUpdateManyWithoutAddressNestedInput = {
    create?: XOR<storeCreateWithoutAddressInput, storeUncheckedCreateWithoutAddressInput> | storeCreateWithoutAddressInput[] | storeUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: storeCreateOrConnectWithoutAddressInput | storeCreateOrConnectWithoutAddressInput[]
    upsert?: storeUpsertWithWhereUniqueWithoutAddressInput | storeUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: storeCreateManyAddressInputEnvelope
    set?: storeWhereUniqueInput | storeWhereUniqueInput[]
    disconnect?: storeWhereUniqueInput | storeWhereUniqueInput[]
    delete?: storeWhereUniqueInput | storeWhereUniqueInput[]
    connect?: storeWhereUniqueInput | storeWhereUniqueInput[]
    update?: storeUpdateWithWhereUniqueWithoutAddressInput | storeUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: storeUpdateManyWithWhereWithoutAddressInput | storeUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: storeScalarWhereInput | storeScalarWhereInput[]
  }

  export type customerUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<customerCreateWithoutAddressInput, customerUncheckedCreateWithoutAddressInput> | customerCreateWithoutAddressInput[] | customerUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: customerCreateOrConnectWithoutAddressInput | customerCreateOrConnectWithoutAddressInput[]
    upsert?: customerUpsertWithWhereUniqueWithoutAddressInput | customerUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: customerCreateManyAddressInputEnvelope
    set?: customerWhereUniqueInput | customerWhereUniqueInput[]
    disconnect?: customerWhereUniqueInput | customerWhereUniqueInput[]
    delete?: customerWhereUniqueInput | customerWhereUniqueInput[]
    connect?: customerWhereUniqueInput | customerWhereUniqueInput[]
    update?: customerUpdateWithWhereUniqueWithoutAddressInput | customerUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: customerUpdateManyWithWhereWithoutAddressInput | customerUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: customerScalarWhereInput | customerScalarWhereInput[]
  }

  export type staffUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<staffCreateWithoutAddressInput, staffUncheckedCreateWithoutAddressInput> | staffCreateWithoutAddressInput[] | staffUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: staffCreateOrConnectWithoutAddressInput | staffCreateOrConnectWithoutAddressInput[]
    upsert?: staffUpsertWithWhereUniqueWithoutAddressInput | staffUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: staffCreateManyAddressInputEnvelope
    set?: staffWhereUniqueInput | staffWhereUniqueInput[]
    disconnect?: staffWhereUniqueInput | staffWhereUniqueInput[]
    delete?: staffWhereUniqueInput | staffWhereUniqueInput[]
    connect?: staffWhereUniqueInput | staffWhereUniqueInput[]
    update?: staffUpdateWithWhereUniqueWithoutAddressInput | staffUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: staffUpdateManyWithWhereWithoutAddressInput | staffUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: staffScalarWhereInput | staffScalarWhereInput[]
  }

  export type storeUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<storeCreateWithoutAddressInput, storeUncheckedCreateWithoutAddressInput> | storeCreateWithoutAddressInput[] | storeUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: storeCreateOrConnectWithoutAddressInput | storeCreateOrConnectWithoutAddressInput[]
    upsert?: storeUpsertWithWhereUniqueWithoutAddressInput | storeUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: storeCreateManyAddressInputEnvelope
    set?: storeWhereUniqueInput | storeWhereUniqueInput[]
    disconnect?: storeWhereUniqueInput | storeWhereUniqueInput[]
    delete?: storeWhereUniqueInput | storeWhereUniqueInput[]
    connect?: storeWhereUniqueInput | storeWhereUniqueInput[]
    update?: storeUpdateWithWhereUniqueWithoutAddressInput | storeUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: storeUpdateManyWithWhereWithoutAddressInput | storeUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: storeScalarWhereInput | storeScalarWhereInput[]
  }

  export type film_categoryCreateNestedManyWithoutCategoryInput = {
    create?: XOR<film_categoryCreateWithoutCategoryInput, film_categoryUncheckedCreateWithoutCategoryInput> | film_categoryCreateWithoutCategoryInput[] | film_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: film_categoryCreateOrConnectWithoutCategoryInput | film_categoryCreateOrConnectWithoutCategoryInput[]
    createMany?: film_categoryCreateManyCategoryInputEnvelope
    connect?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
  }

  export type film_categoryUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<film_categoryCreateWithoutCategoryInput, film_categoryUncheckedCreateWithoutCategoryInput> | film_categoryCreateWithoutCategoryInput[] | film_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: film_categoryCreateOrConnectWithoutCategoryInput | film_categoryCreateOrConnectWithoutCategoryInput[]
    createMany?: film_categoryCreateManyCategoryInputEnvelope
    connect?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
  }

  export type film_categoryUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<film_categoryCreateWithoutCategoryInput, film_categoryUncheckedCreateWithoutCategoryInput> | film_categoryCreateWithoutCategoryInput[] | film_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: film_categoryCreateOrConnectWithoutCategoryInput | film_categoryCreateOrConnectWithoutCategoryInput[]
    upsert?: film_categoryUpsertWithWhereUniqueWithoutCategoryInput | film_categoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: film_categoryCreateManyCategoryInputEnvelope
    set?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    disconnect?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    delete?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    connect?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    update?: film_categoryUpdateWithWhereUniqueWithoutCategoryInput | film_categoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: film_categoryUpdateManyWithWhereWithoutCategoryInput | film_categoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: film_categoryScalarWhereInput | film_categoryScalarWhereInput[]
  }

  export type film_categoryUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<film_categoryCreateWithoutCategoryInput, film_categoryUncheckedCreateWithoutCategoryInput> | film_categoryCreateWithoutCategoryInput[] | film_categoryUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: film_categoryCreateOrConnectWithoutCategoryInput | film_categoryCreateOrConnectWithoutCategoryInput[]
    upsert?: film_categoryUpsertWithWhereUniqueWithoutCategoryInput | film_categoryUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: film_categoryCreateManyCategoryInputEnvelope
    set?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    disconnect?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    delete?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    connect?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    update?: film_categoryUpdateWithWhereUniqueWithoutCategoryInput | film_categoryUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: film_categoryUpdateManyWithWhereWithoutCategoryInput | film_categoryUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: film_categoryScalarWhereInput | film_categoryScalarWhereInput[]
  }

  export type addressCreateNestedManyWithoutCityInput = {
    create?: XOR<addressCreateWithoutCityInput, addressUncheckedCreateWithoutCityInput> | addressCreateWithoutCityInput[] | addressUncheckedCreateWithoutCityInput[]
    connectOrCreate?: addressCreateOrConnectWithoutCityInput | addressCreateOrConnectWithoutCityInput[]
    createMany?: addressCreateManyCityInputEnvelope
    connect?: addressWhereUniqueInput | addressWhereUniqueInput[]
  }

  export type countryCreateNestedOneWithoutCityInput = {
    create?: XOR<countryCreateWithoutCityInput, countryUncheckedCreateWithoutCityInput>
    connectOrCreate?: countryCreateOrConnectWithoutCityInput
    connect?: countryWhereUniqueInput
  }

  export type addressUncheckedCreateNestedManyWithoutCityInput = {
    create?: XOR<addressCreateWithoutCityInput, addressUncheckedCreateWithoutCityInput> | addressCreateWithoutCityInput[] | addressUncheckedCreateWithoutCityInput[]
    connectOrCreate?: addressCreateOrConnectWithoutCityInput | addressCreateOrConnectWithoutCityInput[]
    createMany?: addressCreateManyCityInputEnvelope
    connect?: addressWhereUniqueInput | addressWhereUniqueInput[]
  }

  export type addressUpdateManyWithoutCityNestedInput = {
    create?: XOR<addressCreateWithoutCityInput, addressUncheckedCreateWithoutCityInput> | addressCreateWithoutCityInput[] | addressUncheckedCreateWithoutCityInput[]
    connectOrCreate?: addressCreateOrConnectWithoutCityInput | addressCreateOrConnectWithoutCityInput[]
    upsert?: addressUpsertWithWhereUniqueWithoutCityInput | addressUpsertWithWhereUniqueWithoutCityInput[]
    createMany?: addressCreateManyCityInputEnvelope
    set?: addressWhereUniqueInput | addressWhereUniqueInput[]
    disconnect?: addressWhereUniqueInput | addressWhereUniqueInput[]
    delete?: addressWhereUniqueInput | addressWhereUniqueInput[]
    connect?: addressWhereUniqueInput | addressWhereUniqueInput[]
    update?: addressUpdateWithWhereUniqueWithoutCityInput | addressUpdateWithWhereUniqueWithoutCityInput[]
    updateMany?: addressUpdateManyWithWhereWithoutCityInput | addressUpdateManyWithWhereWithoutCityInput[]
    deleteMany?: addressScalarWhereInput | addressScalarWhereInput[]
  }

  export type countryUpdateOneRequiredWithoutCityNestedInput = {
    create?: XOR<countryCreateWithoutCityInput, countryUncheckedCreateWithoutCityInput>
    connectOrCreate?: countryCreateOrConnectWithoutCityInput
    upsert?: countryUpsertWithoutCityInput
    connect?: countryWhereUniqueInput
    update?: XOR<XOR<countryUpdateToOneWithWhereWithoutCityInput, countryUpdateWithoutCityInput>, countryUncheckedUpdateWithoutCityInput>
  }

  export type addressUncheckedUpdateManyWithoutCityNestedInput = {
    create?: XOR<addressCreateWithoutCityInput, addressUncheckedCreateWithoutCityInput> | addressCreateWithoutCityInput[] | addressUncheckedCreateWithoutCityInput[]
    connectOrCreate?: addressCreateOrConnectWithoutCityInput | addressCreateOrConnectWithoutCityInput[]
    upsert?: addressUpsertWithWhereUniqueWithoutCityInput | addressUpsertWithWhereUniqueWithoutCityInput[]
    createMany?: addressCreateManyCityInputEnvelope
    set?: addressWhereUniqueInput | addressWhereUniqueInput[]
    disconnect?: addressWhereUniqueInput | addressWhereUniqueInput[]
    delete?: addressWhereUniqueInput | addressWhereUniqueInput[]
    connect?: addressWhereUniqueInput | addressWhereUniqueInput[]
    update?: addressUpdateWithWhereUniqueWithoutCityInput | addressUpdateWithWhereUniqueWithoutCityInput[]
    updateMany?: addressUpdateManyWithWhereWithoutCityInput | addressUpdateManyWithWhereWithoutCityInput[]
    deleteMany?: addressScalarWhereInput | addressScalarWhereInput[]
  }

  export type cityCreateNestedManyWithoutCountryInput = {
    create?: XOR<cityCreateWithoutCountryInput, cityUncheckedCreateWithoutCountryInput> | cityCreateWithoutCountryInput[] | cityUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: cityCreateOrConnectWithoutCountryInput | cityCreateOrConnectWithoutCountryInput[]
    createMany?: cityCreateManyCountryInputEnvelope
    connect?: cityWhereUniqueInput | cityWhereUniqueInput[]
  }

  export type cityUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<cityCreateWithoutCountryInput, cityUncheckedCreateWithoutCountryInput> | cityCreateWithoutCountryInput[] | cityUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: cityCreateOrConnectWithoutCountryInput | cityCreateOrConnectWithoutCountryInput[]
    createMany?: cityCreateManyCountryInputEnvelope
    connect?: cityWhereUniqueInput | cityWhereUniqueInput[]
  }

  export type cityUpdateManyWithoutCountryNestedInput = {
    create?: XOR<cityCreateWithoutCountryInput, cityUncheckedCreateWithoutCountryInput> | cityCreateWithoutCountryInput[] | cityUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: cityCreateOrConnectWithoutCountryInput | cityCreateOrConnectWithoutCountryInput[]
    upsert?: cityUpsertWithWhereUniqueWithoutCountryInput | cityUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: cityCreateManyCountryInputEnvelope
    set?: cityWhereUniqueInput | cityWhereUniqueInput[]
    disconnect?: cityWhereUniqueInput | cityWhereUniqueInput[]
    delete?: cityWhereUniqueInput | cityWhereUniqueInput[]
    connect?: cityWhereUniqueInput | cityWhereUniqueInput[]
    update?: cityUpdateWithWhereUniqueWithoutCountryInput | cityUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: cityUpdateManyWithWhereWithoutCountryInput | cityUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: cityScalarWhereInput | cityScalarWhereInput[]
  }

  export type cityUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<cityCreateWithoutCountryInput, cityUncheckedCreateWithoutCountryInput> | cityCreateWithoutCountryInput[] | cityUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: cityCreateOrConnectWithoutCountryInput | cityCreateOrConnectWithoutCountryInput[]
    upsert?: cityUpsertWithWhereUniqueWithoutCountryInput | cityUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: cityCreateManyCountryInputEnvelope
    set?: cityWhereUniqueInput | cityWhereUniqueInput[]
    disconnect?: cityWhereUniqueInput | cityWhereUniqueInput[]
    delete?: cityWhereUniqueInput | cityWhereUniqueInput[]
    connect?: cityWhereUniqueInput | cityWhereUniqueInput[]
    update?: cityUpdateWithWhereUniqueWithoutCountryInput | cityUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: cityUpdateManyWithWhereWithoutCountryInput | cityUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: cityScalarWhereInput | cityScalarWhereInput[]
  }

  export type addressCreateNestedOneWithoutCustomerInput = {
    create?: XOR<addressCreateWithoutCustomerInput, addressUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: addressCreateOrConnectWithoutCustomerInput
    connect?: addressWhereUniqueInput
  }

  export type storeCreateNestedOneWithoutCustomerInput = {
    create?: XOR<storeCreateWithoutCustomerInput, storeUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: storeCreateOrConnectWithoutCustomerInput
    connect?: storeWhereUniqueInput
  }

  export type film_commentCreateNestedManyWithoutCustomerInput = {
    create?: XOR<film_commentCreateWithoutCustomerInput, film_commentUncheckedCreateWithoutCustomerInput> | film_commentCreateWithoutCustomerInput[] | film_commentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: film_commentCreateOrConnectWithoutCustomerInput | film_commentCreateOrConnectWithoutCustomerInput[]
    createMany?: film_commentCreateManyCustomerInputEnvelope
    connect?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
  }

  export type mentionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<mentionCreateWithoutCustomerInput, mentionUncheckedCreateWithoutCustomerInput> | mentionCreateWithoutCustomerInput[] | mentionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: mentionCreateOrConnectWithoutCustomerInput | mentionCreateOrConnectWithoutCustomerInput[]
    createMany?: mentionCreateManyCustomerInputEnvelope
    connect?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
  }

  export type notificationCreateNestedManyWithoutCustomerInput = {
    create?: XOR<notificationCreateWithoutCustomerInput, notificationUncheckedCreateWithoutCustomerInput> | notificationCreateWithoutCustomerInput[] | notificationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutCustomerInput | notificationCreateOrConnectWithoutCustomerInput[]
    createMany?: notificationCreateManyCustomerInputEnvelope
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
  }

  export type post_reactionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<post_reactionCreateWithoutCustomerInput, post_reactionUncheckedCreateWithoutCustomerInput> | post_reactionCreateWithoutCustomerInput[] | post_reactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: post_reactionCreateOrConnectWithoutCustomerInput | post_reactionCreateOrConnectWithoutCustomerInput[]
    createMany?: post_reactionCreateManyCustomerInputEnvelope
    connect?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
  }

  export type rentalCreateNestedManyWithoutCustomerInput = {
    create?: XOR<rentalCreateWithoutCustomerInput, rentalUncheckedCreateWithoutCustomerInput> | rentalCreateWithoutCustomerInput[] | rentalUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: rentalCreateOrConnectWithoutCustomerInput | rentalCreateOrConnectWithoutCustomerInput[]
    createMany?: rentalCreateManyCustomerInputEnvelope
    connect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
  }

  export type film_commentUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<film_commentCreateWithoutCustomerInput, film_commentUncheckedCreateWithoutCustomerInput> | film_commentCreateWithoutCustomerInput[] | film_commentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: film_commentCreateOrConnectWithoutCustomerInput | film_commentCreateOrConnectWithoutCustomerInput[]
    createMany?: film_commentCreateManyCustomerInputEnvelope
    connect?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
  }

  export type mentionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<mentionCreateWithoutCustomerInput, mentionUncheckedCreateWithoutCustomerInput> | mentionCreateWithoutCustomerInput[] | mentionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: mentionCreateOrConnectWithoutCustomerInput | mentionCreateOrConnectWithoutCustomerInput[]
    createMany?: mentionCreateManyCustomerInputEnvelope
    connect?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
  }

  export type notificationUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<notificationCreateWithoutCustomerInput, notificationUncheckedCreateWithoutCustomerInput> | notificationCreateWithoutCustomerInput[] | notificationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutCustomerInput | notificationCreateOrConnectWithoutCustomerInput[]
    createMany?: notificationCreateManyCustomerInputEnvelope
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
  }

  export type post_reactionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<post_reactionCreateWithoutCustomerInput, post_reactionUncheckedCreateWithoutCustomerInput> | post_reactionCreateWithoutCustomerInput[] | post_reactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: post_reactionCreateOrConnectWithoutCustomerInput | post_reactionCreateOrConnectWithoutCustomerInput[]
    createMany?: post_reactionCreateManyCustomerInputEnvelope
    connect?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
  }

  export type rentalUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<rentalCreateWithoutCustomerInput, rentalUncheckedCreateWithoutCustomerInput> | rentalCreateWithoutCustomerInput[] | rentalUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: rentalCreateOrConnectWithoutCustomerInput | rentalCreateOrConnectWithoutCustomerInput[]
    createMany?: rentalCreateManyCustomerInputEnvelope
    connect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type addressUpdateOneRequiredWithoutCustomerNestedInput = {
    create?: XOR<addressCreateWithoutCustomerInput, addressUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: addressCreateOrConnectWithoutCustomerInput
    upsert?: addressUpsertWithoutCustomerInput
    connect?: addressWhereUniqueInput
    update?: XOR<XOR<addressUpdateToOneWithWhereWithoutCustomerInput, addressUpdateWithoutCustomerInput>, addressUncheckedUpdateWithoutCustomerInput>
  }

  export type storeUpdateOneRequiredWithoutCustomerNestedInput = {
    create?: XOR<storeCreateWithoutCustomerInput, storeUncheckedCreateWithoutCustomerInput>
    connectOrCreate?: storeCreateOrConnectWithoutCustomerInput
    upsert?: storeUpsertWithoutCustomerInput
    connect?: storeWhereUniqueInput
    update?: XOR<XOR<storeUpdateToOneWithWhereWithoutCustomerInput, storeUpdateWithoutCustomerInput>, storeUncheckedUpdateWithoutCustomerInput>
  }

  export type film_commentUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<film_commentCreateWithoutCustomerInput, film_commentUncheckedCreateWithoutCustomerInput> | film_commentCreateWithoutCustomerInput[] | film_commentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: film_commentCreateOrConnectWithoutCustomerInput | film_commentCreateOrConnectWithoutCustomerInput[]
    upsert?: film_commentUpsertWithWhereUniqueWithoutCustomerInput | film_commentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: film_commentCreateManyCustomerInputEnvelope
    set?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    disconnect?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    delete?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    connect?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    update?: film_commentUpdateWithWhereUniqueWithoutCustomerInput | film_commentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: film_commentUpdateManyWithWhereWithoutCustomerInput | film_commentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: film_commentScalarWhereInput | film_commentScalarWhereInput[]
  }

  export type mentionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<mentionCreateWithoutCustomerInput, mentionUncheckedCreateWithoutCustomerInput> | mentionCreateWithoutCustomerInput[] | mentionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: mentionCreateOrConnectWithoutCustomerInput | mentionCreateOrConnectWithoutCustomerInput[]
    upsert?: mentionUpsertWithWhereUniqueWithoutCustomerInput | mentionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: mentionCreateManyCustomerInputEnvelope
    set?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    disconnect?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    delete?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    connect?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    update?: mentionUpdateWithWhereUniqueWithoutCustomerInput | mentionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: mentionUpdateManyWithWhereWithoutCustomerInput | mentionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: mentionScalarWhereInput | mentionScalarWhereInput[]
  }

  export type notificationUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<notificationCreateWithoutCustomerInput, notificationUncheckedCreateWithoutCustomerInput> | notificationCreateWithoutCustomerInput[] | notificationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutCustomerInput | notificationCreateOrConnectWithoutCustomerInput[]
    upsert?: notificationUpsertWithWhereUniqueWithoutCustomerInput | notificationUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: notificationCreateManyCustomerInputEnvelope
    set?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    disconnect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    delete?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    update?: notificationUpdateWithWhereUniqueWithoutCustomerInput | notificationUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: notificationUpdateManyWithWhereWithoutCustomerInput | notificationUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: notificationScalarWhereInput | notificationScalarWhereInput[]
  }

  export type post_reactionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<post_reactionCreateWithoutCustomerInput, post_reactionUncheckedCreateWithoutCustomerInput> | post_reactionCreateWithoutCustomerInput[] | post_reactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: post_reactionCreateOrConnectWithoutCustomerInput | post_reactionCreateOrConnectWithoutCustomerInput[]
    upsert?: post_reactionUpsertWithWhereUniqueWithoutCustomerInput | post_reactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: post_reactionCreateManyCustomerInputEnvelope
    set?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    disconnect?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    delete?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    connect?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    update?: post_reactionUpdateWithWhereUniqueWithoutCustomerInput | post_reactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: post_reactionUpdateManyWithWhereWithoutCustomerInput | post_reactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: post_reactionScalarWhereInput | post_reactionScalarWhereInput[]
  }

  export type rentalUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<rentalCreateWithoutCustomerInput, rentalUncheckedCreateWithoutCustomerInput> | rentalCreateWithoutCustomerInput[] | rentalUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: rentalCreateOrConnectWithoutCustomerInput | rentalCreateOrConnectWithoutCustomerInput[]
    upsert?: rentalUpsertWithWhereUniqueWithoutCustomerInput | rentalUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: rentalCreateManyCustomerInputEnvelope
    set?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    disconnect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    delete?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    connect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    update?: rentalUpdateWithWhereUniqueWithoutCustomerInput | rentalUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: rentalUpdateManyWithWhereWithoutCustomerInput | rentalUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: rentalScalarWhereInput | rentalScalarWhereInput[]
  }

  export type film_commentUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<film_commentCreateWithoutCustomerInput, film_commentUncheckedCreateWithoutCustomerInput> | film_commentCreateWithoutCustomerInput[] | film_commentUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: film_commentCreateOrConnectWithoutCustomerInput | film_commentCreateOrConnectWithoutCustomerInput[]
    upsert?: film_commentUpsertWithWhereUniqueWithoutCustomerInput | film_commentUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: film_commentCreateManyCustomerInputEnvelope
    set?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    disconnect?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    delete?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    connect?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    update?: film_commentUpdateWithWhereUniqueWithoutCustomerInput | film_commentUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: film_commentUpdateManyWithWhereWithoutCustomerInput | film_commentUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: film_commentScalarWhereInput | film_commentScalarWhereInput[]
  }

  export type mentionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<mentionCreateWithoutCustomerInput, mentionUncheckedCreateWithoutCustomerInput> | mentionCreateWithoutCustomerInput[] | mentionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: mentionCreateOrConnectWithoutCustomerInput | mentionCreateOrConnectWithoutCustomerInput[]
    upsert?: mentionUpsertWithWhereUniqueWithoutCustomerInput | mentionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: mentionCreateManyCustomerInputEnvelope
    set?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    disconnect?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    delete?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    connect?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    update?: mentionUpdateWithWhereUniqueWithoutCustomerInput | mentionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: mentionUpdateManyWithWhereWithoutCustomerInput | mentionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: mentionScalarWhereInput | mentionScalarWhereInput[]
  }

  export type notificationUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<notificationCreateWithoutCustomerInput, notificationUncheckedCreateWithoutCustomerInput> | notificationCreateWithoutCustomerInput[] | notificationUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: notificationCreateOrConnectWithoutCustomerInput | notificationCreateOrConnectWithoutCustomerInput[]
    upsert?: notificationUpsertWithWhereUniqueWithoutCustomerInput | notificationUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: notificationCreateManyCustomerInputEnvelope
    set?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    disconnect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    delete?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    connect?: notificationWhereUniqueInput | notificationWhereUniqueInput[]
    update?: notificationUpdateWithWhereUniqueWithoutCustomerInput | notificationUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: notificationUpdateManyWithWhereWithoutCustomerInput | notificationUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: notificationScalarWhereInput | notificationScalarWhereInput[]
  }

  export type post_reactionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<post_reactionCreateWithoutCustomerInput, post_reactionUncheckedCreateWithoutCustomerInput> | post_reactionCreateWithoutCustomerInput[] | post_reactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: post_reactionCreateOrConnectWithoutCustomerInput | post_reactionCreateOrConnectWithoutCustomerInput[]
    upsert?: post_reactionUpsertWithWhereUniqueWithoutCustomerInput | post_reactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: post_reactionCreateManyCustomerInputEnvelope
    set?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    disconnect?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    delete?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    connect?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    update?: post_reactionUpdateWithWhereUniqueWithoutCustomerInput | post_reactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: post_reactionUpdateManyWithWhereWithoutCustomerInput | post_reactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: post_reactionScalarWhereInput | post_reactionScalarWhereInput[]
  }

  export type rentalUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<rentalCreateWithoutCustomerInput, rentalUncheckedCreateWithoutCustomerInput> | rentalCreateWithoutCustomerInput[] | rentalUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: rentalCreateOrConnectWithoutCustomerInput | rentalCreateOrConnectWithoutCustomerInput[]
    upsert?: rentalUpsertWithWhereUniqueWithoutCustomerInput | rentalUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: rentalCreateManyCustomerInputEnvelope
    set?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    disconnect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    delete?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    connect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    update?: rentalUpdateWithWhereUniqueWithoutCustomerInput | rentalUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: rentalUpdateManyWithWhereWithoutCustomerInput | rentalUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: rentalScalarWhereInput | rentalScalarWhereInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableEnummpaa_ratingFieldUpdateOperationsInput = {
    set?: $Enums.mpaa_rating | null
  }

  export type filmUpdatespecial_featuresInput = {
    set?: string[]
    push?: string | string[]
  }

  export type languageUpdateOneRequiredWithoutFilm_film_language_idTolanguageNestedInput = {
    create?: XOR<languageCreateWithoutFilm_film_language_idTolanguageInput, languageUncheckedCreateWithoutFilm_film_language_idTolanguageInput>
    connectOrCreate?: languageCreateOrConnectWithoutFilm_film_language_idTolanguageInput
    upsert?: languageUpsertWithoutFilm_film_language_idTolanguageInput
    connect?: languageWhereUniqueInput
    update?: XOR<XOR<languageUpdateToOneWithWhereWithoutFilm_film_language_idTolanguageInput, languageUpdateWithoutFilm_film_language_idTolanguageInput>, languageUncheckedUpdateWithoutFilm_film_language_idTolanguageInput>
  }

  export type languageUpdateOneWithoutFilm_film_original_language_idTolanguageNestedInput = {
    create?: XOR<languageCreateWithoutFilm_film_original_language_idTolanguageInput, languageUncheckedCreateWithoutFilm_film_original_language_idTolanguageInput>
    connectOrCreate?: languageCreateOrConnectWithoutFilm_film_original_language_idTolanguageInput
    upsert?: languageUpsertWithoutFilm_film_original_language_idTolanguageInput
    disconnect?: languageWhereInput | boolean
    delete?: languageWhereInput | boolean
    connect?: languageWhereUniqueInput
    update?: XOR<XOR<languageUpdateToOneWithWhereWithoutFilm_film_original_language_idTolanguageInput, languageUpdateWithoutFilm_film_original_language_idTolanguageInput>, languageUncheckedUpdateWithoutFilm_film_original_language_idTolanguageInput>
  }

  export type film_actorUpdateManyWithoutFilmNestedInput = {
    create?: XOR<film_actorCreateWithoutFilmInput, film_actorUncheckedCreateWithoutFilmInput> | film_actorCreateWithoutFilmInput[] | film_actorUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: film_actorCreateOrConnectWithoutFilmInput | film_actorCreateOrConnectWithoutFilmInput[]
    upsert?: film_actorUpsertWithWhereUniqueWithoutFilmInput | film_actorUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: film_actorCreateManyFilmInputEnvelope
    set?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    disconnect?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    delete?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    connect?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    update?: film_actorUpdateWithWhereUniqueWithoutFilmInput | film_actorUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: film_actorUpdateManyWithWhereWithoutFilmInput | film_actorUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: film_actorScalarWhereInput | film_actorScalarWhereInput[]
  }

  export type film_categoryUpdateManyWithoutFilmNestedInput = {
    create?: XOR<film_categoryCreateWithoutFilmInput, film_categoryUncheckedCreateWithoutFilmInput> | film_categoryCreateWithoutFilmInput[] | film_categoryUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: film_categoryCreateOrConnectWithoutFilmInput | film_categoryCreateOrConnectWithoutFilmInput[]
    upsert?: film_categoryUpsertWithWhereUniqueWithoutFilmInput | film_categoryUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: film_categoryCreateManyFilmInputEnvelope
    set?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    disconnect?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    delete?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    connect?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    update?: film_categoryUpdateWithWhereUniqueWithoutFilmInput | film_categoryUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: film_categoryUpdateManyWithWhereWithoutFilmInput | film_categoryUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: film_categoryScalarWhereInput | film_categoryScalarWhereInput[]
  }

  export type film_postUpdateManyWithoutFilmNestedInput = {
    create?: XOR<film_postCreateWithoutFilmInput, film_postUncheckedCreateWithoutFilmInput> | film_postCreateWithoutFilmInput[] | film_postUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: film_postCreateOrConnectWithoutFilmInput | film_postCreateOrConnectWithoutFilmInput[]
    upsert?: film_postUpsertWithWhereUniqueWithoutFilmInput | film_postUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: film_postCreateManyFilmInputEnvelope
    set?: film_postWhereUniqueInput | film_postWhereUniqueInput[]
    disconnect?: film_postWhereUniqueInput | film_postWhereUniqueInput[]
    delete?: film_postWhereUniqueInput | film_postWhereUniqueInput[]
    connect?: film_postWhereUniqueInput | film_postWhereUniqueInput[]
    update?: film_postUpdateWithWhereUniqueWithoutFilmInput | film_postUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: film_postUpdateManyWithWhereWithoutFilmInput | film_postUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: film_postScalarWhereInput | film_postScalarWhereInput[]
  }

  export type inventoryUpdateManyWithoutFilmNestedInput = {
    create?: XOR<inventoryCreateWithoutFilmInput, inventoryUncheckedCreateWithoutFilmInput> | inventoryCreateWithoutFilmInput[] | inventoryUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: inventoryCreateOrConnectWithoutFilmInput | inventoryCreateOrConnectWithoutFilmInput[]
    upsert?: inventoryUpsertWithWhereUniqueWithoutFilmInput | inventoryUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: inventoryCreateManyFilmInputEnvelope
    set?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    disconnect?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    delete?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    connect?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    update?: inventoryUpdateWithWhereUniqueWithoutFilmInput | inventoryUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: inventoryUpdateManyWithWhereWithoutFilmInput | inventoryUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: inventoryScalarWhereInput | inventoryScalarWhereInput[]
  }

  export type film_actorUncheckedUpdateManyWithoutFilmNestedInput = {
    create?: XOR<film_actorCreateWithoutFilmInput, film_actorUncheckedCreateWithoutFilmInput> | film_actorCreateWithoutFilmInput[] | film_actorUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: film_actorCreateOrConnectWithoutFilmInput | film_actorCreateOrConnectWithoutFilmInput[]
    upsert?: film_actorUpsertWithWhereUniqueWithoutFilmInput | film_actorUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: film_actorCreateManyFilmInputEnvelope
    set?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    disconnect?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    delete?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    connect?: film_actorWhereUniqueInput | film_actorWhereUniqueInput[]
    update?: film_actorUpdateWithWhereUniqueWithoutFilmInput | film_actorUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: film_actorUpdateManyWithWhereWithoutFilmInput | film_actorUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: film_actorScalarWhereInput | film_actorScalarWhereInput[]
  }

  export type film_categoryUncheckedUpdateManyWithoutFilmNestedInput = {
    create?: XOR<film_categoryCreateWithoutFilmInput, film_categoryUncheckedCreateWithoutFilmInput> | film_categoryCreateWithoutFilmInput[] | film_categoryUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: film_categoryCreateOrConnectWithoutFilmInput | film_categoryCreateOrConnectWithoutFilmInput[]
    upsert?: film_categoryUpsertWithWhereUniqueWithoutFilmInput | film_categoryUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: film_categoryCreateManyFilmInputEnvelope
    set?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    disconnect?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    delete?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    connect?: film_categoryWhereUniqueInput | film_categoryWhereUniqueInput[]
    update?: film_categoryUpdateWithWhereUniqueWithoutFilmInput | film_categoryUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: film_categoryUpdateManyWithWhereWithoutFilmInput | film_categoryUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: film_categoryScalarWhereInput | film_categoryScalarWhereInput[]
  }

  export type film_postUncheckedUpdateManyWithoutFilmNestedInput = {
    create?: XOR<film_postCreateWithoutFilmInput, film_postUncheckedCreateWithoutFilmInput> | film_postCreateWithoutFilmInput[] | film_postUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: film_postCreateOrConnectWithoutFilmInput | film_postCreateOrConnectWithoutFilmInput[]
    upsert?: film_postUpsertWithWhereUniqueWithoutFilmInput | film_postUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: film_postCreateManyFilmInputEnvelope
    set?: film_postWhereUniqueInput | film_postWhereUniqueInput[]
    disconnect?: film_postWhereUniqueInput | film_postWhereUniqueInput[]
    delete?: film_postWhereUniqueInput | film_postWhereUniqueInput[]
    connect?: film_postWhereUniqueInput | film_postWhereUniqueInput[]
    update?: film_postUpdateWithWhereUniqueWithoutFilmInput | film_postUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: film_postUpdateManyWithWhereWithoutFilmInput | film_postUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: film_postScalarWhereInput | film_postScalarWhereInput[]
  }

  export type inventoryUncheckedUpdateManyWithoutFilmNestedInput = {
    create?: XOR<inventoryCreateWithoutFilmInput, inventoryUncheckedCreateWithoutFilmInput> | inventoryCreateWithoutFilmInput[] | inventoryUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: inventoryCreateOrConnectWithoutFilmInput | inventoryCreateOrConnectWithoutFilmInput[]
    upsert?: inventoryUpsertWithWhereUniqueWithoutFilmInput | inventoryUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: inventoryCreateManyFilmInputEnvelope
    set?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    disconnect?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    delete?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    connect?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    update?: inventoryUpdateWithWhereUniqueWithoutFilmInput | inventoryUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: inventoryUpdateManyWithWhereWithoutFilmInput | inventoryUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: inventoryScalarWhereInput | inventoryScalarWhereInput[]
  }

  export type actorCreateNestedOneWithoutFilm_actorInput = {
    create?: XOR<actorCreateWithoutFilm_actorInput, actorUncheckedCreateWithoutFilm_actorInput>
    connectOrCreate?: actorCreateOrConnectWithoutFilm_actorInput
    connect?: actorWhereUniqueInput
  }

  export type filmCreateNestedOneWithoutFilm_actorInput = {
    connect?: filmWhereUniqueInput
  }

  export type actorUpdateOneRequiredWithoutFilm_actorNestedInput = {
    create?: XOR<actorCreateWithoutFilm_actorInput, actorUncheckedCreateWithoutFilm_actorInput>
    connectOrCreate?: actorCreateOrConnectWithoutFilm_actorInput
    upsert?: actorUpsertWithoutFilm_actorInput
    connect?: actorWhereUniqueInput
    update?: XOR<XOR<actorUpdateToOneWithWhereWithoutFilm_actorInput, actorUpdateWithoutFilm_actorInput>, actorUncheckedUpdateWithoutFilm_actorInput>
  }

  export type filmUpdateOneRequiredWithoutFilm_actorNestedInput = {
    connect?: filmWhereUniqueInput
    update?: XOR<XOR<filmUpdateToOneWithWhereWithoutFilm_actorInput, filmUpdateWithoutFilm_actorInput>, filmUncheckedUpdateWithoutFilm_actorInput>
  }

  export type categoryCreateNestedOneWithoutFilm_categoryInput = {
    create?: XOR<categoryCreateWithoutFilm_categoryInput, categoryUncheckedCreateWithoutFilm_categoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutFilm_categoryInput
    connect?: categoryWhereUniqueInput
  }

  export type filmCreateNestedOneWithoutFilm_categoryInput = {
    connect?: filmWhereUniqueInput
  }

  export type categoryUpdateOneRequiredWithoutFilm_categoryNestedInput = {
    create?: XOR<categoryCreateWithoutFilm_categoryInput, categoryUncheckedCreateWithoutFilm_categoryInput>
    connectOrCreate?: categoryCreateOrConnectWithoutFilm_categoryInput
    upsert?: categoryUpsertWithoutFilm_categoryInput
    connect?: categoryWhereUniqueInput
    update?: XOR<XOR<categoryUpdateToOneWithWhereWithoutFilm_categoryInput, categoryUpdateWithoutFilm_categoryInput>, categoryUncheckedUpdateWithoutFilm_categoryInput>
  }

  export type filmUpdateOneRequiredWithoutFilm_categoryNestedInput = {
    connect?: filmWhereUniqueInput
    update?: XOR<XOR<filmUpdateToOneWithWhereWithoutFilm_categoryInput, filmUpdateWithoutFilm_categoryInput>, filmUncheckedUpdateWithoutFilm_categoryInput>
  }

  export type customerCreateNestedOneWithoutFilm_commentInput = {
    create?: XOR<customerCreateWithoutFilm_commentInput, customerUncheckedCreateWithoutFilm_commentInput>
    connectOrCreate?: customerCreateOrConnectWithoutFilm_commentInput
    connect?: customerWhereUniqueInput
  }

  export type film_postCreateNestedOneWithoutFilm_commentInput = {
    create?: XOR<film_postCreateWithoutFilm_commentInput, film_postUncheckedCreateWithoutFilm_commentInput>
    connectOrCreate?: film_postCreateOrConnectWithoutFilm_commentInput
    connect?: film_postWhereUniqueInput
  }

  export type mentionCreateNestedManyWithoutFilm_commentInput = {
    create?: XOR<mentionCreateWithoutFilm_commentInput, mentionUncheckedCreateWithoutFilm_commentInput> | mentionCreateWithoutFilm_commentInput[] | mentionUncheckedCreateWithoutFilm_commentInput[]
    connectOrCreate?: mentionCreateOrConnectWithoutFilm_commentInput | mentionCreateOrConnectWithoutFilm_commentInput[]
    createMany?: mentionCreateManyFilm_commentInputEnvelope
    connect?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
  }

  export type mentionUncheckedCreateNestedManyWithoutFilm_commentInput = {
    create?: XOR<mentionCreateWithoutFilm_commentInput, mentionUncheckedCreateWithoutFilm_commentInput> | mentionCreateWithoutFilm_commentInput[] | mentionUncheckedCreateWithoutFilm_commentInput[]
    connectOrCreate?: mentionCreateOrConnectWithoutFilm_commentInput | mentionCreateOrConnectWithoutFilm_commentInput[]
    createMany?: mentionCreateManyFilm_commentInputEnvelope
    connect?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
  }

  export type customerUpdateOneRequiredWithoutFilm_commentNestedInput = {
    create?: XOR<customerCreateWithoutFilm_commentInput, customerUncheckedCreateWithoutFilm_commentInput>
    connectOrCreate?: customerCreateOrConnectWithoutFilm_commentInput
    upsert?: customerUpsertWithoutFilm_commentInput
    connect?: customerWhereUniqueInput
    update?: XOR<XOR<customerUpdateToOneWithWhereWithoutFilm_commentInput, customerUpdateWithoutFilm_commentInput>, customerUncheckedUpdateWithoutFilm_commentInput>
  }

  export type film_postUpdateOneRequiredWithoutFilm_commentNestedInput = {
    create?: XOR<film_postCreateWithoutFilm_commentInput, film_postUncheckedCreateWithoutFilm_commentInput>
    connectOrCreate?: film_postCreateOrConnectWithoutFilm_commentInput
    upsert?: film_postUpsertWithoutFilm_commentInput
    connect?: film_postWhereUniqueInput
    update?: XOR<XOR<film_postUpdateToOneWithWhereWithoutFilm_commentInput, film_postUpdateWithoutFilm_commentInput>, film_postUncheckedUpdateWithoutFilm_commentInput>
  }

  export type mentionUpdateManyWithoutFilm_commentNestedInput = {
    create?: XOR<mentionCreateWithoutFilm_commentInput, mentionUncheckedCreateWithoutFilm_commentInput> | mentionCreateWithoutFilm_commentInput[] | mentionUncheckedCreateWithoutFilm_commentInput[]
    connectOrCreate?: mentionCreateOrConnectWithoutFilm_commentInput | mentionCreateOrConnectWithoutFilm_commentInput[]
    upsert?: mentionUpsertWithWhereUniqueWithoutFilm_commentInput | mentionUpsertWithWhereUniqueWithoutFilm_commentInput[]
    createMany?: mentionCreateManyFilm_commentInputEnvelope
    set?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    disconnect?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    delete?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    connect?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    update?: mentionUpdateWithWhereUniqueWithoutFilm_commentInput | mentionUpdateWithWhereUniqueWithoutFilm_commentInput[]
    updateMany?: mentionUpdateManyWithWhereWithoutFilm_commentInput | mentionUpdateManyWithWhereWithoutFilm_commentInput[]
    deleteMany?: mentionScalarWhereInput | mentionScalarWhereInput[]
  }

  export type mentionUncheckedUpdateManyWithoutFilm_commentNestedInput = {
    create?: XOR<mentionCreateWithoutFilm_commentInput, mentionUncheckedCreateWithoutFilm_commentInput> | mentionCreateWithoutFilm_commentInput[] | mentionUncheckedCreateWithoutFilm_commentInput[]
    connectOrCreate?: mentionCreateOrConnectWithoutFilm_commentInput | mentionCreateOrConnectWithoutFilm_commentInput[]
    upsert?: mentionUpsertWithWhereUniqueWithoutFilm_commentInput | mentionUpsertWithWhereUniqueWithoutFilm_commentInput[]
    createMany?: mentionCreateManyFilm_commentInputEnvelope
    set?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    disconnect?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    delete?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    connect?: mentionWhereUniqueInput | mentionWhereUniqueInput[]
    update?: mentionUpdateWithWhereUniqueWithoutFilm_commentInput | mentionUpdateWithWhereUniqueWithoutFilm_commentInput[]
    updateMany?: mentionUpdateManyWithWhereWithoutFilm_commentInput | mentionUpdateManyWithWhereWithoutFilm_commentInput[]
    deleteMany?: mentionScalarWhereInput | mentionScalarWhereInput[]
  }

  export type film_commentCreateNestedManyWithoutFilm_postInput = {
    create?: XOR<film_commentCreateWithoutFilm_postInput, film_commentUncheckedCreateWithoutFilm_postInput> | film_commentCreateWithoutFilm_postInput[] | film_commentUncheckedCreateWithoutFilm_postInput[]
    connectOrCreate?: film_commentCreateOrConnectWithoutFilm_postInput | film_commentCreateOrConnectWithoutFilm_postInput[]
    createMany?: film_commentCreateManyFilm_postInputEnvelope
    connect?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
  }

  export type filmCreateNestedOneWithoutFilm_postInput = {
    connect?: filmWhereUniqueInput
  }

  export type post_reactionCreateNestedManyWithoutFilm_postInput = {
    create?: XOR<post_reactionCreateWithoutFilm_postInput, post_reactionUncheckedCreateWithoutFilm_postInput> | post_reactionCreateWithoutFilm_postInput[] | post_reactionUncheckedCreateWithoutFilm_postInput[]
    connectOrCreate?: post_reactionCreateOrConnectWithoutFilm_postInput | post_reactionCreateOrConnectWithoutFilm_postInput[]
    createMany?: post_reactionCreateManyFilm_postInputEnvelope
    connect?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
  }

  export type film_commentUncheckedCreateNestedManyWithoutFilm_postInput = {
    create?: XOR<film_commentCreateWithoutFilm_postInput, film_commentUncheckedCreateWithoutFilm_postInput> | film_commentCreateWithoutFilm_postInput[] | film_commentUncheckedCreateWithoutFilm_postInput[]
    connectOrCreate?: film_commentCreateOrConnectWithoutFilm_postInput | film_commentCreateOrConnectWithoutFilm_postInput[]
    createMany?: film_commentCreateManyFilm_postInputEnvelope
    connect?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
  }

  export type post_reactionUncheckedCreateNestedManyWithoutFilm_postInput = {
    create?: XOR<post_reactionCreateWithoutFilm_postInput, post_reactionUncheckedCreateWithoutFilm_postInput> | post_reactionCreateWithoutFilm_postInput[] | post_reactionUncheckedCreateWithoutFilm_postInput[]
    connectOrCreate?: post_reactionCreateOrConnectWithoutFilm_postInput | post_reactionCreateOrConnectWithoutFilm_postInput[]
    createMany?: post_reactionCreateManyFilm_postInputEnvelope
    connect?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
  }

  export type film_commentUpdateManyWithoutFilm_postNestedInput = {
    create?: XOR<film_commentCreateWithoutFilm_postInput, film_commentUncheckedCreateWithoutFilm_postInput> | film_commentCreateWithoutFilm_postInput[] | film_commentUncheckedCreateWithoutFilm_postInput[]
    connectOrCreate?: film_commentCreateOrConnectWithoutFilm_postInput | film_commentCreateOrConnectWithoutFilm_postInput[]
    upsert?: film_commentUpsertWithWhereUniqueWithoutFilm_postInput | film_commentUpsertWithWhereUniqueWithoutFilm_postInput[]
    createMany?: film_commentCreateManyFilm_postInputEnvelope
    set?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    disconnect?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    delete?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    connect?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    update?: film_commentUpdateWithWhereUniqueWithoutFilm_postInput | film_commentUpdateWithWhereUniqueWithoutFilm_postInput[]
    updateMany?: film_commentUpdateManyWithWhereWithoutFilm_postInput | film_commentUpdateManyWithWhereWithoutFilm_postInput[]
    deleteMany?: film_commentScalarWhereInput | film_commentScalarWhereInput[]
  }

  export type filmUpdateOneWithoutFilm_postNestedInput = {
    disconnect?: filmWhereInput | boolean
    delete?: filmWhereInput | boolean
    connect?: filmWhereUniqueInput
    update?: XOR<XOR<filmUpdateToOneWithWhereWithoutFilm_postInput, filmUpdateWithoutFilm_postInput>, filmUncheckedUpdateWithoutFilm_postInput>
  }

  export type post_reactionUpdateManyWithoutFilm_postNestedInput = {
    create?: XOR<post_reactionCreateWithoutFilm_postInput, post_reactionUncheckedCreateWithoutFilm_postInput> | post_reactionCreateWithoutFilm_postInput[] | post_reactionUncheckedCreateWithoutFilm_postInput[]
    connectOrCreate?: post_reactionCreateOrConnectWithoutFilm_postInput | post_reactionCreateOrConnectWithoutFilm_postInput[]
    upsert?: post_reactionUpsertWithWhereUniqueWithoutFilm_postInput | post_reactionUpsertWithWhereUniqueWithoutFilm_postInput[]
    createMany?: post_reactionCreateManyFilm_postInputEnvelope
    set?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    disconnect?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    delete?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    connect?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    update?: post_reactionUpdateWithWhereUniqueWithoutFilm_postInput | post_reactionUpdateWithWhereUniqueWithoutFilm_postInput[]
    updateMany?: post_reactionUpdateManyWithWhereWithoutFilm_postInput | post_reactionUpdateManyWithWhereWithoutFilm_postInput[]
    deleteMany?: post_reactionScalarWhereInput | post_reactionScalarWhereInput[]
  }

  export type film_commentUncheckedUpdateManyWithoutFilm_postNestedInput = {
    create?: XOR<film_commentCreateWithoutFilm_postInput, film_commentUncheckedCreateWithoutFilm_postInput> | film_commentCreateWithoutFilm_postInput[] | film_commentUncheckedCreateWithoutFilm_postInput[]
    connectOrCreate?: film_commentCreateOrConnectWithoutFilm_postInput | film_commentCreateOrConnectWithoutFilm_postInput[]
    upsert?: film_commentUpsertWithWhereUniqueWithoutFilm_postInput | film_commentUpsertWithWhereUniqueWithoutFilm_postInput[]
    createMany?: film_commentCreateManyFilm_postInputEnvelope
    set?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    disconnect?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    delete?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    connect?: film_commentWhereUniqueInput | film_commentWhereUniqueInput[]
    update?: film_commentUpdateWithWhereUniqueWithoutFilm_postInput | film_commentUpdateWithWhereUniqueWithoutFilm_postInput[]
    updateMany?: film_commentUpdateManyWithWhereWithoutFilm_postInput | film_commentUpdateManyWithWhereWithoutFilm_postInput[]
    deleteMany?: film_commentScalarWhereInput | film_commentScalarWhereInput[]
  }

  export type post_reactionUncheckedUpdateManyWithoutFilm_postNestedInput = {
    create?: XOR<post_reactionCreateWithoutFilm_postInput, post_reactionUncheckedCreateWithoutFilm_postInput> | post_reactionCreateWithoutFilm_postInput[] | post_reactionUncheckedCreateWithoutFilm_postInput[]
    connectOrCreate?: post_reactionCreateOrConnectWithoutFilm_postInput | post_reactionCreateOrConnectWithoutFilm_postInput[]
    upsert?: post_reactionUpsertWithWhereUniqueWithoutFilm_postInput | post_reactionUpsertWithWhereUniqueWithoutFilm_postInput[]
    createMany?: post_reactionCreateManyFilm_postInputEnvelope
    set?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    disconnect?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    delete?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    connect?: post_reactionWhereUniqueInput | post_reactionWhereUniqueInput[]
    update?: post_reactionUpdateWithWhereUniqueWithoutFilm_postInput | post_reactionUpdateWithWhereUniqueWithoutFilm_postInput[]
    updateMany?: post_reactionUpdateManyWithWhereWithoutFilm_postInput | post_reactionUpdateManyWithWhereWithoutFilm_postInput[]
    deleteMany?: post_reactionScalarWhereInput | post_reactionScalarWhereInput[]
  }

  export type filmCreateNestedOneWithoutInventoryInput = {
    connect?: filmWhereUniqueInput
  }

  export type storeCreateNestedOneWithoutInventoryInput = {
    create?: XOR<storeCreateWithoutInventoryInput, storeUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: storeCreateOrConnectWithoutInventoryInput
    connect?: storeWhereUniqueInput
  }

  export type rentalCreateNestedManyWithoutInventoryInput = {
    create?: XOR<rentalCreateWithoutInventoryInput, rentalUncheckedCreateWithoutInventoryInput> | rentalCreateWithoutInventoryInput[] | rentalUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: rentalCreateOrConnectWithoutInventoryInput | rentalCreateOrConnectWithoutInventoryInput[]
    createMany?: rentalCreateManyInventoryInputEnvelope
    connect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
  }

  export type rentalUncheckedCreateNestedManyWithoutInventoryInput = {
    create?: XOR<rentalCreateWithoutInventoryInput, rentalUncheckedCreateWithoutInventoryInput> | rentalCreateWithoutInventoryInput[] | rentalUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: rentalCreateOrConnectWithoutInventoryInput | rentalCreateOrConnectWithoutInventoryInput[]
    createMany?: rentalCreateManyInventoryInputEnvelope
    connect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
  }

  export type filmUpdateOneRequiredWithoutInventoryNestedInput = {
    connect?: filmWhereUniqueInput
    update?: XOR<XOR<filmUpdateToOneWithWhereWithoutInventoryInput, filmUpdateWithoutInventoryInput>, filmUncheckedUpdateWithoutInventoryInput>
  }

  export type storeUpdateOneRequiredWithoutInventoryNestedInput = {
    create?: XOR<storeCreateWithoutInventoryInput, storeUncheckedCreateWithoutInventoryInput>
    connectOrCreate?: storeCreateOrConnectWithoutInventoryInput
    upsert?: storeUpsertWithoutInventoryInput
    connect?: storeWhereUniqueInput
    update?: XOR<XOR<storeUpdateToOneWithWhereWithoutInventoryInput, storeUpdateWithoutInventoryInput>, storeUncheckedUpdateWithoutInventoryInput>
  }

  export type rentalUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<rentalCreateWithoutInventoryInput, rentalUncheckedCreateWithoutInventoryInput> | rentalCreateWithoutInventoryInput[] | rentalUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: rentalCreateOrConnectWithoutInventoryInput | rentalCreateOrConnectWithoutInventoryInput[]
    upsert?: rentalUpsertWithWhereUniqueWithoutInventoryInput | rentalUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: rentalCreateManyInventoryInputEnvelope
    set?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    disconnect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    delete?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    connect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    update?: rentalUpdateWithWhereUniqueWithoutInventoryInput | rentalUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: rentalUpdateManyWithWhereWithoutInventoryInput | rentalUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: rentalScalarWhereInput | rentalScalarWhereInput[]
  }

  export type rentalUncheckedUpdateManyWithoutInventoryNestedInput = {
    create?: XOR<rentalCreateWithoutInventoryInput, rentalUncheckedCreateWithoutInventoryInput> | rentalCreateWithoutInventoryInput[] | rentalUncheckedCreateWithoutInventoryInput[]
    connectOrCreate?: rentalCreateOrConnectWithoutInventoryInput | rentalCreateOrConnectWithoutInventoryInput[]
    upsert?: rentalUpsertWithWhereUniqueWithoutInventoryInput | rentalUpsertWithWhereUniqueWithoutInventoryInput[]
    createMany?: rentalCreateManyInventoryInputEnvelope
    set?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    disconnect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    delete?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    connect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    update?: rentalUpdateWithWhereUniqueWithoutInventoryInput | rentalUpdateWithWhereUniqueWithoutInventoryInput[]
    updateMany?: rentalUpdateManyWithWhereWithoutInventoryInput | rentalUpdateManyWithWhereWithoutInventoryInput[]
    deleteMany?: rentalScalarWhereInput | rentalScalarWhereInput[]
  }

  export type filmCreateNestedManyWithoutLanguage_film_language_idTolanguageInput = {
    connect?: filmWhereUniqueInput | filmWhereUniqueInput[]
  }

  export type filmCreateNestedManyWithoutLanguage_film_original_language_idTolanguageInput = {
    connect?: filmWhereUniqueInput | filmWhereUniqueInput[]
  }

  export type filmUncheckedCreateNestedManyWithoutLanguage_film_language_idTolanguageInput = {
    connect?: filmWhereUniqueInput | filmWhereUniqueInput[]
  }

  export type filmUncheckedCreateNestedManyWithoutLanguage_film_original_language_idTolanguageInput = {
    connect?: filmWhereUniqueInput | filmWhereUniqueInput[]
  }

  export type filmUpdateManyWithoutLanguage_film_language_idTolanguageNestedInput = {
    set?: filmWhereUniqueInput | filmWhereUniqueInput[]
    disconnect?: filmWhereUniqueInput | filmWhereUniqueInput[]
    delete?: filmWhereUniqueInput | filmWhereUniqueInput[]
    connect?: filmWhereUniqueInput | filmWhereUniqueInput[]
    update?: filmUpdateWithWhereUniqueWithoutLanguage_film_language_idTolanguageInput | filmUpdateWithWhereUniqueWithoutLanguage_film_language_idTolanguageInput[]
    updateMany?: filmUpdateManyWithWhereWithoutLanguage_film_language_idTolanguageInput | filmUpdateManyWithWhereWithoutLanguage_film_language_idTolanguageInput[]
    deleteMany?: filmScalarWhereInput | filmScalarWhereInput[]
  }

  export type filmUpdateManyWithoutLanguage_film_original_language_idTolanguageNestedInput = {
    set?: filmWhereUniqueInput | filmWhereUniqueInput[]
    disconnect?: filmWhereUniqueInput | filmWhereUniqueInput[]
    delete?: filmWhereUniqueInput | filmWhereUniqueInput[]
    connect?: filmWhereUniqueInput | filmWhereUniqueInput[]
    update?: filmUpdateWithWhereUniqueWithoutLanguage_film_original_language_idTolanguageInput | filmUpdateWithWhereUniqueWithoutLanguage_film_original_language_idTolanguageInput[]
    updateMany?: filmUpdateManyWithWhereWithoutLanguage_film_original_language_idTolanguageInput | filmUpdateManyWithWhereWithoutLanguage_film_original_language_idTolanguageInput[]
    deleteMany?: filmScalarWhereInput | filmScalarWhereInput[]
  }

  export type filmUncheckedUpdateManyWithoutLanguage_film_language_idTolanguageNestedInput = {
    set?: filmWhereUniqueInput | filmWhereUniqueInput[]
    disconnect?: filmWhereUniqueInput | filmWhereUniqueInput[]
    delete?: filmWhereUniqueInput | filmWhereUniqueInput[]
    connect?: filmWhereUniqueInput | filmWhereUniqueInput[]
    update?: filmUpdateWithWhereUniqueWithoutLanguage_film_language_idTolanguageInput | filmUpdateWithWhereUniqueWithoutLanguage_film_language_idTolanguageInput[]
    updateMany?: filmUpdateManyWithWhereWithoutLanguage_film_language_idTolanguageInput | filmUpdateManyWithWhereWithoutLanguage_film_language_idTolanguageInput[]
    deleteMany?: filmScalarWhereInput | filmScalarWhereInput[]
  }

  export type filmUncheckedUpdateManyWithoutLanguage_film_original_language_idTolanguageNestedInput = {
    set?: filmWhereUniqueInput | filmWhereUniqueInput[]
    disconnect?: filmWhereUniqueInput | filmWhereUniqueInput[]
    delete?: filmWhereUniqueInput | filmWhereUniqueInput[]
    connect?: filmWhereUniqueInput | filmWhereUniqueInput[]
    update?: filmUpdateWithWhereUniqueWithoutLanguage_film_original_language_idTolanguageInput | filmUpdateWithWhereUniqueWithoutLanguage_film_original_language_idTolanguageInput[]
    updateMany?: filmUpdateManyWithWhereWithoutLanguage_film_original_language_idTolanguageInput | filmUpdateManyWithWhereWithoutLanguage_film_original_language_idTolanguageInput[]
    deleteMany?: filmScalarWhereInput | filmScalarWhereInput[]
  }

  export type film_commentCreateNestedOneWithoutMentionInput = {
    create?: XOR<film_commentCreateWithoutMentionInput, film_commentUncheckedCreateWithoutMentionInput>
    connectOrCreate?: film_commentCreateOrConnectWithoutMentionInput
    connect?: film_commentWhereUniqueInput
  }

  export type customerCreateNestedOneWithoutMentionInput = {
    create?: XOR<customerCreateWithoutMentionInput, customerUncheckedCreateWithoutMentionInput>
    connectOrCreate?: customerCreateOrConnectWithoutMentionInput
    connect?: customerWhereUniqueInput
  }

  export type notificationCreateNestedOneWithoutMentionInput = {
    create?: XOR<notificationCreateWithoutMentionInput, notificationUncheckedCreateWithoutMentionInput>
    connectOrCreate?: notificationCreateOrConnectWithoutMentionInput
    connect?: notificationWhereUniqueInput
  }

  export type notificationUncheckedCreateNestedOneWithoutMentionInput = {
    create?: XOR<notificationCreateWithoutMentionInput, notificationUncheckedCreateWithoutMentionInput>
    connectOrCreate?: notificationCreateOrConnectWithoutMentionInput
    connect?: notificationWhereUniqueInput
  }

  export type film_commentUpdateOneRequiredWithoutMentionNestedInput = {
    create?: XOR<film_commentCreateWithoutMentionInput, film_commentUncheckedCreateWithoutMentionInput>
    connectOrCreate?: film_commentCreateOrConnectWithoutMentionInput
    upsert?: film_commentUpsertWithoutMentionInput
    connect?: film_commentWhereUniqueInput
    update?: XOR<XOR<film_commentUpdateToOneWithWhereWithoutMentionInput, film_commentUpdateWithoutMentionInput>, film_commentUncheckedUpdateWithoutMentionInput>
  }

  export type customerUpdateOneRequiredWithoutMentionNestedInput = {
    create?: XOR<customerCreateWithoutMentionInput, customerUncheckedCreateWithoutMentionInput>
    connectOrCreate?: customerCreateOrConnectWithoutMentionInput
    upsert?: customerUpsertWithoutMentionInput
    connect?: customerWhereUniqueInput
    update?: XOR<XOR<customerUpdateToOneWithWhereWithoutMentionInput, customerUpdateWithoutMentionInput>, customerUncheckedUpdateWithoutMentionInput>
  }

  export type notificationUpdateOneWithoutMentionNestedInput = {
    create?: XOR<notificationCreateWithoutMentionInput, notificationUncheckedCreateWithoutMentionInput>
    connectOrCreate?: notificationCreateOrConnectWithoutMentionInput
    upsert?: notificationUpsertWithoutMentionInput
    disconnect?: notificationWhereInput | boolean
    delete?: notificationWhereInput | boolean
    connect?: notificationWhereUniqueInput
    update?: XOR<XOR<notificationUpdateToOneWithWhereWithoutMentionInput, notificationUpdateWithoutMentionInput>, notificationUncheckedUpdateWithoutMentionInput>
  }

  export type notificationUncheckedUpdateOneWithoutMentionNestedInput = {
    create?: XOR<notificationCreateWithoutMentionInput, notificationUncheckedCreateWithoutMentionInput>
    connectOrCreate?: notificationCreateOrConnectWithoutMentionInput
    upsert?: notificationUpsertWithoutMentionInput
    disconnect?: notificationWhereInput | boolean
    delete?: notificationWhereInput | boolean
    connect?: notificationWhereUniqueInput
    update?: XOR<XOR<notificationUpdateToOneWithWhereWithoutMentionInput, notificationUpdateWithoutMentionInput>, notificationUncheckedUpdateWithoutMentionInput>
  }

  export type mentionCreateNestedOneWithoutNotificationInput = {
    create?: XOR<mentionCreateWithoutNotificationInput, mentionUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: mentionCreateOrConnectWithoutNotificationInput
    connect?: mentionWhereUniqueInput
  }

  export type customerCreateNestedOneWithoutNotificationInput = {
    create?: XOR<customerCreateWithoutNotificationInput, customerUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: customerCreateOrConnectWithoutNotificationInput
    connect?: customerWhereUniqueInput
  }

  export type mentionUpdateOneRequiredWithoutNotificationNestedInput = {
    create?: XOR<mentionCreateWithoutNotificationInput, mentionUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: mentionCreateOrConnectWithoutNotificationInput
    upsert?: mentionUpsertWithoutNotificationInput
    connect?: mentionWhereUniqueInput
    update?: XOR<XOR<mentionUpdateToOneWithWhereWithoutNotificationInput, mentionUpdateWithoutNotificationInput>, mentionUncheckedUpdateWithoutNotificationInput>
  }

  export type customerUpdateOneRequiredWithoutNotificationNestedInput = {
    create?: XOR<customerCreateWithoutNotificationInput, customerUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: customerCreateOrConnectWithoutNotificationInput
    upsert?: customerUpsertWithoutNotificationInput
    connect?: customerWhereUniqueInput
    update?: XOR<XOR<customerUpdateToOneWithWhereWithoutNotificationInput, customerUpdateWithoutNotificationInput>, customerUncheckedUpdateWithoutNotificationInput>
  }

  export type customerCreateNestedOneWithoutPost_reactionInput = {
    create?: XOR<customerCreateWithoutPost_reactionInput, customerUncheckedCreateWithoutPost_reactionInput>
    connectOrCreate?: customerCreateOrConnectWithoutPost_reactionInput
    connect?: customerWhereUniqueInput
  }

  export type film_postCreateNestedOneWithoutPost_reactionInput = {
    create?: XOR<film_postCreateWithoutPost_reactionInput, film_postUncheckedCreateWithoutPost_reactionInput>
    connectOrCreate?: film_postCreateOrConnectWithoutPost_reactionInput
    connect?: film_postWhereUniqueInput
  }

  export type NullableEnumreaction_typeFieldUpdateOperationsInput = {
    set?: $Enums.reaction_type | null
  }

  export type customerUpdateOneRequiredWithoutPost_reactionNestedInput = {
    create?: XOR<customerCreateWithoutPost_reactionInput, customerUncheckedCreateWithoutPost_reactionInput>
    connectOrCreate?: customerCreateOrConnectWithoutPost_reactionInput
    upsert?: customerUpsertWithoutPost_reactionInput
    connect?: customerWhereUniqueInput
    update?: XOR<XOR<customerUpdateToOneWithWhereWithoutPost_reactionInput, customerUpdateWithoutPost_reactionInput>, customerUncheckedUpdateWithoutPost_reactionInput>
  }

  export type film_postUpdateOneRequiredWithoutPost_reactionNestedInput = {
    create?: XOR<film_postCreateWithoutPost_reactionInput, film_postUncheckedCreateWithoutPost_reactionInput>
    connectOrCreate?: film_postCreateOrConnectWithoutPost_reactionInput
    upsert?: film_postUpsertWithoutPost_reactionInput
    connect?: film_postWhereUniqueInput
    update?: XOR<XOR<film_postUpdateToOneWithWhereWithoutPost_reactionInput, film_postUpdateWithoutPost_reactionInput>, film_postUncheckedUpdateWithoutPost_reactionInput>
  }

  export type customerCreateNestedOneWithoutRentalInput = {
    create?: XOR<customerCreateWithoutRentalInput, customerUncheckedCreateWithoutRentalInput>
    connectOrCreate?: customerCreateOrConnectWithoutRentalInput
    connect?: customerWhereUniqueInput
  }

  export type inventoryCreateNestedOneWithoutRentalInput = {
    create?: XOR<inventoryCreateWithoutRentalInput, inventoryUncheckedCreateWithoutRentalInput>
    connectOrCreate?: inventoryCreateOrConnectWithoutRentalInput
    connect?: inventoryWhereUniqueInput
  }

  export type staffCreateNestedOneWithoutRentalInput = {
    create?: XOR<staffCreateWithoutRentalInput, staffUncheckedCreateWithoutRentalInput>
    connectOrCreate?: staffCreateOrConnectWithoutRentalInput
    connect?: staffWhereUniqueInput
  }

  export type customerUpdateOneRequiredWithoutRentalNestedInput = {
    create?: XOR<customerCreateWithoutRentalInput, customerUncheckedCreateWithoutRentalInput>
    connectOrCreate?: customerCreateOrConnectWithoutRentalInput
    upsert?: customerUpsertWithoutRentalInput
    connect?: customerWhereUniqueInput
    update?: XOR<XOR<customerUpdateToOneWithWhereWithoutRentalInput, customerUpdateWithoutRentalInput>, customerUncheckedUpdateWithoutRentalInput>
  }

  export type inventoryUpdateOneRequiredWithoutRentalNestedInput = {
    create?: XOR<inventoryCreateWithoutRentalInput, inventoryUncheckedCreateWithoutRentalInput>
    connectOrCreate?: inventoryCreateOrConnectWithoutRentalInput
    upsert?: inventoryUpsertWithoutRentalInput
    connect?: inventoryWhereUniqueInput
    update?: XOR<XOR<inventoryUpdateToOneWithWhereWithoutRentalInput, inventoryUpdateWithoutRentalInput>, inventoryUncheckedUpdateWithoutRentalInput>
  }

  export type staffUpdateOneRequiredWithoutRentalNestedInput = {
    create?: XOR<staffCreateWithoutRentalInput, staffUncheckedCreateWithoutRentalInput>
    connectOrCreate?: staffCreateOrConnectWithoutRentalInput
    upsert?: staffUpsertWithoutRentalInput
    connect?: staffWhereUniqueInput
    update?: XOR<XOR<staffUpdateToOneWithWhereWithoutRentalInput, staffUpdateWithoutRentalInput>, staffUncheckedUpdateWithoutRentalInput>
  }

  export type rentalCreateNestedManyWithoutStaffInput = {
    create?: XOR<rentalCreateWithoutStaffInput, rentalUncheckedCreateWithoutStaffInput> | rentalCreateWithoutStaffInput[] | rentalUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: rentalCreateOrConnectWithoutStaffInput | rentalCreateOrConnectWithoutStaffInput[]
    createMany?: rentalCreateManyStaffInputEnvelope
    connect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
  }

  export type addressCreateNestedOneWithoutStaffInput = {
    create?: XOR<addressCreateWithoutStaffInput, addressUncheckedCreateWithoutStaffInput>
    connectOrCreate?: addressCreateOrConnectWithoutStaffInput
    connect?: addressWhereUniqueInput
  }

  export type storeCreateNestedOneWithoutStaffInput = {
    create?: XOR<storeCreateWithoutStaffInput, storeUncheckedCreateWithoutStaffInput>
    connectOrCreate?: storeCreateOrConnectWithoutStaffInput
    connect?: storeWhereUniqueInput
  }

  export type rentalUncheckedCreateNestedManyWithoutStaffInput = {
    create?: XOR<rentalCreateWithoutStaffInput, rentalUncheckedCreateWithoutStaffInput> | rentalCreateWithoutStaffInput[] | rentalUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: rentalCreateOrConnectWithoutStaffInput | rentalCreateOrConnectWithoutStaffInput[]
    createMany?: rentalCreateManyStaffInputEnvelope
    connect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
  }

  export type NullableBytesFieldUpdateOperationsInput = {
    set?: Uint8Array | null
  }

  export type rentalUpdateManyWithoutStaffNestedInput = {
    create?: XOR<rentalCreateWithoutStaffInput, rentalUncheckedCreateWithoutStaffInput> | rentalCreateWithoutStaffInput[] | rentalUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: rentalCreateOrConnectWithoutStaffInput | rentalCreateOrConnectWithoutStaffInput[]
    upsert?: rentalUpsertWithWhereUniqueWithoutStaffInput | rentalUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: rentalCreateManyStaffInputEnvelope
    set?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    disconnect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    delete?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    connect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    update?: rentalUpdateWithWhereUniqueWithoutStaffInput | rentalUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: rentalUpdateManyWithWhereWithoutStaffInput | rentalUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: rentalScalarWhereInput | rentalScalarWhereInput[]
  }

  export type addressUpdateOneRequiredWithoutStaffNestedInput = {
    create?: XOR<addressCreateWithoutStaffInput, addressUncheckedCreateWithoutStaffInput>
    connectOrCreate?: addressCreateOrConnectWithoutStaffInput
    upsert?: addressUpsertWithoutStaffInput
    connect?: addressWhereUniqueInput
    update?: XOR<XOR<addressUpdateToOneWithWhereWithoutStaffInput, addressUpdateWithoutStaffInput>, addressUncheckedUpdateWithoutStaffInput>
  }

  export type storeUpdateOneRequiredWithoutStaffNestedInput = {
    create?: XOR<storeCreateWithoutStaffInput, storeUncheckedCreateWithoutStaffInput>
    connectOrCreate?: storeCreateOrConnectWithoutStaffInput
    upsert?: storeUpsertWithoutStaffInput
    connect?: storeWhereUniqueInput
    update?: XOR<XOR<storeUpdateToOneWithWhereWithoutStaffInput, storeUpdateWithoutStaffInput>, storeUncheckedUpdateWithoutStaffInput>
  }

  export type rentalUncheckedUpdateManyWithoutStaffNestedInput = {
    create?: XOR<rentalCreateWithoutStaffInput, rentalUncheckedCreateWithoutStaffInput> | rentalCreateWithoutStaffInput[] | rentalUncheckedCreateWithoutStaffInput[]
    connectOrCreate?: rentalCreateOrConnectWithoutStaffInput | rentalCreateOrConnectWithoutStaffInput[]
    upsert?: rentalUpsertWithWhereUniqueWithoutStaffInput | rentalUpsertWithWhereUniqueWithoutStaffInput[]
    createMany?: rentalCreateManyStaffInputEnvelope
    set?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    disconnect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    delete?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    connect?: rentalWhereUniqueInput | rentalWhereUniqueInput[]
    update?: rentalUpdateWithWhereUniqueWithoutStaffInput | rentalUpdateWithWhereUniqueWithoutStaffInput[]
    updateMany?: rentalUpdateManyWithWhereWithoutStaffInput | rentalUpdateManyWithWhereWithoutStaffInput[]
    deleteMany?: rentalScalarWhereInput | rentalScalarWhereInput[]
  }

  export type customerCreateNestedManyWithoutStoreInput = {
    create?: XOR<customerCreateWithoutStoreInput, customerUncheckedCreateWithoutStoreInput> | customerCreateWithoutStoreInput[] | customerUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: customerCreateOrConnectWithoutStoreInput | customerCreateOrConnectWithoutStoreInput[]
    createMany?: customerCreateManyStoreInputEnvelope
    connect?: customerWhereUniqueInput | customerWhereUniqueInput[]
  }

  export type inventoryCreateNestedManyWithoutStoreInput = {
    create?: XOR<inventoryCreateWithoutStoreInput, inventoryUncheckedCreateWithoutStoreInput> | inventoryCreateWithoutStoreInput[] | inventoryUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: inventoryCreateOrConnectWithoutStoreInput | inventoryCreateOrConnectWithoutStoreInput[]
    createMany?: inventoryCreateManyStoreInputEnvelope
    connect?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
  }

  export type staffCreateNestedManyWithoutStoreInput = {
    create?: XOR<staffCreateWithoutStoreInput, staffUncheckedCreateWithoutStoreInput> | staffCreateWithoutStoreInput[] | staffUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: staffCreateOrConnectWithoutStoreInput | staffCreateOrConnectWithoutStoreInput[]
    createMany?: staffCreateManyStoreInputEnvelope
    connect?: staffWhereUniqueInput | staffWhereUniqueInput[]
  }

  export type addressCreateNestedOneWithoutStoreInput = {
    create?: XOR<addressCreateWithoutStoreInput, addressUncheckedCreateWithoutStoreInput>
    connectOrCreate?: addressCreateOrConnectWithoutStoreInput
    connect?: addressWhereUniqueInput
  }

  export type customerUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<customerCreateWithoutStoreInput, customerUncheckedCreateWithoutStoreInput> | customerCreateWithoutStoreInput[] | customerUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: customerCreateOrConnectWithoutStoreInput | customerCreateOrConnectWithoutStoreInput[]
    createMany?: customerCreateManyStoreInputEnvelope
    connect?: customerWhereUniqueInput | customerWhereUniqueInput[]
  }

  export type inventoryUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<inventoryCreateWithoutStoreInput, inventoryUncheckedCreateWithoutStoreInput> | inventoryCreateWithoutStoreInput[] | inventoryUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: inventoryCreateOrConnectWithoutStoreInput | inventoryCreateOrConnectWithoutStoreInput[]
    createMany?: inventoryCreateManyStoreInputEnvelope
    connect?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
  }

  export type staffUncheckedCreateNestedManyWithoutStoreInput = {
    create?: XOR<staffCreateWithoutStoreInput, staffUncheckedCreateWithoutStoreInput> | staffCreateWithoutStoreInput[] | staffUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: staffCreateOrConnectWithoutStoreInput | staffCreateOrConnectWithoutStoreInput[]
    createMany?: staffCreateManyStoreInputEnvelope
    connect?: staffWhereUniqueInput | staffWhereUniqueInput[]
  }

  export type customerUpdateManyWithoutStoreNestedInput = {
    create?: XOR<customerCreateWithoutStoreInput, customerUncheckedCreateWithoutStoreInput> | customerCreateWithoutStoreInput[] | customerUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: customerCreateOrConnectWithoutStoreInput | customerCreateOrConnectWithoutStoreInput[]
    upsert?: customerUpsertWithWhereUniqueWithoutStoreInput | customerUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: customerCreateManyStoreInputEnvelope
    set?: customerWhereUniqueInput | customerWhereUniqueInput[]
    disconnect?: customerWhereUniqueInput | customerWhereUniqueInput[]
    delete?: customerWhereUniqueInput | customerWhereUniqueInput[]
    connect?: customerWhereUniqueInput | customerWhereUniqueInput[]
    update?: customerUpdateWithWhereUniqueWithoutStoreInput | customerUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: customerUpdateManyWithWhereWithoutStoreInput | customerUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: customerScalarWhereInput | customerScalarWhereInput[]
  }

  export type inventoryUpdateManyWithoutStoreNestedInput = {
    create?: XOR<inventoryCreateWithoutStoreInput, inventoryUncheckedCreateWithoutStoreInput> | inventoryCreateWithoutStoreInput[] | inventoryUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: inventoryCreateOrConnectWithoutStoreInput | inventoryCreateOrConnectWithoutStoreInput[]
    upsert?: inventoryUpsertWithWhereUniqueWithoutStoreInput | inventoryUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: inventoryCreateManyStoreInputEnvelope
    set?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    disconnect?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    delete?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    connect?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    update?: inventoryUpdateWithWhereUniqueWithoutStoreInput | inventoryUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: inventoryUpdateManyWithWhereWithoutStoreInput | inventoryUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: inventoryScalarWhereInput | inventoryScalarWhereInput[]
  }

  export type staffUpdateManyWithoutStoreNestedInput = {
    create?: XOR<staffCreateWithoutStoreInput, staffUncheckedCreateWithoutStoreInput> | staffCreateWithoutStoreInput[] | staffUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: staffCreateOrConnectWithoutStoreInput | staffCreateOrConnectWithoutStoreInput[]
    upsert?: staffUpsertWithWhereUniqueWithoutStoreInput | staffUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: staffCreateManyStoreInputEnvelope
    set?: staffWhereUniqueInput | staffWhereUniqueInput[]
    disconnect?: staffWhereUniqueInput | staffWhereUniqueInput[]
    delete?: staffWhereUniqueInput | staffWhereUniqueInput[]
    connect?: staffWhereUniqueInput | staffWhereUniqueInput[]
    update?: staffUpdateWithWhereUniqueWithoutStoreInput | staffUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: staffUpdateManyWithWhereWithoutStoreInput | staffUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: staffScalarWhereInput | staffScalarWhereInput[]
  }

  export type addressUpdateOneRequiredWithoutStoreNestedInput = {
    create?: XOR<addressCreateWithoutStoreInput, addressUncheckedCreateWithoutStoreInput>
    connectOrCreate?: addressCreateOrConnectWithoutStoreInput
    upsert?: addressUpsertWithoutStoreInput
    connect?: addressWhereUniqueInput
    update?: XOR<XOR<addressUpdateToOneWithWhereWithoutStoreInput, addressUpdateWithoutStoreInput>, addressUncheckedUpdateWithoutStoreInput>
  }

  export type customerUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<customerCreateWithoutStoreInput, customerUncheckedCreateWithoutStoreInput> | customerCreateWithoutStoreInput[] | customerUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: customerCreateOrConnectWithoutStoreInput | customerCreateOrConnectWithoutStoreInput[]
    upsert?: customerUpsertWithWhereUniqueWithoutStoreInput | customerUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: customerCreateManyStoreInputEnvelope
    set?: customerWhereUniqueInput | customerWhereUniqueInput[]
    disconnect?: customerWhereUniqueInput | customerWhereUniqueInput[]
    delete?: customerWhereUniqueInput | customerWhereUniqueInput[]
    connect?: customerWhereUniqueInput | customerWhereUniqueInput[]
    update?: customerUpdateWithWhereUniqueWithoutStoreInput | customerUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: customerUpdateManyWithWhereWithoutStoreInput | customerUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: customerScalarWhereInput | customerScalarWhereInput[]
  }

  export type inventoryUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<inventoryCreateWithoutStoreInput, inventoryUncheckedCreateWithoutStoreInput> | inventoryCreateWithoutStoreInput[] | inventoryUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: inventoryCreateOrConnectWithoutStoreInput | inventoryCreateOrConnectWithoutStoreInput[]
    upsert?: inventoryUpsertWithWhereUniqueWithoutStoreInput | inventoryUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: inventoryCreateManyStoreInputEnvelope
    set?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    disconnect?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    delete?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    connect?: inventoryWhereUniqueInput | inventoryWhereUniqueInput[]
    update?: inventoryUpdateWithWhereUniqueWithoutStoreInput | inventoryUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: inventoryUpdateManyWithWhereWithoutStoreInput | inventoryUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: inventoryScalarWhereInput | inventoryScalarWhereInput[]
  }

  export type staffUncheckedUpdateManyWithoutStoreNestedInput = {
    create?: XOR<staffCreateWithoutStoreInput, staffUncheckedCreateWithoutStoreInput> | staffCreateWithoutStoreInput[] | staffUncheckedCreateWithoutStoreInput[]
    connectOrCreate?: staffCreateOrConnectWithoutStoreInput | staffCreateOrConnectWithoutStoreInput[]
    upsert?: staffUpsertWithWhereUniqueWithoutStoreInput | staffUpsertWithWhereUniqueWithoutStoreInput[]
    createMany?: staffCreateManyStoreInputEnvelope
    set?: staffWhereUniqueInput | staffWhereUniqueInput[]
    disconnect?: staffWhereUniqueInput | staffWhereUniqueInput[]
    delete?: staffWhereUniqueInput | staffWhereUniqueInput[]
    connect?: staffWhereUniqueInput | staffWhereUniqueInput[]
    update?: staffUpdateWithWhereUniqueWithoutStoreInput | staffUpdateWithWhereUniqueWithoutStoreInput[]
    updateMany?: staffUpdateManyWithWhereWithoutStoreInput | staffUpdateManyWithWhereWithoutStoreInput[]
    deleteMany?: staffScalarWhereInput | staffScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedEnummpaa_ratingNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.mpaa_rating | Enummpaa_ratingFieldRefInput<$PrismaModel> | null
    in?: $Enums.mpaa_rating[] | ListEnummpaa_ratingFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.mpaa_rating[] | ListEnummpaa_ratingFieldRefInput<$PrismaModel> | null
    not?: NestedEnummpaa_ratingNullableFilter<$PrismaModel> | $Enums.mpaa_rating | null
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedEnummpaa_ratingNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.mpaa_rating | Enummpaa_ratingFieldRefInput<$PrismaModel> | null
    in?: $Enums.mpaa_rating[] | ListEnummpaa_ratingFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.mpaa_rating[] | ListEnummpaa_ratingFieldRefInput<$PrismaModel> | null
    not?: NestedEnummpaa_ratingNullableWithAggregatesFilter<$PrismaModel> | $Enums.mpaa_rating | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnummpaa_ratingNullableFilter<$PrismaModel>
    _max?: NestedEnummpaa_ratingNullableFilter<$PrismaModel>
  }

  export type NestedEnumreaction_typeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.reaction_type | Enumreaction_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.reaction_type[] | ListEnumreaction_typeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.reaction_type[] | ListEnumreaction_typeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumreaction_typeNullableFilter<$PrismaModel> | $Enums.reaction_type | null
  }

  export type NestedEnumreaction_typeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.reaction_type | Enumreaction_typeFieldRefInput<$PrismaModel> | null
    in?: $Enums.reaction_type[] | ListEnumreaction_typeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.reaction_type[] | ListEnumreaction_typeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumreaction_typeNullableWithAggregatesFilter<$PrismaModel> | $Enums.reaction_type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumreaction_typeNullableFilter<$PrismaModel>
    _max?: NestedEnumreaction_typeNullableFilter<$PrismaModel>
  }

  export type NestedBytesNullableFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableFilter<$PrismaModel> | Uint8Array | null
  }

  export type NestedBytesNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Uint8Array | BytesFieldRefInput<$PrismaModel> | null
    in?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    notIn?: Uint8Array[] | ListBytesFieldRefInput<$PrismaModel> | null
    not?: NestedBytesNullableWithAggregatesFilter<$PrismaModel> | Uint8Array | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBytesNullableFilter<$PrismaModel>
    _max?: NestedBytesNullableFilter<$PrismaModel>
  }

  export type film_actorCreateWithoutActorInput = {
    last_update?: Date | string
    film: filmCreateNestedOneWithoutFilm_actorInput
  }

  export type film_actorUncheckedCreateWithoutActorInput = {
    film_id: number
    last_update?: Date | string
  }

  export type film_actorCreateOrConnectWithoutActorInput = {
    where: film_actorWhereUniqueInput
    create: XOR<film_actorCreateWithoutActorInput, film_actorUncheckedCreateWithoutActorInput>
  }

  export type film_actorCreateManyActorInputEnvelope = {
    data: film_actorCreateManyActorInput | film_actorCreateManyActorInput[]
    skipDuplicates?: boolean
  }

  export type film_actorUpsertWithWhereUniqueWithoutActorInput = {
    where: film_actorWhereUniqueInput
    update: XOR<film_actorUpdateWithoutActorInput, film_actorUncheckedUpdateWithoutActorInput>
    create: XOR<film_actorCreateWithoutActorInput, film_actorUncheckedCreateWithoutActorInput>
  }

  export type film_actorUpdateWithWhereUniqueWithoutActorInput = {
    where: film_actorWhereUniqueInput
    data: XOR<film_actorUpdateWithoutActorInput, film_actorUncheckedUpdateWithoutActorInput>
  }

  export type film_actorUpdateManyWithWhereWithoutActorInput = {
    where: film_actorScalarWhereInput
    data: XOR<film_actorUpdateManyMutationInput, film_actorUncheckedUpdateManyWithoutActorInput>
  }

  export type film_actorScalarWhereInput = {
    AND?: film_actorScalarWhereInput | film_actorScalarWhereInput[]
    OR?: film_actorScalarWhereInput[]
    NOT?: film_actorScalarWhereInput | film_actorScalarWhereInput[]
    actor_id?: IntFilter<"film_actor"> | number
    film_id?: IntFilter<"film_actor"> | number
    last_update?: DateTimeFilter<"film_actor"> | Date | string
  }

  export type cityCreateWithoutAddressInput = {
    city: string
    last_update?: Date | string
    country: countryCreateNestedOneWithoutCityInput
  }

  export type cityUncheckedCreateWithoutAddressInput = {
    city_id?: number
    city: string
    country_id: number
    last_update?: Date | string
  }

  export type cityCreateOrConnectWithoutAddressInput = {
    where: cityWhereUniqueInput
    create: XOR<cityCreateWithoutAddressInput, cityUncheckedCreateWithoutAddressInput>
  }

  export type customerCreateWithoutAddressInput = {
    first_name: string
    last_name: string
    email?: string | null
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    store: storeCreateNestedOneWithoutCustomerInput
    film_comment?: film_commentCreateNestedManyWithoutCustomerInput
    mention?: mentionCreateNestedManyWithoutCustomerInput
    notification?: notificationCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionCreateNestedManyWithoutCustomerInput
    rental?: rentalCreateNestedManyWithoutCustomerInput
  }

  export type customerUncheckedCreateWithoutAddressInput = {
    customer_id?: number
    store_id: number
    first_name: string
    last_name: string
    email?: string | null
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    film_comment?: film_commentUncheckedCreateNestedManyWithoutCustomerInput
    mention?: mentionUncheckedCreateNestedManyWithoutCustomerInput
    notification?: notificationUncheckedCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionUncheckedCreateNestedManyWithoutCustomerInput
    rental?: rentalUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type customerCreateOrConnectWithoutAddressInput = {
    where: customerWhereUniqueInput
    create: XOR<customerCreateWithoutAddressInput, customerUncheckedCreateWithoutAddressInput>
  }

  export type customerCreateManyAddressInputEnvelope = {
    data: customerCreateManyAddressInput | customerCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type staffCreateWithoutAddressInput = {
    first_name: string
    last_name: string
    email?: string | null
    active?: boolean
    username: string
    password?: string | null
    last_update?: Date | string
    picture?: Uint8Array | null
    rental?: rentalCreateNestedManyWithoutStaffInput
    store: storeCreateNestedOneWithoutStaffInput
  }

  export type staffUncheckedCreateWithoutAddressInput = {
    staff_id?: number
    first_name: string
    last_name: string
    email?: string | null
    store_id: number
    active?: boolean
    username: string
    password?: string | null
    last_update?: Date | string
    picture?: Uint8Array | null
    rental?: rentalUncheckedCreateNestedManyWithoutStaffInput
  }

  export type staffCreateOrConnectWithoutAddressInput = {
    where: staffWhereUniqueInput
    create: XOR<staffCreateWithoutAddressInput, staffUncheckedCreateWithoutAddressInput>
  }

  export type staffCreateManyAddressInputEnvelope = {
    data: staffCreateManyAddressInput | staffCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type storeCreateWithoutAddressInput = {
    manager_staff_id: number
    last_update?: Date | string
    customer?: customerCreateNestedManyWithoutStoreInput
    inventory?: inventoryCreateNestedManyWithoutStoreInput
    staff?: staffCreateNestedManyWithoutStoreInput
  }

  export type storeUncheckedCreateWithoutAddressInput = {
    store_id?: number
    manager_staff_id: number
    last_update?: Date | string
    customer?: customerUncheckedCreateNestedManyWithoutStoreInput
    inventory?: inventoryUncheckedCreateNestedManyWithoutStoreInput
    staff?: staffUncheckedCreateNestedManyWithoutStoreInput
  }

  export type storeCreateOrConnectWithoutAddressInput = {
    where: storeWhereUniqueInput
    create: XOR<storeCreateWithoutAddressInput, storeUncheckedCreateWithoutAddressInput>
  }

  export type storeCreateManyAddressInputEnvelope = {
    data: storeCreateManyAddressInput | storeCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type cityUpsertWithoutAddressInput = {
    update: XOR<cityUpdateWithoutAddressInput, cityUncheckedUpdateWithoutAddressInput>
    create: XOR<cityCreateWithoutAddressInput, cityUncheckedCreateWithoutAddressInput>
    where?: cityWhereInput
  }

  export type cityUpdateToOneWithWhereWithoutAddressInput = {
    where?: cityWhereInput
    data: XOR<cityUpdateWithoutAddressInput, cityUncheckedUpdateWithoutAddressInput>
  }

  export type cityUpdateWithoutAddressInput = {
    city?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    country?: countryUpdateOneRequiredWithoutCityNestedInput
  }

  export type cityUncheckedUpdateWithoutAddressInput = {
    city_id?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    country_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customerUpsertWithWhereUniqueWithoutAddressInput = {
    where: customerWhereUniqueInput
    update: XOR<customerUpdateWithoutAddressInput, customerUncheckedUpdateWithoutAddressInput>
    create: XOR<customerCreateWithoutAddressInput, customerUncheckedCreateWithoutAddressInput>
  }

  export type customerUpdateWithWhereUniqueWithoutAddressInput = {
    where: customerWhereUniqueInput
    data: XOR<customerUpdateWithoutAddressInput, customerUncheckedUpdateWithoutAddressInput>
  }

  export type customerUpdateManyWithWhereWithoutAddressInput = {
    where: customerScalarWhereInput
    data: XOR<customerUpdateManyMutationInput, customerUncheckedUpdateManyWithoutAddressInput>
  }

  export type customerScalarWhereInput = {
    AND?: customerScalarWhereInput | customerScalarWhereInput[]
    OR?: customerScalarWhereInput[]
    NOT?: customerScalarWhereInput | customerScalarWhereInput[]
    customer_id?: IntFilter<"customer"> | number
    store_id?: IntFilter<"customer"> | number
    first_name?: StringFilter<"customer"> | string
    last_name?: StringFilter<"customer"> | string
    email?: StringNullableFilter<"customer"> | string | null
    address_id?: IntFilter<"customer"> | number
    activebool?: BoolFilter<"customer"> | boolean
    create_date?: DateTimeFilter<"customer"> | Date | string
    last_update?: DateTimeNullableFilter<"customer"> | Date | string | null
    active?: IntNullableFilter<"customer"> | number | null
  }

  export type staffUpsertWithWhereUniqueWithoutAddressInput = {
    where: staffWhereUniqueInput
    update: XOR<staffUpdateWithoutAddressInput, staffUncheckedUpdateWithoutAddressInput>
    create: XOR<staffCreateWithoutAddressInput, staffUncheckedCreateWithoutAddressInput>
  }

  export type staffUpdateWithWhereUniqueWithoutAddressInput = {
    where: staffWhereUniqueInput
    data: XOR<staffUpdateWithoutAddressInput, staffUncheckedUpdateWithoutAddressInput>
  }

  export type staffUpdateManyWithWhereWithoutAddressInput = {
    where: staffScalarWhereInput
    data: XOR<staffUpdateManyMutationInput, staffUncheckedUpdateManyWithoutAddressInput>
  }

  export type staffScalarWhereInput = {
    AND?: staffScalarWhereInput | staffScalarWhereInput[]
    OR?: staffScalarWhereInput[]
    NOT?: staffScalarWhereInput | staffScalarWhereInput[]
    staff_id?: IntFilter<"staff"> | number
    first_name?: StringFilter<"staff"> | string
    last_name?: StringFilter<"staff"> | string
    address_id?: IntFilter<"staff"> | number
    email?: StringNullableFilter<"staff"> | string | null
    store_id?: IntFilter<"staff"> | number
    active?: BoolFilter<"staff"> | boolean
    username?: StringFilter<"staff"> | string
    password?: StringNullableFilter<"staff"> | string | null
    last_update?: DateTimeFilter<"staff"> | Date | string
    picture?: BytesNullableFilter<"staff"> | Uint8Array | null
  }

  export type storeUpsertWithWhereUniqueWithoutAddressInput = {
    where: storeWhereUniqueInput
    update: XOR<storeUpdateWithoutAddressInput, storeUncheckedUpdateWithoutAddressInput>
    create: XOR<storeCreateWithoutAddressInput, storeUncheckedCreateWithoutAddressInput>
  }

  export type storeUpdateWithWhereUniqueWithoutAddressInput = {
    where: storeWhereUniqueInput
    data: XOR<storeUpdateWithoutAddressInput, storeUncheckedUpdateWithoutAddressInput>
  }

  export type storeUpdateManyWithWhereWithoutAddressInput = {
    where: storeScalarWhereInput
    data: XOR<storeUpdateManyMutationInput, storeUncheckedUpdateManyWithoutAddressInput>
  }

  export type storeScalarWhereInput = {
    AND?: storeScalarWhereInput | storeScalarWhereInput[]
    OR?: storeScalarWhereInput[]
    NOT?: storeScalarWhereInput | storeScalarWhereInput[]
    store_id?: IntFilter<"store"> | number
    manager_staff_id?: IntFilter<"store"> | number
    address_id?: IntFilter<"store"> | number
    last_update?: DateTimeFilter<"store"> | Date | string
  }

  export type film_categoryCreateWithoutCategoryInput = {
    last_update?: Date | string
    film: filmCreateNestedOneWithoutFilm_categoryInput
  }

  export type film_categoryUncheckedCreateWithoutCategoryInput = {
    film_id: number
    last_update?: Date | string
  }

  export type film_categoryCreateOrConnectWithoutCategoryInput = {
    where: film_categoryWhereUniqueInput
    create: XOR<film_categoryCreateWithoutCategoryInput, film_categoryUncheckedCreateWithoutCategoryInput>
  }

  export type film_categoryCreateManyCategoryInputEnvelope = {
    data: film_categoryCreateManyCategoryInput | film_categoryCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type film_categoryUpsertWithWhereUniqueWithoutCategoryInput = {
    where: film_categoryWhereUniqueInput
    update: XOR<film_categoryUpdateWithoutCategoryInput, film_categoryUncheckedUpdateWithoutCategoryInput>
    create: XOR<film_categoryCreateWithoutCategoryInput, film_categoryUncheckedCreateWithoutCategoryInput>
  }

  export type film_categoryUpdateWithWhereUniqueWithoutCategoryInput = {
    where: film_categoryWhereUniqueInput
    data: XOR<film_categoryUpdateWithoutCategoryInput, film_categoryUncheckedUpdateWithoutCategoryInput>
  }

  export type film_categoryUpdateManyWithWhereWithoutCategoryInput = {
    where: film_categoryScalarWhereInput
    data: XOR<film_categoryUpdateManyMutationInput, film_categoryUncheckedUpdateManyWithoutCategoryInput>
  }

  export type film_categoryScalarWhereInput = {
    AND?: film_categoryScalarWhereInput | film_categoryScalarWhereInput[]
    OR?: film_categoryScalarWhereInput[]
    NOT?: film_categoryScalarWhereInput | film_categoryScalarWhereInput[]
    film_id?: IntFilter<"film_category"> | number
    category_id?: IntFilter<"film_category"> | number
    last_update?: DateTimeFilter<"film_category"> | Date | string
  }

  export type addressCreateWithoutCityInput = {
    address: string
    address2?: string | null
    district: string
    postal_code?: string | null
    phone: string
    last_update?: Date | string
    customer?: customerCreateNestedManyWithoutAddressInput
    staff?: staffCreateNestedManyWithoutAddressInput
    store?: storeCreateNestedManyWithoutAddressInput
  }

  export type addressUncheckedCreateWithoutCityInput = {
    address_id?: number
    address: string
    address2?: string | null
    district: string
    postal_code?: string | null
    phone: string
    last_update?: Date | string
    customer?: customerUncheckedCreateNestedManyWithoutAddressInput
    staff?: staffUncheckedCreateNestedManyWithoutAddressInput
    store?: storeUncheckedCreateNestedManyWithoutAddressInput
  }

  export type addressCreateOrConnectWithoutCityInput = {
    where: addressWhereUniqueInput
    create: XOR<addressCreateWithoutCityInput, addressUncheckedCreateWithoutCityInput>
  }

  export type addressCreateManyCityInputEnvelope = {
    data: addressCreateManyCityInput | addressCreateManyCityInput[]
    skipDuplicates?: boolean
  }

  export type countryCreateWithoutCityInput = {
    country: string
    last_update?: Date | string
  }

  export type countryUncheckedCreateWithoutCityInput = {
    country_id?: number
    country: string
    last_update?: Date | string
  }

  export type countryCreateOrConnectWithoutCityInput = {
    where: countryWhereUniqueInput
    create: XOR<countryCreateWithoutCityInput, countryUncheckedCreateWithoutCityInput>
  }

  export type addressUpsertWithWhereUniqueWithoutCityInput = {
    where: addressWhereUniqueInput
    update: XOR<addressUpdateWithoutCityInput, addressUncheckedUpdateWithoutCityInput>
    create: XOR<addressCreateWithoutCityInput, addressUncheckedCreateWithoutCityInput>
  }

  export type addressUpdateWithWhereUniqueWithoutCityInput = {
    where: addressWhereUniqueInput
    data: XOR<addressUpdateWithoutCityInput, addressUncheckedUpdateWithoutCityInput>
  }

  export type addressUpdateManyWithWhereWithoutCityInput = {
    where: addressScalarWhereInput
    data: XOR<addressUpdateManyMutationInput, addressUncheckedUpdateManyWithoutCityInput>
  }

  export type addressScalarWhereInput = {
    AND?: addressScalarWhereInput | addressScalarWhereInput[]
    OR?: addressScalarWhereInput[]
    NOT?: addressScalarWhereInput | addressScalarWhereInput[]
    address_id?: IntFilter<"address"> | number
    address?: StringFilter<"address"> | string
    address2?: StringNullableFilter<"address"> | string | null
    district?: StringFilter<"address"> | string
    city_id?: IntFilter<"address"> | number
    postal_code?: StringNullableFilter<"address"> | string | null
    phone?: StringFilter<"address"> | string
    last_update?: DateTimeFilter<"address"> | Date | string
  }

  export type countryUpsertWithoutCityInput = {
    update: XOR<countryUpdateWithoutCityInput, countryUncheckedUpdateWithoutCityInput>
    create: XOR<countryCreateWithoutCityInput, countryUncheckedCreateWithoutCityInput>
    where?: countryWhereInput
  }

  export type countryUpdateToOneWithWhereWithoutCityInput = {
    where?: countryWhereInput
    data: XOR<countryUpdateWithoutCityInput, countryUncheckedUpdateWithoutCityInput>
  }

  export type countryUpdateWithoutCityInput = {
    country?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type countryUncheckedUpdateWithoutCityInput = {
    country_id?: IntFieldUpdateOperationsInput | number
    country?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cityCreateWithoutCountryInput = {
    city: string
    last_update?: Date | string
    address?: addressCreateNestedManyWithoutCityInput
  }

  export type cityUncheckedCreateWithoutCountryInput = {
    city_id?: number
    city: string
    last_update?: Date | string
    address?: addressUncheckedCreateNestedManyWithoutCityInput
  }

  export type cityCreateOrConnectWithoutCountryInput = {
    where: cityWhereUniqueInput
    create: XOR<cityCreateWithoutCountryInput, cityUncheckedCreateWithoutCountryInput>
  }

  export type cityCreateManyCountryInputEnvelope = {
    data: cityCreateManyCountryInput | cityCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type cityUpsertWithWhereUniqueWithoutCountryInput = {
    where: cityWhereUniqueInput
    update: XOR<cityUpdateWithoutCountryInput, cityUncheckedUpdateWithoutCountryInput>
    create: XOR<cityCreateWithoutCountryInput, cityUncheckedCreateWithoutCountryInput>
  }

  export type cityUpdateWithWhereUniqueWithoutCountryInput = {
    where: cityWhereUniqueInput
    data: XOR<cityUpdateWithoutCountryInput, cityUncheckedUpdateWithoutCountryInput>
  }

  export type cityUpdateManyWithWhereWithoutCountryInput = {
    where: cityScalarWhereInput
    data: XOR<cityUpdateManyMutationInput, cityUncheckedUpdateManyWithoutCountryInput>
  }

  export type cityScalarWhereInput = {
    AND?: cityScalarWhereInput | cityScalarWhereInput[]
    OR?: cityScalarWhereInput[]
    NOT?: cityScalarWhereInput | cityScalarWhereInput[]
    city_id?: IntFilter<"city"> | number
    city?: StringFilter<"city"> | string
    country_id?: IntFilter<"city"> | number
    last_update?: DateTimeFilter<"city"> | Date | string
  }

  export type addressCreateWithoutCustomerInput = {
    address: string
    address2?: string | null
    district: string
    postal_code?: string | null
    phone: string
    last_update?: Date | string
    city: cityCreateNestedOneWithoutAddressInput
    staff?: staffCreateNestedManyWithoutAddressInput
    store?: storeCreateNestedManyWithoutAddressInput
  }

  export type addressUncheckedCreateWithoutCustomerInput = {
    address_id?: number
    address: string
    address2?: string | null
    district: string
    city_id: number
    postal_code?: string | null
    phone: string
    last_update?: Date | string
    staff?: staffUncheckedCreateNestedManyWithoutAddressInput
    store?: storeUncheckedCreateNestedManyWithoutAddressInput
  }

  export type addressCreateOrConnectWithoutCustomerInput = {
    where: addressWhereUniqueInput
    create: XOR<addressCreateWithoutCustomerInput, addressUncheckedCreateWithoutCustomerInput>
  }

  export type storeCreateWithoutCustomerInput = {
    manager_staff_id: number
    last_update?: Date | string
    inventory?: inventoryCreateNestedManyWithoutStoreInput
    staff?: staffCreateNestedManyWithoutStoreInput
    address: addressCreateNestedOneWithoutStoreInput
  }

  export type storeUncheckedCreateWithoutCustomerInput = {
    store_id?: number
    manager_staff_id: number
    address_id: number
    last_update?: Date | string
    inventory?: inventoryUncheckedCreateNestedManyWithoutStoreInput
    staff?: staffUncheckedCreateNestedManyWithoutStoreInput
  }

  export type storeCreateOrConnectWithoutCustomerInput = {
    where: storeWhereUniqueInput
    create: XOR<storeCreateWithoutCustomerInput, storeUncheckedCreateWithoutCustomerInput>
  }

  export type film_commentCreateWithoutCustomerInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    film_post: film_postCreateNestedOneWithoutFilm_commentInput
    mention?: mentionCreateNestedManyWithoutFilm_commentInput
  }

  export type film_commentUncheckedCreateWithoutCustomerInput = {
    comment_id?: number
    post_id: number
    content: string
    created_at: Date | string
    updated_at: Date | string
    mention?: mentionUncheckedCreateNestedManyWithoutFilm_commentInput
  }

  export type film_commentCreateOrConnectWithoutCustomerInput = {
    where: film_commentWhereUniqueInput
    create: XOR<film_commentCreateWithoutCustomerInput, film_commentUncheckedCreateWithoutCustomerInput>
  }

  export type film_commentCreateManyCustomerInputEnvelope = {
    data: film_commentCreateManyCustomerInput | film_commentCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type mentionCreateWithoutCustomerInput = {
    created_at: Date | string
    film_comment: film_commentCreateNestedOneWithoutMentionInput
    notification?: notificationCreateNestedOneWithoutMentionInput
  }

  export type mentionUncheckedCreateWithoutCustomerInput = {
    mention_id?: number
    created_at: Date | string
    comment_id: number
    notification?: notificationUncheckedCreateNestedOneWithoutMentionInput
  }

  export type mentionCreateOrConnectWithoutCustomerInput = {
    where: mentionWhereUniqueInput
    create: XOR<mentionCreateWithoutCustomerInput, mentionUncheckedCreateWithoutCustomerInput>
  }

  export type mentionCreateManyCustomerInputEnvelope = {
    data: mentionCreateManyCustomerInput | mentionCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type notificationCreateWithoutCustomerInput = {
    content: string
    created_at: Date | string
    is_read: boolean
    read_at: Date | string
    mention: mentionCreateNestedOneWithoutNotificationInput
  }

  export type notificationUncheckedCreateWithoutCustomerInput = {
    notification_id?: number
    mention_id: number
    content: string
    created_at: Date | string
    is_read: boolean
    read_at: Date | string
  }

  export type notificationCreateOrConnectWithoutCustomerInput = {
    where: notificationWhereUniqueInput
    create: XOR<notificationCreateWithoutCustomerInput, notificationUncheckedCreateWithoutCustomerInput>
  }

  export type notificationCreateManyCustomerInputEnvelope = {
    data: notificationCreateManyCustomerInput | notificationCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type post_reactionCreateWithoutCustomerInput = {
    reaction_type?: $Enums.reaction_type | null
    created_at: Date | string
    film_post: film_postCreateNestedOneWithoutPost_reactionInput
  }

  export type post_reactionUncheckedCreateWithoutCustomerInput = {
    reaction_id?: number
    reaction_type?: $Enums.reaction_type | null
    post_id: number
    created_at: Date | string
  }

  export type post_reactionCreateOrConnectWithoutCustomerInput = {
    where: post_reactionWhereUniqueInput
    create: XOR<post_reactionCreateWithoutCustomerInput, post_reactionUncheckedCreateWithoutCustomerInput>
  }

  export type post_reactionCreateManyCustomerInputEnvelope = {
    data: post_reactionCreateManyCustomerInput | post_reactionCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type rentalCreateWithoutCustomerInput = {
    rental_date: Date | string
    return_date?: Date | string | null
    last_update?: Date | string
    inventory: inventoryCreateNestedOneWithoutRentalInput
    staff: staffCreateNestedOneWithoutRentalInput
  }

  export type rentalUncheckedCreateWithoutCustomerInput = {
    rental_id?: number
    rental_date: Date | string
    inventory_id: number
    return_date?: Date | string | null
    staff_id: number
    last_update?: Date | string
  }

  export type rentalCreateOrConnectWithoutCustomerInput = {
    where: rentalWhereUniqueInput
    create: XOR<rentalCreateWithoutCustomerInput, rentalUncheckedCreateWithoutCustomerInput>
  }

  export type rentalCreateManyCustomerInputEnvelope = {
    data: rentalCreateManyCustomerInput | rentalCreateManyCustomerInput[]
    skipDuplicates?: boolean
  }

  export type addressUpsertWithoutCustomerInput = {
    update: XOR<addressUpdateWithoutCustomerInput, addressUncheckedUpdateWithoutCustomerInput>
    create: XOR<addressCreateWithoutCustomerInput, addressUncheckedCreateWithoutCustomerInput>
    where?: addressWhereInput
  }

  export type addressUpdateToOneWithWhereWithoutCustomerInput = {
    where?: addressWhereInput
    data: XOR<addressUpdateWithoutCustomerInput, addressUncheckedUpdateWithoutCustomerInput>
  }

  export type addressUpdateWithoutCustomerInput = {
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: cityUpdateOneRequiredWithoutAddressNestedInput
    staff?: staffUpdateManyWithoutAddressNestedInput
    store?: storeUpdateManyWithoutAddressNestedInput
  }

  export type addressUncheckedUpdateWithoutCustomerInput = {
    address_id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    city_id?: IntFieldUpdateOperationsInput | number
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    staff?: staffUncheckedUpdateManyWithoutAddressNestedInput
    store?: storeUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type storeUpsertWithoutCustomerInput = {
    update: XOR<storeUpdateWithoutCustomerInput, storeUncheckedUpdateWithoutCustomerInput>
    create: XOR<storeCreateWithoutCustomerInput, storeUncheckedCreateWithoutCustomerInput>
    where?: storeWhereInput
  }

  export type storeUpdateToOneWithWhereWithoutCustomerInput = {
    where?: storeWhereInput
    data: XOR<storeUpdateWithoutCustomerInput, storeUncheckedUpdateWithoutCustomerInput>
  }

  export type storeUpdateWithoutCustomerInput = {
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: inventoryUpdateManyWithoutStoreNestedInput
    staff?: staffUpdateManyWithoutStoreNestedInput
    address?: addressUpdateOneRequiredWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateWithoutCustomerInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: inventoryUncheckedUpdateManyWithoutStoreNestedInput
    staff?: staffUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type film_commentUpsertWithWhereUniqueWithoutCustomerInput = {
    where: film_commentWhereUniqueInput
    update: XOR<film_commentUpdateWithoutCustomerInput, film_commentUncheckedUpdateWithoutCustomerInput>
    create: XOR<film_commentCreateWithoutCustomerInput, film_commentUncheckedCreateWithoutCustomerInput>
  }

  export type film_commentUpdateWithWhereUniqueWithoutCustomerInput = {
    where: film_commentWhereUniqueInput
    data: XOR<film_commentUpdateWithoutCustomerInput, film_commentUncheckedUpdateWithoutCustomerInput>
  }

  export type film_commentUpdateManyWithWhereWithoutCustomerInput = {
    where: film_commentScalarWhereInput
    data: XOR<film_commentUpdateManyMutationInput, film_commentUncheckedUpdateManyWithoutCustomerInput>
  }

  export type film_commentScalarWhereInput = {
    AND?: film_commentScalarWhereInput | film_commentScalarWhereInput[]
    OR?: film_commentScalarWhereInput[]
    NOT?: film_commentScalarWhereInput | film_commentScalarWhereInput[]
    comment_id?: IntFilter<"film_comment"> | number
    post_id?: IntFilter<"film_comment"> | number
    customer_id?: IntFilter<"film_comment"> | number
    content?: StringFilter<"film_comment"> | string
    created_at?: DateTimeFilter<"film_comment"> | Date | string
    updated_at?: DateTimeFilter<"film_comment"> | Date | string
  }

  export type mentionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: mentionWhereUniqueInput
    update: XOR<mentionUpdateWithoutCustomerInput, mentionUncheckedUpdateWithoutCustomerInput>
    create: XOR<mentionCreateWithoutCustomerInput, mentionUncheckedCreateWithoutCustomerInput>
  }

  export type mentionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: mentionWhereUniqueInput
    data: XOR<mentionUpdateWithoutCustomerInput, mentionUncheckedUpdateWithoutCustomerInput>
  }

  export type mentionUpdateManyWithWhereWithoutCustomerInput = {
    where: mentionScalarWhereInput
    data: XOR<mentionUpdateManyMutationInput, mentionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type mentionScalarWhereInput = {
    AND?: mentionScalarWhereInput | mentionScalarWhereInput[]
    OR?: mentionScalarWhereInput[]
    NOT?: mentionScalarWhereInput | mentionScalarWhereInput[]
    mention_id?: IntFilter<"mention"> | number
    created_at?: DateTimeFilter<"mention"> | Date | string
    comment_id?: IntFilter<"mention"> | number
    mentioned_customer_id?: IntFilter<"mention"> | number
  }

  export type notificationUpsertWithWhereUniqueWithoutCustomerInput = {
    where: notificationWhereUniqueInput
    update: XOR<notificationUpdateWithoutCustomerInput, notificationUncheckedUpdateWithoutCustomerInput>
    create: XOR<notificationCreateWithoutCustomerInput, notificationUncheckedCreateWithoutCustomerInput>
  }

  export type notificationUpdateWithWhereUniqueWithoutCustomerInput = {
    where: notificationWhereUniqueInput
    data: XOR<notificationUpdateWithoutCustomerInput, notificationUncheckedUpdateWithoutCustomerInput>
  }

  export type notificationUpdateManyWithWhereWithoutCustomerInput = {
    where: notificationScalarWhereInput
    data: XOR<notificationUpdateManyMutationInput, notificationUncheckedUpdateManyWithoutCustomerInput>
  }

  export type notificationScalarWhereInput = {
    AND?: notificationScalarWhereInput | notificationScalarWhereInput[]
    OR?: notificationScalarWhereInput[]
    NOT?: notificationScalarWhereInput | notificationScalarWhereInput[]
    notification_id?: IntFilter<"notification"> | number
    mentioner_id?: IntFilter<"notification"> | number
    mention_id?: IntFilter<"notification"> | number
    content?: StringFilter<"notification"> | string
    created_at?: DateTimeFilter<"notification"> | Date | string
    is_read?: BoolFilter<"notification"> | boolean
    read_at?: DateTimeFilter<"notification"> | Date | string
  }

  export type post_reactionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: post_reactionWhereUniqueInput
    update: XOR<post_reactionUpdateWithoutCustomerInput, post_reactionUncheckedUpdateWithoutCustomerInput>
    create: XOR<post_reactionCreateWithoutCustomerInput, post_reactionUncheckedCreateWithoutCustomerInput>
  }

  export type post_reactionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: post_reactionWhereUniqueInput
    data: XOR<post_reactionUpdateWithoutCustomerInput, post_reactionUncheckedUpdateWithoutCustomerInput>
  }

  export type post_reactionUpdateManyWithWhereWithoutCustomerInput = {
    where: post_reactionScalarWhereInput
    data: XOR<post_reactionUpdateManyMutationInput, post_reactionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type post_reactionScalarWhereInput = {
    AND?: post_reactionScalarWhereInput | post_reactionScalarWhereInput[]
    OR?: post_reactionScalarWhereInput[]
    NOT?: post_reactionScalarWhereInput | post_reactionScalarWhereInput[]
    reaction_id?: IntFilter<"post_reaction"> | number
    reaction_type?: Enumreaction_typeNullableFilter<"post_reaction"> | $Enums.reaction_type | null
    post_id?: IntFilter<"post_reaction"> | number
    customer_id?: IntFilter<"post_reaction"> | number
    created_at?: DateTimeFilter<"post_reaction"> | Date | string
  }

  export type rentalUpsertWithWhereUniqueWithoutCustomerInput = {
    where: rentalWhereUniqueInput
    update: XOR<rentalUpdateWithoutCustomerInput, rentalUncheckedUpdateWithoutCustomerInput>
    create: XOR<rentalCreateWithoutCustomerInput, rentalUncheckedCreateWithoutCustomerInput>
  }

  export type rentalUpdateWithWhereUniqueWithoutCustomerInput = {
    where: rentalWhereUniqueInput
    data: XOR<rentalUpdateWithoutCustomerInput, rentalUncheckedUpdateWithoutCustomerInput>
  }

  export type rentalUpdateManyWithWhereWithoutCustomerInput = {
    where: rentalScalarWhereInput
    data: XOR<rentalUpdateManyMutationInput, rentalUncheckedUpdateManyWithoutCustomerInput>
  }

  export type rentalScalarWhereInput = {
    AND?: rentalScalarWhereInput | rentalScalarWhereInput[]
    OR?: rentalScalarWhereInput[]
    NOT?: rentalScalarWhereInput | rentalScalarWhereInput[]
    rental_id?: IntFilter<"rental"> | number
    rental_date?: DateTimeFilter<"rental"> | Date | string
    inventory_id?: IntFilter<"rental"> | number
    customer_id?: IntFilter<"rental"> | number
    return_date?: DateTimeNullableFilter<"rental"> | Date | string | null
    staff_id?: IntFilter<"rental"> | number
    last_update?: DateTimeFilter<"rental"> | Date | string
  }

  export type languageCreateWithoutFilm_film_language_idTolanguageInput = {
    name: string
    last_update?: Date | string
    film_film_original_language_idTolanguage?: filmCreateNestedManyWithoutLanguage_film_original_language_idTolanguageInput
  }

  export type languageUncheckedCreateWithoutFilm_film_language_idTolanguageInput = {
    language_id?: number
    name: string
    last_update?: Date | string
    film_film_original_language_idTolanguage?: filmUncheckedCreateNestedManyWithoutLanguage_film_original_language_idTolanguageInput
  }

  export type languageCreateOrConnectWithoutFilm_film_language_idTolanguageInput = {
    where: languageWhereUniqueInput
    create: XOR<languageCreateWithoutFilm_film_language_idTolanguageInput, languageUncheckedCreateWithoutFilm_film_language_idTolanguageInput>
  }

  export type languageUpsertWithoutFilm_film_language_idTolanguageInput = {
    update: XOR<languageUpdateWithoutFilm_film_language_idTolanguageInput, languageUncheckedUpdateWithoutFilm_film_language_idTolanguageInput>
    create: XOR<languageCreateWithoutFilm_film_language_idTolanguageInput, languageUncheckedCreateWithoutFilm_film_language_idTolanguageInput>
    where?: languageWhereInput
  }

  export type languageUpdateToOneWithWhereWithoutFilm_film_language_idTolanguageInput = {
    where?: languageWhereInput
    data: XOR<languageUpdateWithoutFilm_film_language_idTolanguageInput, languageUncheckedUpdateWithoutFilm_film_language_idTolanguageInput>
  }

  export type languageUpdateWithoutFilm_film_language_idTolanguageInput = {
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film_film_original_language_idTolanguage?: filmUpdateManyWithoutLanguage_film_original_language_idTolanguageNestedInput
  }

  export type languageUncheckedUpdateWithoutFilm_film_language_idTolanguageInput = {
    language_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film_film_original_language_idTolanguage?: filmUncheckedUpdateManyWithoutLanguage_film_original_language_idTolanguageNestedInput
  }

  export type languageCreateWithoutFilm_film_original_language_idTolanguageInput = {
    name: string
    last_update?: Date | string
    film_film_language_idTolanguage?: filmCreateNestedManyWithoutLanguage_film_language_idTolanguageInput
  }

  export type languageUncheckedCreateWithoutFilm_film_original_language_idTolanguageInput = {
    language_id?: number
    name: string
    last_update?: Date | string
    film_film_language_idTolanguage?: filmUncheckedCreateNestedManyWithoutLanguage_film_language_idTolanguageInput
  }

  export type languageCreateOrConnectWithoutFilm_film_original_language_idTolanguageInput = {
    where: languageWhereUniqueInput
    create: XOR<languageCreateWithoutFilm_film_original_language_idTolanguageInput, languageUncheckedCreateWithoutFilm_film_original_language_idTolanguageInput>
  }

  export type languageUpsertWithoutFilm_film_original_language_idTolanguageInput = {
    update: XOR<languageUpdateWithoutFilm_film_original_language_idTolanguageInput, languageUncheckedUpdateWithoutFilm_film_original_language_idTolanguageInput>
    create: XOR<languageCreateWithoutFilm_film_original_language_idTolanguageInput, languageUncheckedCreateWithoutFilm_film_original_language_idTolanguageInput>
    where?: languageWhereInput
  }

  export type languageUpdateToOneWithWhereWithoutFilm_film_original_language_idTolanguageInput = {
    where?: languageWhereInput
    data: XOR<languageUpdateWithoutFilm_film_original_language_idTolanguageInput, languageUncheckedUpdateWithoutFilm_film_original_language_idTolanguageInput>
  }

  export type languageUpdateWithoutFilm_film_original_language_idTolanguageInput = {
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film_film_language_idTolanguage?: filmUpdateManyWithoutLanguage_film_language_idTolanguageNestedInput
  }

  export type languageUncheckedUpdateWithoutFilm_film_original_language_idTolanguageInput = {
    language_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film_film_language_idTolanguage?: filmUncheckedUpdateManyWithoutLanguage_film_language_idTolanguageNestedInput
  }

  export type film_actorCreateWithoutFilmInput = {
    last_update?: Date | string
    actor: actorCreateNestedOneWithoutFilm_actorInput
  }

  export type film_actorUncheckedCreateWithoutFilmInput = {
    actor_id: number
    last_update?: Date | string
  }

  export type film_actorCreateOrConnectWithoutFilmInput = {
    where: film_actorWhereUniqueInput
    create: XOR<film_actorCreateWithoutFilmInput, film_actorUncheckedCreateWithoutFilmInput>
  }

  export type film_actorUpsertWithWhereUniqueWithoutFilmInput = {
    where: film_actorWhereUniqueInput
    update: XOR<film_actorUpdateWithoutFilmInput, film_actorUncheckedUpdateWithoutFilmInput>
    create: XOR<film_actorCreateWithoutFilmInput, film_actorUncheckedCreateWithoutFilmInput>
  }

  export type film_actorCreateManyFilmInputEnvelope = {
    data: film_actorCreateManyFilmInput | film_actorCreateManyFilmInput[]
    skipDuplicates?: boolean
  }

  export type film_actorUpdateWithWhereUniqueWithoutFilmInput = {
    where: film_actorWhereUniqueInput
    data: XOR<film_actorUpdateWithoutFilmInput, film_actorUncheckedUpdateWithoutFilmInput>
  }

  export type film_actorUpdateManyWithWhereWithoutFilmInput = {
    where: film_actorScalarWhereInput
    data: XOR<film_actorUpdateManyMutationInput, film_actorUncheckedUpdateManyWithoutFilmInput>
  }

  export type film_categoryCreateWithoutFilmInput = {
    last_update?: Date | string
    category: categoryCreateNestedOneWithoutFilm_categoryInput
  }

  export type film_categoryUncheckedCreateWithoutFilmInput = {
    category_id: number
    last_update?: Date | string
  }

  export type film_categoryCreateOrConnectWithoutFilmInput = {
    where: film_categoryWhereUniqueInput
    create: XOR<film_categoryCreateWithoutFilmInput, film_categoryUncheckedCreateWithoutFilmInput>
  }

  export type film_categoryUpsertWithWhereUniqueWithoutFilmInput = {
    where: film_categoryWhereUniqueInput
    update: XOR<film_categoryUpdateWithoutFilmInput, film_categoryUncheckedUpdateWithoutFilmInput>
    create: XOR<film_categoryCreateWithoutFilmInput, film_categoryUncheckedCreateWithoutFilmInput>
  }

  export type film_categoryCreateManyFilmInputEnvelope = {
    data: film_categoryCreateManyFilmInput | film_categoryCreateManyFilmInput[]
    skipDuplicates?: boolean
  }

  export type film_categoryUpdateWithWhereUniqueWithoutFilmInput = {
    where: film_categoryWhereUniqueInput
    data: XOR<film_categoryUpdateWithoutFilmInput, film_categoryUncheckedUpdateWithoutFilmInput>
  }

  export type film_categoryUpdateManyWithWhereWithoutFilmInput = {
    where: film_categoryScalarWhereInput
    data: XOR<film_categoryUpdateManyMutationInput, film_categoryUncheckedUpdateManyWithoutFilmInput>
  }

  export type film_postCreateWithoutFilmInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    film_comment?: film_commentCreateNestedManyWithoutFilm_postInput
    post_reaction?: post_reactionCreateNestedManyWithoutFilm_postInput
  }

  export type film_postUncheckedCreateWithoutFilmInput = {
    post_id?: number
    content: string
    created_at: Date | string
    updated_at: Date | string
    film_comment?: film_commentUncheckedCreateNestedManyWithoutFilm_postInput
    post_reaction?: post_reactionUncheckedCreateNestedManyWithoutFilm_postInput
  }

  export type film_postCreateOrConnectWithoutFilmInput = {
    where: film_postWhereUniqueInput
    create: XOR<film_postCreateWithoutFilmInput, film_postUncheckedCreateWithoutFilmInput>
  }

  export type film_postUpsertWithWhereUniqueWithoutFilmInput = {
    where: film_postWhereUniqueInput
    update: XOR<film_postUpdateWithoutFilmInput, film_postUncheckedUpdateWithoutFilmInput>
    create: XOR<film_postCreateWithoutFilmInput, film_postUncheckedCreateWithoutFilmInput>
  }

  export type film_postCreateManyFilmInputEnvelope = {
    data: film_postCreateManyFilmInput | film_postCreateManyFilmInput[]
    skipDuplicates?: boolean
  }

  export type film_postUpdateWithWhereUniqueWithoutFilmInput = {
    where: film_postWhereUniqueInput
    data: XOR<film_postUpdateWithoutFilmInput, film_postUncheckedUpdateWithoutFilmInput>
  }

  export type film_postUpdateManyWithWhereWithoutFilmInput = {
    where: film_postScalarWhereInput
    data: XOR<film_postUpdateManyMutationInput, film_postUncheckedUpdateManyWithoutFilmInput>
  }

  export type film_postScalarWhereInput = {
    AND?: film_postScalarWhereInput | film_postScalarWhereInput[]
    OR?: film_postScalarWhereInput[]
    NOT?: film_postScalarWhereInput | film_postScalarWhereInput[]
    post_id?: IntFilter<"film_post"> | number
    film_id?: IntFilter<"film_post"> | number
    content?: StringFilter<"film_post"> | string
    created_at?: DateTimeFilter<"film_post"> | Date | string
    updated_at?: DateTimeFilter<"film_post"> | Date | string
  }

  export type inventoryCreateWithoutFilmInput = {
    last_update?: Date | string
    store: storeCreateNestedOneWithoutInventoryInput
    rental?: rentalCreateNestedManyWithoutInventoryInput
  }

  export type inventoryUncheckedCreateWithoutFilmInput = {
    inventory_id?: number
    store_id: number
    last_update?: Date | string
    rental?: rentalUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type inventoryCreateOrConnectWithoutFilmInput = {
    where: inventoryWhereUniqueInput
    create: XOR<inventoryCreateWithoutFilmInput, inventoryUncheckedCreateWithoutFilmInput>
  }

  export type inventoryUpsertWithWhereUniqueWithoutFilmInput = {
    where: inventoryWhereUniqueInput
    update: XOR<inventoryUpdateWithoutFilmInput, inventoryUncheckedUpdateWithoutFilmInput>
    create: XOR<inventoryCreateWithoutFilmInput, inventoryUncheckedCreateWithoutFilmInput>
  }

  export type inventoryCreateManyFilmInputEnvelope = {
    data: inventoryCreateManyFilmInput | inventoryCreateManyFilmInput[]
    skipDuplicates?: boolean
  }

  export type inventoryUpdateWithWhereUniqueWithoutFilmInput = {
    where: inventoryWhereUniqueInput
    data: XOR<inventoryUpdateWithoutFilmInput, inventoryUncheckedUpdateWithoutFilmInput>
  }

  export type inventoryUpdateManyWithWhereWithoutFilmInput = {
    where: inventoryScalarWhereInput
    data: XOR<inventoryUpdateManyMutationInput, inventoryUncheckedUpdateManyWithoutFilmInput>
  }

  export type inventoryScalarWhereInput = {
    AND?: inventoryScalarWhereInput | inventoryScalarWhereInput[]
    OR?: inventoryScalarWhereInput[]
    NOT?: inventoryScalarWhereInput | inventoryScalarWhereInput[]
    inventory_id?: IntFilter<"inventory"> | number
    film_id?: IntFilter<"inventory"> | number
    store_id?: IntFilter<"inventory"> | number
    last_update?: DateTimeFilter<"inventory"> | Date | string
  }

  export type actorCreateWithoutFilm_actorInput = {
    first_name: string
    last_name: string
    last_update?: Date | string
  }

  export type actorUncheckedCreateWithoutFilm_actorInput = {
    actor_id?: number
    first_name: string
    last_name: string
    last_update?: Date | string
  }

  export type actorCreateOrConnectWithoutFilm_actorInput = {
    where: actorWhereUniqueInput
    create: XOR<actorCreateWithoutFilm_actorInput, actorUncheckedCreateWithoutFilm_actorInput>
  }

  export type actorUpsertWithoutFilm_actorInput = {
    update: XOR<actorUpdateWithoutFilm_actorInput, actorUncheckedUpdateWithoutFilm_actorInput>
    create: XOR<actorCreateWithoutFilm_actorInput, actorUncheckedCreateWithoutFilm_actorInput>
    where?: actorWhereInput
  }

  export type actorUpdateToOneWithWhereWithoutFilm_actorInput = {
    where?: actorWhereInput
    data: XOR<actorUpdateWithoutFilm_actorInput, actorUncheckedUpdateWithoutFilm_actorInput>
  }

  export type actorUpdateWithoutFilm_actorInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type actorUncheckedUpdateWithoutFilm_actorInput = {
    actor_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type filmUpdateToOneWithWhereWithoutFilm_actorInput = {
    where?: filmWhereInput
    data: XOR<filmUpdateWithoutFilm_actorInput, filmUncheckedUpdateWithoutFilm_actorInput>
  }

  export type filmUpdateWithoutFilm_actorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    language_film_language_idTolanguage?: languageUpdateOneRequiredWithoutFilm_film_language_idTolanguageNestedInput
    language_film_original_language_idTolanguage?: languageUpdateOneWithoutFilm_film_original_language_idTolanguageNestedInput
    film_category?: film_categoryUpdateManyWithoutFilmNestedInput
    film_post?: film_postUpdateManyWithoutFilmNestedInput
    inventory?: inventoryUpdateManyWithoutFilmNestedInput
  }

  export type filmUncheckedUpdateWithoutFilm_actorInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    language_id?: IntFieldUpdateOperationsInput | number
    original_language_id?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    film_category?: film_categoryUncheckedUpdateManyWithoutFilmNestedInput
    film_post?: film_postUncheckedUpdateManyWithoutFilmNestedInput
    inventory?: inventoryUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type categoryCreateWithoutFilm_categoryInput = {
    name: string
    last_update?: Date | string
  }

  export type categoryUncheckedCreateWithoutFilm_categoryInput = {
    category_id?: number
    name: string
    last_update?: Date | string
  }

  export type categoryCreateOrConnectWithoutFilm_categoryInput = {
    where: categoryWhereUniqueInput
    create: XOR<categoryCreateWithoutFilm_categoryInput, categoryUncheckedCreateWithoutFilm_categoryInput>
  }

  export type categoryUpsertWithoutFilm_categoryInput = {
    update: XOR<categoryUpdateWithoutFilm_categoryInput, categoryUncheckedUpdateWithoutFilm_categoryInput>
    create: XOR<categoryCreateWithoutFilm_categoryInput, categoryUncheckedCreateWithoutFilm_categoryInput>
    where?: categoryWhereInput
  }

  export type categoryUpdateToOneWithWhereWithoutFilm_categoryInput = {
    where?: categoryWhereInput
    data: XOR<categoryUpdateWithoutFilm_categoryInput, categoryUncheckedUpdateWithoutFilm_categoryInput>
  }

  export type categoryUpdateWithoutFilm_categoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type categoryUncheckedUpdateWithoutFilm_categoryInput = {
    category_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type filmUpdateToOneWithWhereWithoutFilm_categoryInput = {
    where?: filmWhereInput
    data: XOR<filmUpdateWithoutFilm_categoryInput, filmUncheckedUpdateWithoutFilm_categoryInput>
  }

  export type filmUpdateWithoutFilm_categoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    language_film_language_idTolanguage?: languageUpdateOneRequiredWithoutFilm_film_language_idTolanguageNestedInput
    language_film_original_language_idTolanguage?: languageUpdateOneWithoutFilm_film_original_language_idTolanguageNestedInput
    film_actor?: film_actorUpdateManyWithoutFilmNestedInput
    film_post?: film_postUpdateManyWithoutFilmNestedInput
    inventory?: inventoryUpdateManyWithoutFilmNestedInput
  }

  export type filmUncheckedUpdateWithoutFilm_categoryInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    language_id?: IntFieldUpdateOperationsInput | number
    original_language_id?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    film_actor?: film_actorUncheckedUpdateManyWithoutFilmNestedInput
    film_post?: film_postUncheckedUpdateManyWithoutFilmNestedInput
    inventory?: inventoryUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type customerCreateWithoutFilm_commentInput = {
    first_name: string
    last_name: string
    email?: string | null
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    address: addressCreateNestedOneWithoutCustomerInput
    store: storeCreateNestedOneWithoutCustomerInput
    mention?: mentionCreateNestedManyWithoutCustomerInput
    notification?: notificationCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionCreateNestedManyWithoutCustomerInput
    rental?: rentalCreateNestedManyWithoutCustomerInput
  }

  export type customerUncheckedCreateWithoutFilm_commentInput = {
    customer_id?: number
    store_id: number
    first_name: string
    last_name: string
    email?: string | null
    address_id: number
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    mention?: mentionUncheckedCreateNestedManyWithoutCustomerInput
    notification?: notificationUncheckedCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionUncheckedCreateNestedManyWithoutCustomerInput
    rental?: rentalUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type customerCreateOrConnectWithoutFilm_commentInput = {
    where: customerWhereUniqueInput
    create: XOR<customerCreateWithoutFilm_commentInput, customerUncheckedCreateWithoutFilm_commentInput>
  }

  export type film_postCreateWithoutFilm_commentInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    film?: filmCreateNestedOneWithoutFilm_postInput
    post_reaction?: post_reactionCreateNestedManyWithoutFilm_postInput
  }

  export type film_postUncheckedCreateWithoutFilm_commentInput = {
    post_id?: number
    film_id: number
    content: string
    created_at: Date | string
    updated_at: Date | string
    post_reaction?: post_reactionUncheckedCreateNestedManyWithoutFilm_postInput
  }

  export type film_postCreateOrConnectWithoutFilm_commentInput = {
    where: film_postWhereUniqueInput
    create: XOR<film_postCreateWithoutFilm_commentInput, film_postUncheckedCreateWithoutFilm_commentInput>
  }

  export type mentionCreateWithoutFilm_commentInput = {
    created_at: Date | string
    customer: customerCreateNestedOneWithoutMentionInput
    notification?: notificationCreateNestedOneWithoutMentionInput
  }

  export type mentionUncheckedCreateWithoutFilm_commentInput = {
    mention_id?: number
    created_at: Date | string
    mentioned_customer_id: number
    notification?: notificationUncheckedCreateNestedOneWithoutMentionInput
  }

  export type mentionCreateOrConnectWithoutFilm_commentInput = {
    where: mentionWhereUniqueInput
    create: XOR<mentionCreateWithoutFilm_commentInput, mentionUncheckedCreateWithoutFilm_commentInput>
  }

  export type mentionCreateManyFilm_commentInputEnvelope = {
    data: mentionCreateManyFilm_commentInput | mentionCreateManyFilm_commentInput[]
    skipDuplicates?: boolean
  }

  export type customerUpsertWithoutFilm_commentInput = {
    update: XOR<customerUpdateWithoutFilm_commentInput, customerUncheckedUpdateWithoutFilm_commentInput>
    create: XOR<customerCreateWithoutFilm_commentInput, customerUncheckedCreateWithoutFilm_commentInput>
    where?: customerWhereInput
  }

  export type customerUpdateToOneWithWhereWithoutFilm_commentInput = {
    where?: customerWhereInput
    data: XOR<customerUpdateWithoutFilm_commentInput, customerUncheckedUpdateWithoutFilm_commentInput>
  }

  export type customerUpdateWithoutFilm_commentInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    address?: addressUpdateOneRequiredWithoutCustomerNestedInput
    store?: storeUpdateOneRequiredWithoutCustomerNestedInput
    mention?: mentionUpdateManyWithoutCustomerNestedInput
    notification?: notificationUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUpdateManyWithoutCustomerNestedInput
    rental?: rentalUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateWithoutFilm_commentInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address_id?: IntFieldUpdateOperationsInput | number
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    mention?: mentionUncheckedUpdateManyWithoutCustomerNestedInput
    notification?: notificationUncheckedUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUncheckedUpdateManyWithoutCustomerNestedInput
    rental?: rentalUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type film_postUpsertWithoutFilm_commentInput = {
    update: XOR<film_postUpdateWithoutFilm_commentInput, film_postUncheckedUpdateWithoutFilm_commentInput>
    create: XOR<film_postCreateWithoutFilm_commentInput, film_postUncheckedCreateWithoutFilm_commentInput>
    where?: film_postWhereInput
  }

  export type film_postUpdateToOneWithWhereWithoutFilm_commentInput = {
    where?: film_postWhereInput
    data: XOR<film_postUpdateWithoutFilm_commentInput, film_postUncheckedUpdateWithoutFilm_commentInput>
  }

  export type film_postUpdateWithoutFilm_commentInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    film?: filmUpdateOneWithoutFilm_postNestedInput
    post_reaction?: post_reactionUpdateManyWithoutFilm_postNestedInput
  }

  export type film_postUncheckedUpdateWithoutFilm_commentInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    film_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    post_reaction?: post_reactionUncheckedUpdateManyWithoutFilm_postNestedInput
  }

  export type mentionUpsertWithWhereUniqueWithoutFilm_commentInput = {
    where: mentionWhereUniqueInput
    update: XOR<mentionUpdateWithoutFilm_commentInput, mentionUncheckedUpdateWithoutFilm_commentInput>
    create: XOR<mentionCreateWithoutFilm_commentInput, mentionUncheckedCreateWithoutFilm_commentInput>
  }

  export type mentionUpdateWithWhereUniqueWithoutFilm_commentInput = {
    where: mentionWhereUniqueInput
    data: XOR<mentionUpdateWithoutFilm_commentInput, mentionUncheckedUpdateWithoutFilm_commentInput>
  }

  export type mentionUpdateManyWithWhereWithoutFilm_commentInput = {
    where: mentionScalarWhereInput
    data: XOR<mentionUpdateManyMutationInput, mentionUncheckedUpdateManyWithoutFilm_commentInput>
  }

  export type film_commentCreateWithoutFilm_postInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    customer: customerCreateNestedOneWithoutFilm_commentInput
    mention?: mentionCreateNestedManyWithoutFilm_commentInput
  }

  export type film_commentUncheckedCreateWithoutFilm_postInput = {
    comment_id?: number
    customer_id: number
    content: string
    created_at: Date | string
    updated_at: Date | string
    mention?: mentionUncheckedCreateNestedManyWithoutFilm_commentInput
  }

  export type film_commentCreateOrConnectWithoutFilm_postInput = {
    where: film_commentWhereUniqueInput
    create: XOR<film_commentCreateWithoutFilm_postInput, film_commentUncheckedCreateWithoutFilm_postInput>
  }

  export type film_commentCreateManyFilm_postInputEnvelope = {
    data: film_commentCreateManyFilm_postInput | film_commentCreateManyFilm_postInput[]
    skipDuplicates?: boolean
  }

  export type post_reactionCreateWithoutFilm_postInput = {
    reaction_type?: $Enums.reaction_type | null
    created_at: Date | string
    customer: customerCreateNestedOneWithoutPost_reactionInput
  }

  export type post_reactionUncheckedCreateWithoutFilm_postInput = {
    reaction_id?: number
    reaction_type?: $Enums.reaction_type | null
    customer_id: number
    created_at: Date | string
  }

  export type post_reactionCreateOrConnectWithoutFilm_postInput = {
    where: post_reactionWhereUniqueInput
    create: XOR<post_reactionCreateWithoutFilm_postInput, post_reactionUncheckedCreateWithoutFilm_postInput>
  }

  export type post_reactionCreateManyFilm_postInputEnvelope = {
    data: post_reactionCreateManyFilm_postInput | post_reactionCreateManyFilm_postInput[]
    skipDuplicates?: boolean
  }

  export type film_commentUpsertWithWhereUniqueWithoutFilm_postInput = {
    where: film_commentWhereUniqueInput
    update: XOR<film_commentUpdateWithoutFilm_postInput, film_commentUncheckedUpdateWithoutFilm_postInput>
    create: XOR<film_commentCreateWithoutFilm_postInput, film_commentUncheckedCreateWithoutFilm_postInput>
  }

  export type film_commentUpdateWithWhereUniqueWithoutFilm_postInput = {
    where: film_commentWhereUniqueInput
    data: XOR<film_commentUpdateWithoutFilm_postInput, film_commentUncheckedUpdateWithoutFilm_postInput>
  }

  export type film_commentUpdateManyWithWhereWithoutFilm_postInput = {
    where: film_commentScalarWhereInput
    data: XOR<film_commentUpdateManyMutationInput, film_commentUncheckedUpdateManyWithoutFilm_postInput>
  }

  export type filmUpdateToOneWithWhereWithoutFilm_postInput = {
    where?: filmWhereInput
    data: XOR<filmUpdateWithoutFilm_postInput, filmUncheckedUpdateWithoutFilm_postInput>
  }

  export type filmUpdateWithoutFilm_postInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    language_film_language_idTolanguage?: languageUpdateOneRequiredWithoutFilm_film_language_idTolanguageNestedInput
    language_film_original_language_idTolanguage?: languageUpdateOneWithoutFilm_film_original_language_idTolanguageNestedInput
    film_actor?: film_actorUpdateManyWithoutFilmNestedInput
    film_category?: film_categoryUpdateManyWithoutFilmNestedInput
    inventory?: inventoryUpdateManyWithoutFilmNestedInput
  }

  export type filmUncheckedUpdateWithoutFilm_postInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    language_id?: IntFieldUpdateOperationsInput | number
    original_language_id?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    film_actor?: film_actorUncheckedUpdateManyWithoutFilmNestedInput
    film_category?: film_categoryUncheckedUpdateManyWithoutFilmNestedInput
    inventory?: inventoryUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type post_reactionUpsertWithWhereUniqueWithoutFilm_postInput = {
    where: post_reactionWhereUniqueInput
    update: XOR<post_reactionUpdateWithoutFilm_postInput, post_reactionUncheckedUpdateWithoutFilm_postInput>
    create: XOR<post_reactionCreateWithoutFilm_postInput, post_reactionUncheckedCreateWithoutFilm_postInput>
  }

  export type post_reactionUpdateWithWhereUniqueWithoutFilm_postInput = {
    where: post_reactionWhereUniqueInput
    data: XOR<post_reactionUpdateWithoutFilm_postInput, post_reactionUncheckedUpdateWithoutFilm_postInput>
  }

  export type post_reactionUpdateManyWithWhereWithoutFilm_postInput = {
    where: post_reactionScalarWhereInput
    data: XOR<post_reactionUpdateManyMutationInput, post_reactionUncheckedUpdateManyWithoutFilm_postInput>
  }

  export type storeCreateWithoutInventoryInput = {
    manager_staff_id: number
    last_update?: Date | string
    customer?: customerCreateNestedManyWithoutStoreInput
    staff?: staffCreateNestedManyWithoutStoreInput
    address: addressCreateNestedOneWithoutStoreInput
  }

  export type storeUncheckedCreateWithoutInventoryInput = {
    store_id?: number
    manager_staff_id: number
    address_id: number
    last_update?: Date | string
    customer?: customerUncheckedCreateNestedManyWithoutStoreInput
    staff?: staffUncheckedCreateNestedManyWithoutStoreInput
  }

  export type storeCreateOrConnectWithoutInventoryInput = {
    where: storeWhereUniqueInput
    create: XOR<storeCreateWithoutInventoryInput, storeUncheckedCreateWithoutInventoryInput>
  }

  export type rentalCreateWithoutInventoryInput = {
    rental_date: Date | string
    return_date?: Date | string | null
    last_update?: Date | string
    customer: customerCreateNestedOneWithoutRentalInput
    staff: staffCreateNestedOneWithoutRentalInput
  }

  export type rentalUncheckedCreateWithoutInventoryInput = {
    rental_id?: number
    rental_date: Date | string
    customer_id: number
    return_date?: Date | string | null
    staff_id: number
    last_update?: Date | string
  }

  export type rentalCreateOrConnectWithoutInventoryInput = {
    where: rentalWhereUniqueInput
    create: XOR<rentalCreateWithoutInventoryInput, rentalUncheckedCreateWithoutInventoryInput>
  }

  export type rentalCreateManyInventoryInputEnvelope = {
    data: rentalCreateManyInventoryInput | rentalCreateManyInventoryInput[]
    skipDuplicates?: boolean
  }

  export type filmUpdateToOneWithWhereWithoutInventoryInput = {
    where?: filmWhereInput
    data: XOR<filmUpdateWithoutInventoryInput, filmUncheckedUpdateWithoutInventoryInput>
  }

  export type filmUpdateWithoutInventoryInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    language_film_language_idTolanguage?: languageUpdateOneRequiredWithoutFilm_film_language_idTolanguageNestedInput
    language_film_original_language_idTolanguage?: languageUpdateOneWithoutFilm_film_original_language_idTolanguageNestedInput
    film_actor?: film_actorUpdateManyWithoutFilmNestedInput
    film_category?: film_categoryUpdateManyWithoutFilmNestedInput
    film_post?: film_postUpdateManyWithoutFilmNestedInput
  }

  export type filmUncheckedUpdateWithoutInventoryInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    language_id?: IntFieldUpdateOperationsInput | number
    original_language_id?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    film_actor?: film_actorUncheckedUpdateManyWithoutFilmNestedInput
    film_category?: film_categoryUncheckedUpdateManyWithoutFilmNestedInput
    film_post?: film_postUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type storeUpsertWithoutInventoryInput = {
    update: XOR<storeUpdateWithoutInventoryInput, storeUncheckedUpdateWithoutInventoryInput>
    create: XOR<storeCreateWithoutInventoryInput, storeUncheckedCreateWithoutInventoryInput>
    where?: storeWhereInput
  }

  export type storeUpdateToOneWithWhereWithoutInventoryInput = {
    where?: storeWhereInput
    data: XOR<storeUpdateWithoutInventoryInput, storeUncheckedUpdateWithoutInventoryInput>
  }

  export type storeUpdateWithoutInventoryInput = {
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateManyWithoutStoreNestedInput
    staff?: staffUpdateManyWithoutStoreNestedInput
    address?: addressUpdateOneRequiredWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateWithoutInventoryInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUncheckedUpdateManyWithoutStoreNestedInput
    staff?: staffUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type rentalUpsertWithWhereUniqueWithoutInventoryInput = {
    where: rentalWhereUniqueInput
    update: XOR<rentalUpdateWithoutInventoryInput, rentalUncheckedUpdateWithoutInventoryInput>
    create: XOR<rentalCreateWithoutInventoryInput, rentalUncheckedCreateWithoutInventoryInput>
  }

  export type rentalUpdateWithWhereUniqueWithoutInventoryInput = {
    where: rentalWhereUniqueInput
    data: XOR<rentalUpdateWithoutInventoryInput, rentalUncheckedUpdateWithoutInventoryInput>
  }

  export type rentalUpdateManyWithWhereWithoutInventoryInput = {
    where: rentalScalarWhereInput
    data: XOR<rentalUpdateManyMutationInput, rentalUncheckedUpdateManyWithoutInventoryInput>
  }

  export type filmUpdateWithWhereUniqueWithoutLanguage_film_language_idTolanguageInput = {
    where: filmWhereUniqueInput
    data: XOR<filmUpdateWithoutLanguage_film_language_idTolanguageInput, filmUncheckedUpdateWithoutLanguage_film_language_idTolanguageInput>
  }

  export type filmUpdateManyWithWhereWithoutLanguage_film_language_idTolanguageInput = {
    where: filmScalarWhereInput
    data: XOR<filmUpdateManyMutationInput, filmUncheckedUpdateManyWithoutLanguage_film_language_idTolanguageInput>
  }

  export type filmScalarWhereInput = {
    AND?: filmScalarWhereInput | filmScalarWhereInput[]
    OR?: filmScalarWhereInput[]
    NOT?: filmScalarWhereInput | filmScalarWhereInput[]
    film_id?: IntFilter<"film"> | number
    title?: StringFilter<"film"> | string
    description?: StringNullableFilter<"film"> | string | null
    release_year?: IntNullableFilter<"film"> | number | null
    language_id?: IntFilter<"film"> | number
    original_language_id?: IntNullableFilter<"film"> | number | null
    rental_duration?: IntFilter<"film"> | number
    rental_rate?: DecimalFilter<"film"> | Decimal | DecimalJsLike | number | string
    length?: IntNullableFilter<"film"> | number | null
    replacement_cost?: DecimalFilter<"film"> | Decimal | DecimalJsLike | number | string
    rating?: Enummpaa_ratingNullableFilter<"film"> | $Enums.mpaa_rating | null
    last_update?: DateTimeFilter<"film"> | Date | string
    special_features?: StringNullableListFilter<"film">
  }

  export type filmUpdateWithWhereUniqueWithoutLanguage_film_original_language_idTolanguageInput = {
    where: filmWhereUniqueInput
    data: XOR<filmUpdateWithoutLanguage_film_original_language_idTolanguageInput, filmUncheckedUpdateWithoutLanguage_film_original_language_idTolanguageInput>
  }

  export type filmUpdateManyWithWhereWithoutLanguage_film_original_language_idTolanguageInput = {
    where: filmScalarWhereInput
    data: XOR<filmUpdateManyMutationInput, filmUncheckedUpdateManyWithoutLanguage_film_original_language_idTolanguageInput>
  }

  export type film_commentCreateWithoutMentionInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    customer: customerCreateNestedOneWithoutFilm_commentInput
    film_post: film_postCreateNestedOneWithoutFilm_commentInput
  }

  export type film_commentUncheckedCreateWithoutMentionInput = {
    comment_id?: number
    post_id: number
    customer_id: number
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type film_commentCreateOrConnectWithoutMentionInput = {
    where: film_commentWhereUniqueInput
    create: XOR<film_commentCreateWithoutMentionInput, film_commentUncheckedCreateWithoutMentionInput>
  }

  export type customerCreateWithoutMentionInput = {
    first_name: string
    last_name: string
    email?: string | null
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    address: addressCreateNestedOneWithoutCustomerInput
    store: storeCreateNestedOneWithoutCustomerInput
    film_comment?: film_commentCreateNestedManyWithoutCustomerInput
    notification?: notificationCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionCreateNestedManyWithoutCustomerInput
    rental?: rentalCreateNestedManyWithoutCustomerInput
  }

  export type customerUncheckedCreateWithoutMentionInput = {
    customer_id?: number
    store_id: number
    first_name: string
    last_name: string
    email?: string | null
    address_id: number
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    film_comment?: film_commentUncheckedCreateNestedManyWithoutCustomerInput
    notification?: notificationUncheckedCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionUncheckedCreateNestedManyWithoutCustomerInput
    rental?: rentalUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type customerCreateOrConnectWithoutMentionInput = {
    where: customerWhereUniqueInput
    create: XOR<customerCreateWithoutMentionInput, customerUncheckedCreateWithoutMentionInput>
  }

  export type notificationCreateWithoutMentionInput = {
    content: string
    created_at: Date | string
    is_read: boolean
    read_at: Date | string
    customer: customerCreateNestedOneWithoutNotificationInput
  }

  export type notificationUncheckedCreateWithoutMentionInput = {
    notification_id?: number
    mentioner_id: number
    content: string
    created_at: Date | string
    is_read: boolean
    read_at: Date | string
  }

  export type notificationCreateOrConnectWithoutMentionInput = {
    where: notificationWhereUniqueInput
    create: XOR<notificationCreateWithoutMentionInput, notificationUncheckedCreateWithoutMentionInput>
  }

  export type film_commentUpsertWithoutMentionInput = {
    update: XOR<film_commentUpdateWithoutMentionInput, film_commentUncheckedUpdateWithoutMentionInput>
    create: XOR<film_commentCreateWithoutMentionInput, film_commentUncheckedCreateWithoutMentionInput>
    where?: film_commentWhereInput
  }

  export type film_commentUpdateToOneWithWhereWithoutMentionInput = {
    where?: film_commentWhereInput
    data: XOR<film_commentUpdateWithoutMentionInput, film_commentUncheckedUpdateWithoutMentionInput>
  }

  export type film_commentUpdateWithoutMentionInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateOneRequiredWithoutFilm_commentNestedInput
    film_post?: film_postUpdateOneRequiredWithoutFilm_commentNestedInput
  }

  export type film_commentUncheckedUpdateWithoutMentionInput = {
    comment_id?: IntFieldUpdateOperationsInput | number
    post_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customerUpsertWithoutMentionInput = {
    update: XOR<customerUpdateWithoutMentionInput, customerUncheckedUpdateWithoutMentionInput>
    create: XOR<customerCreateWithoutMentionInput, customerUncheckedCreateWithoutMentionInput>
    where?: customerWhereInput
  }

  export type customerUpdateToOneWithWhereWithoutMentionInput = {
    where?: customerWhereInput
    data: XOR<customerUpdateWithoutMentionInput, customerUncheckedUpdateWithoutMentionInput>
  }

  export type customerUpdateWithoutMentionInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    address?: addressUpdateOneRequiredWithoutCustomerNestedInput
    store?: storeUpdateOneRequiredWithoutCustomerNestedInput
    film_comment?: film_commentUpdateManyWithoutCustomerNestedInput
    notification?: notificationUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUpdateManyWithoutCustomerNestedInput
    rental?: rentalUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateWithoutMentionInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address_id?: IntFieldUpdateOperationsInput | number
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    film_comment?: film_commentUncheckedUpdateManyWithoutCustomerNestedInput
    notification?: notificationUncheckedUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUncheckedUpdateManyWithoutCustomerNestedInput
    rental?: rentalUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type notificationUpsertWithoutMentionInput = {
    update: XOR<notificationUpdateWithoutMentionInput, notificationUncheckedUpdateWithoutMentionInput>
    create: XOR<notificationCreateWithoutMentionInput, notificationUncheckedCreateWithoutMentionInput>
    where?: notificationWhereInput
  }

  export type notificationUpdateToOneWithWhereWithoutMentionInput = {
    where?: notificationWhereInput
    data: XOR<notificationUpdateWithoutMentionInput, notificationUncheckedUpdateWithoutMentionInput>
  }

  export type notificationUpdateWithoutMentionInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    read_at?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateOneRequiredWithoutNotificationNestedInput
  }

  export type notificationUncheckedUpdateWithoutMentionInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    mentioner_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    read_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mentionCreateWithoutNotificationInput = {
    created_at: Date | string
    film_comment: film_commentCreateNestedOneWithoutMentionInput
    customer: customerCreateNestedOneWithoutMentionInput
  }

  export type mentionUncheckedCreateWithoutNotificationInput = {
    mention_id?: number
    created_at: Date | string
    comment_id: number
    mentioned_customer_id: number
  }

  export type mentionCreateOrConnectWithoutNotificationInput = {
    where: mentionWhereUniqueInput
    create: XOR<mentionCreateWithoutNotificationInput, mentionUncheckedCreateWithoutNotificationInput>
  }

  export type customerCreateWithoutNotificationInput = {
    first_name: string
    last_name: string
    email?: string | null
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    address: addressCreateNestedOneWithoutCustomerInput
    store: storeCreateNestedOneWithoutCustomerInput
    film_comment?: film_commentCreateNestedManyWithoutCustomerInput
    mention?: mentionCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionCreateNestedManyWithoutCustomerInput
    rental?: rentalCreateNestedManyWithoutCustomerInput
  }

  export type customerUncheckedCreateWithoutNotificationInput = {
    customer_id?: number
    store_id: number
    first_name: string
    last_name: string
    email?: string | null
    address_id: number
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    film_comment?: film_commentUncheckedCreateNestedManyWithoutCustomerInput
    mention?: mentionUncheckedCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionUncheckedCreateNestedManyWithoutCustomerInput
    rental?: rentalUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type customerCreateOrConnectWithoutNotificationInput = {
    where: customerWhereUniqueInput
    create: XOR<customerCreateWithoutNotificationInput, customerUncheckedCreateWithoutNotificationInput>
  }

  export type mentionUpsertWithoutNotificationInput = {
    update: XOR<mentionUpdateWithoutNotificationInput, mentionUncheckedUpdateWithoutNotificationInput>
    create: XOR<mentionCreateWithoutNotificationInput, mentionUncheckedCreateWithoutNotificationInput>
    where?: mentionWhereInput
  }

  export type mentionUpdateToOneWithWhereWithoutNotificationInput = {
    where?: mentionWhereInput
    data: XOR<mentionUpdateWithoutNotificationInput, mentionUncheckedUpdateWithoutNotificationInput>
  }

  export type mentionUpdateWithoutNotificationInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    film_comment?: film_commentUpdateOneRequiredWithoutMentionNestedInput
    customer?: customerUpdateOneRequiredWithoutMentionNestedInput
  }

  export type mentionUncheckedUpdateWithoutNotificationInput = {
    mention_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment_id?: IntFieldUpdateOperationsInput | number
    mentioned_customer_id?: IntFieldUpdateOperationsInput | number
  }

  export type customerUpsertWithoutNotificationInput = {
    update: XOR<customerUpdateWithoutNotificationInput, customerUncheckedUpdateWithoutNotificationInput>
    create: XOR<customerCreateWithoutNotificationInput, customerUncheckedCreateWithoutNotificationInput>
    where?: customerWhereInput
  }

  export type customerUpdateToOneWithWhereWithoutNotificationInput = {
    where?: customerWhereInput
    data: XOR<customerUpdateWithoutNotificationInput, customerUncheckedUpdateWithoutNotificationInput>
  }

  export type customerUpdateWithoutNotificationInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    address?: addressUpdateOneRequiredWithoutCustomerNestedInput
    store?: storeUpdateOneRequiredWithoutCustomerNestedInput
    film_comment?: film_commentUpdateManyWithoutCustomerNestedInput
    mention?: mentionUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUpdateManyWithoutCustomerNestedInput
    rental?: rentalUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateWithoutNotificationInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address_id?: IntFieldUpdateOperationsInput | number
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    film_comment?: film_commentUncheckedUpdateManyWithoutCustomerNestedInput
    mention?: mentionUncheckedUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUncheckedUpdateManyWithoutCustomerNestedInput
    rental?: rentalUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type customerCreateWithoutPost_reactionInput = {
    first_name: string
    last_name: string
    email?: string | null
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    address: addressCreateNestedOneWithoutCustomerInput
    store: storeCreateNestedOneWithoutCustomerInput
    film_comment?: film_commentCreateNestedManyWithoutCustomerInput
    mention?: mentionCreateNestedManyWithoutCustomerInput
    notification?: notificationCreateNestedManyWithoutCustomerInput
    rental?: rentalCreateNestedManyWithoutCustomerInput
  }

  export type customerUncheckedCreateWithoutPost_reactionInput = {
    customer_id?: number
    store_id: number
    first_name: string
    last_name: string
    email?: string | null
    address_id: number
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    film_comment?: film_commentUncheckedCreateNestedManyWithoutCustomerInput
    mention?: mentionUncheckedCreateNestedManyWithoutCustomerInput
    notification?: notificationUncheckedCreateNestedManyWithoutCustomerInput
    rental?: rentalUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type customerCreateOrConnectWithoutPost_reactionInput = {
    where: customerWhereUniqueInput
    create: XOR<customerCreateWithoutPost_reactionInput, customerUncheckedCreateWithoutPost_reactionInput>
  }

  export type film_postCreateWithoutPost_reactionInput = {
    content: string
    created_at: Date | string
    updated_at: Date | string
    film_comment?: film_commentCreateNestedManyWithoutFilm_postInput
    film?: filmCreateNestedOneWithoutFilm_postInput
  }

  export type film_postUncheckedCreateWithoutPost_reactionInput = {
    post_id?: number
    film_id: number
    content: string
    created_at: Date | string
    updated_at: Date | string
    film_comment?: film_commentUncheckedCreateNestedManyWithoutFilm_postInput
  }

  export type film_postCreateOrConnectWithoutPost_reactionInput = {
    where: film_postWhereUniqueInput
    create: XOR<film_postCreateWithoutPost_reactionInput, film_postUncheckedCreateWithoutPost_reactionInput>
  }

  export type customerUpsertWithoutPost_reactionInput = {
    update: XOR<customerUpdateWithoutPost_reactionInput, customerUncheckedUpdateWithoutPost_reactionInput>
    create: XOR<customerCreateWithoutPost_reactionInput, customerUncheckedCreateWithoutPost_reactionInput>
    where?: customerWhereInput
  }

  export type customerUpdateToOneWithWhereWithoutPost_reactionInput = {
    where?: customerWhereInput
    data: XOR<customerUpdateWithoutPost_reactionInput, customerUncheckedUpdateWithoutPost_reactionInput>
  }

  export type customerUpdateWithoutPost_reactionInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    address?: addressUpdateOneRequiredWithoutCustomerNestedInput
    store?: storeUpdateOneRequiredWithoutCustomerNestedInput
    film_comment?: film_commentUpdateManyWithoutCustomerNestedInput
    mention?: mentionUpdateManyWithoutCustomerNestedInput
    notification?: notificationUpdateManyWithoutCustomerNestedInput
    rental?: rentalUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateWithoutPost_reactionInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address_id?: IntFieldUpdateOperationsInput | number
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    film_comment?: film_commentUncheckedUpdateManyWithoutCustomerNestedInput
    mention?: mentionUncheckedUpdateManyWithoutCustomerNestedInput
    notification?: notificationUncheckedUpdateManyWithoutCustomerNestedInput
    rental?: rentalUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type film_postUpsertWithoutPost_reactionInput = {
    update: XOR<film_postUpdateWithoutPost_reactionInput, film_postUncheckedUpdateWithoutPost_reactionInput>
    create: XOR<film_postCreateWithoutPost_reactionInput, film_postUncheckedCreateWithoutPost_reactionInput>
    where?: film_postWhereInput
  }

  export type film_postUpdateToOneWithWhereWithoutPost_reactionInput = {
    where?: film_postWhereInput
    data: XOR<film_postUpdateWithoutPost_reactionInput, film_postUncheckedUpdateWithoutPost_reactionInput>
  }

  export type film_postUpdateWithoutPost_reactionInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    film_comment?: film_commentUpdateManyWithoutFilm_postNestedInput
    film?: filmUpdateOneWithoutFilm_postNestedInput
  }

  export type film_postUncheckedUpdateWithoutPost_reactionInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    film_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    film_comment?: film_commentUncheckedUpdateManyWithoutFilm_postNestedInput
  }

  export type customerCreateWithoutRentalInput = {
    first_name: string
    last_name: string
    email?: string | null
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    address: addressCreateNestedOneWithoutCustomerInput
    store: storeCreateNestedOneWithoutCustomerInput
    film_comment?: film_commentCreateNestedManyWithoutCustomerInput
    mention?: mentionCreateNestedManyWithoutCustomerInput
    notification?: notificationCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionCreateNestedManyWithoutCustomerInput
  }

  export type customerUncheckedCreateWithoutRentalInput = {
    customer_id?: number
    store_id: number
    first_name: string
    last_name: string
    email?: string | null
    address_id: number
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    film_comment?: film_commentUncheckedCreateNestedManyWithoutCustomerInput
    mention?: mentionUncheckedCreateNestedManyWithoutCustomerInput
    notification?: notificationUncheckedCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type customerCreateOrConnectWithoutRentalInput = {
    where: customerWhereUniqueInput
    create: XOR<customerCreateWithoutRentalInput, customerUncheckedCreateWithoutRentalInput>
  }

  export type inventoryCreateWithoutRentalInput = {
    last_update?: Date | string
    film: filmCreateNestedOneWithoutInventoryInput
    store: storeCreateNestedOneWithoutInventoryInput
  }

  export type inventoryUncheckedCreateWithoutRentalInput = {
    inventory_id?: number
    film_id: number
    store_id: number
    last_update?: Date | string
  }

  export type inventoryCreateOrConnectWithoutRentalInput = {
    where: inventoryWhereUniqueInput
    create: XOR<inventoryCreateWithoutRentalInput, inventoryUncheckedCreateWithoutRentalInput>
  }

  export type staffCreateWithoutRentalInput = {
    first_name: string
    last_name: string
    email?: string | null
    active?: boolean
    username: string
    password?: string | null
    last_update?: Date | string
    picture?: Uint8Array | null
    address: addressCreateNestedOneWithoutStaffInput
    store: storeCreateNestedOneWithoutStaffInput
  }

  export type staffUncheckedCreateWithoutRentalInput = {
    staff_id?: number
    first_name: string
    last_name: string
    address_id: number
    email?: string | null
    store_id: number
    active?: boolean
    username: string
    password?: string | null
    last_update?: Date | string
    picture?: Uint8Array | null
  }

  export type staffCreateOrConnectWithoutRentalInput = {
    where: staffWhereUniqueInput
    create: XOR<staffCreateWithoutRentalInput, staffUncheckedCreateWithoutRentalInput>
  }

  export type customerUpsertWithoutRentalInput = {
    update: XOR<customerUpdateWithoutRentalInput, customerUncheckedUpdateWithoutRentalInput>
    create: XOR<customerCreateWithoutRentalInput, customerUncheckedCreateWithoutRentalInput>
    where?: customerWhereInput
  }

  export type customerUpdateToOneWithWhereWithoutRentalInput = {
    where?: customerWhereInput
    data: XOR<customerUpdateWithoutRentalInput, customerUncheckedUpdateWithoutRentalInput>
  }

  export type customerUpdateWithoutRentalInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    address?: addressUpdateOneRequiredWithoutCustomerNestedInput
    store?: storeUpdateOneRequiredWithoutCustomerNestedInput
    film_comment?: film_commentUpdateManyWithoutCustomerNestedInput
    mention?: mentionUpdateManyWithoutCustomerNestedInput
    notification?: notificationUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateWithoutRentalInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address_id?: IntFieldUpdateOperationsInput | number
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    film_comment?: film_commentUncheckedUpdateManyWithoutCustomerNestedInput
    mention?: mentionUncheckedUpdateManyWithoutCustomerNestedInput
    notification?: notificationUncheckedUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type inventoryUpsertWithoutRentalInput = {
    update: XOR<inventoryUpdateWithoutRentalInput, inventoryUncheckedUpdateWithoutRentalInput>
    create: XOR<inventoryCreateWithoutRentalInput, inventoryUncheckedCreateWithoutRentalInput>
    where?: inventoryWhereInput
  }

  export type inventoryUpdateToOneWithWhereWithoutRentalInput = {
    where?: inventoryWhereInput
    data: XOR<inventoryUpdateWithoutRentalInput, inventoryUncheckedUpdateWithoutRentalInput>
  }

  export type inventoryUpdateWithoutRentalInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film?: filmUpdateOneRequiredWithoutInventoryNestedInput
    store?: storeUpdateOneRequiredWithoutInventoryNestedInput
  }

  export type inventoryUncheckedUpdateWithoutRentalInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    film_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type staffUpsertWithoutRentalInput = {
    update: XOR<staffUpdateWithoutRentalInput, staffUncheckedUpdateWithoutRentalInput>
    create: XOR<staffCreateWithoutRentalInput, staffUncheckedCreateWithoutRentalInput>
    where?: staffWhereInput
  }

  export type staffUpdateToOneWithWhereWithoutRentalInput = {
    where?: staffWhereInput
    data: XOR<staffUpdateWithoutRentalInput, staffUncheckedUpdateWithoutRentalInput>
  }

  export type staffUpdateWithoutRentalInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    username?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    address?: addressUpdateOneRequiredWithoutStaffNestedInput
    store?: storeUpdateOneRequiredWithoutStaffNestedInput
  }

  export type staffUncheckedUpdateWithoutRentalInput = {
    staff_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    address_id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    username?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type rentalCreateWithoutStaffInput = {
    rental_date: Date | string
    return_date?: Date | string | null
    last_update?: Date | string
    customer: customerCreateNestedOneWithoutRentalInput
    inventory: inventoryCreateNestedOneWithoutRentalInput
  }

  export type rentalUncheckedCreateWithoutStaffInput = {
    rental_id?: number
    rental_date: Date | string
    inventory_id: number
    customer_id: number
    return_date?: Date | string | null
    last_update?: Date | string
  }

  export type rentalCreateOrConnectWithoutStaffInput = {
    where: rentalWhereUniqueInput
    create: XOR<rentalCreateWithoutStaffInput, rentalUncheckedCreateWithoutStaffInput>
  }

  export type rentalCreateManyStaffInputEnvelope = {
    data: rentalCreateManyStaffInput | rentalCreateManyStaffInput[]
    skipDuplicates?: boolean
  }

  export type addressCreateWithoutStaffInput = {
    address: string
    address2?: string | null
    district: string
    postal_code?: string | null
    phone: string
    last_update?: Date | string
    city: cityCreateNestedOneWithoutAddressInput
    customer?: customerCreateNestedManyWithoutAddressInput
    store?: storeCreateNestedManyWithoutAddressInput
  }

  export type addressUncheckedCreateWithoutStaffInput = {
    address_id?: number
    address: string
    address2?: string | null
    district: string
    city_id: number
    postal_code?: string | null
    phone: string
    last_update?: Date | string
    customer?: customerUncheckedCreateNestedManyWithoutAddressInput
    store?: storeUncheckedCreateNestedManyWithoutAddressInput
  }

  export type addressCreateOrConnectWithoutStaffInput = {
    where: addressWhereUniqueInput
    create: XOR<addressCreateWithoutStaffInput, addressUncheckedCreateWithoutStaffInput>
  }

  export type storeCreateWithoutStaffInput = {
    manager_staff_id: number
    last_update?: Date | string
    customer?: customerCreateNestedManyWithoutStoreInput
    inventory?: inventoryCreateNestedManyWithoutStoreInput
    address: addressCreateNestedOneWithoutStoreInput
  }

  export type storeUncheckedCreateWithoutStaffInput = {
    store_id?: number
    manager_staff_id: number
    address_id: number
    last_update?: Date | string
    customer?: customerUncheckedCreateNestedManyWithoutStoreInput
    inventory?: inventoryUncheckedCreateNestedManyWithoutStoreInput
  }

  export type storeCreateOrConnectWithoutStaffInput = {
    where: storeWhereUniqueInput
    create: XOR<storeCreateWithoutStaffInput, storeUncheckedCreateWithoutStaffInput>
  }

  export type rentalUpsertWithWhereUniqueWithoutStaffInput = {
    where: rentalWhereUniqueInput
    update: XOR<rentalUpdateWithoutStaffInput, rentalUncheckedUpdateWithoutStaffInput>
    create: XOR<rentalCreateWithoutStaffInput, rentalUncheckedCreateWithoutStaffInput>
  }

  export type rentalUpdateWithWhereUniqueWithoutStaffInput = {
    where: rentalWhereUniqueInput
    data: XOR<rentalUpdateWithoutStaffInput, rentalUncheckedUpdateWithoutStaffInput>
  }

  export type rentalUpdateManyWithWhereWithoutStaffInput = {
    where: rentalScalarWhereInput
    data: XOR<rentalUpdateManyMutationInput, rentalUncheckedUpdateManyWithoutStaffInput>
  }

  export type addressUpsertWithoutStaffInput = {
    update: XOR<addressUpdateWithoutStaffInput, addressUncheckedUpdateWithoutStaffInput>
    create: XOR<addressCreateWithoutStaffInput, addressUncheckedCreateWithoutStaffInput>
    where?: addressWhereInput
  }

  export type addressUpdateToOneWithWhereWithoutStaffInput = {
    where?: addressWhereInput
    data: XOR<addressUpdateWithoutStaffInput, addressUncheckedUpdateWithoutStaffInput>
  }

  export type addressUpdateWithoutStaffInput = {
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: cityUpdateOneRequiredWithoutAddressNestedInput
    customer?: customerUpdateManyWithoutAddressNestedInput
    store?: storeUpdateManyWithoutAddressNestedInput
  }

  export type addressUncheckedUpdateWithoutStaffInput = {
    address_id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    city_id?: IntFieldUpdateOperationsInput | number
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUncheckedUpdateManyWithoutAddressNestedInput
    store?: storeUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type storeUpsertWithoutStaffInput = {
    update: XOR<storeUpdateWithoutStaffInput, storeUncheckedUpdateWithoutStaffInput>
    create: XOR<storeCreateWithoutStaffInput, storeUncheckedCreateWithoutStaffInput>
    where?: storeWhereInput
  }

  export type storeUpdateToOneWithWhereWithoutStaffInput = {
    where?: storeWhereInput
    data: XOR<storeUpdateWithoutStaffInput, storeUncheckedUpdateWithoutStaffInput>
  }

  export type storeUpdateWithoutStaffInput = {
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateManyWithoutStoreNestedInput
    inventory?: inventoryUpdateManyWithoutStoreNestedInput
    address?: addressUpdateOneRequiredWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateWithoutStaffInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    address_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUncheckedUpdateManyWithoutStoreNestedInput
    inventory?: inventoryUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type customerCreateWithoutStoreInput = {
    first_name: string
    last_name: string
    email?: string | null
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    address: addressCreateNestedOneWithoutCustomerInput
    film_comment?: film_commentCreateNestedManyWithoutCustomerInput
    mention?: mentionCreateNestedManyWithoutCustomerInput
    notification?: notificationCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionCreateNestedManyWithoutCustomerInput
    rental?: rentalCreateNestedManyWithoutCustomerInput
  }

  export type customerUncheckedCreateWithoutStoreInput = {
    customer_id?: number
    first_name: string
    last_name: string
    email?: string | null
    address_id: number
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
    film_comment?: film_commentUncheckedCreateNestedManyWithoutCustomerInput
    mention?: mentionUncheckedCreateNestedManyWithoutCustomerInput
    notification?: notificationUncheckedCreateNestedManyWithoutCustomerInput
    post_reaction?: post_reactionUncheckedCreateNestedManyWithoutCustomerInput
    rental?: rentalUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type customerCreateOrConnectWithoutStoreInput = {
    where: customerWhereUniqueInput
    create: XOR<customerCreateWithoutStoreInput, customerUncheckedCreateWithoutStoreInput>
  }

  export type customerCreateManyStoreInputEnvelope = {
    data: customerCreateManyStoreInput | customerCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type inventoryCreateWithoutStoreInput = {
    last_update?: Date | string
    film: filmCreateNestedOneWithoutInventoryInput
    rental?: rentalCreateNestedManyWithoutInventoryInput
  }

  export type inventoryUncheckedCreateWithoutStoreInput = {
    inventory_id?: number
    film_id: number
    last_update?: Date | string
    rental?: rentalUncheckedCreateNestedManyWithoutInventoryInput
  }

  export type inventoryCreateOrConnectWithoutStoreInput = {
    where: inventoryWhereUniqueInput
    create: XOR<inventoryCreateWithoutStoreInput, inventoryUncheckedCreateWithoutStoreInput>
  }

  export type inventoryCreateManyStoreInputEnvelope = {
    data: inventoryCreateManyStoreInput | inventoryCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type staffCreateWithoutStoreInput = {
    first_name: string
    last_name: string
    email?: string | null
    active?: boolean
    username: string
    password?: string | null
    last_update?: Date | string
    picture?: Uint8Array | null
    rental?: rentalCreateNestedManyWithoutStaffInput
    address: addressCreateNestedOneWithoutStaffInput
  }

  export type staffUncheckedCreateWithoutStoreInput = {
    staff_id?: number
    first_name: string
    last_name: string
    address_id: number
    email?: string | null
    active?: boolean
    username: string
    password?: string | null
    last_update?: Date | string
    picture?: Uint8Array | null
    rental?: rentalUncheckedCreateNestedManyWithoutStaffInput
  }

  export type staffCreateOrConnectWithoutStoreInput = {
    where: staffWhereUniqueInput
    create: XOR<staffCreateWithoutStoreInput, staffUncheckedCreateWithoutStoreInput>
  }

  export type staffCreateManyStoreInputEnvelope = {
    data: staffCreateManyStoreInput | staffCreateManyStoreInput[]
    skipDuplicates?: boolean
  }

  export type addressCreateWithoutStoreInput = {
    address: string
    address2?: string | null
    district: string
    postal_code?: string | null
    phone: string
    last_update?: Date | string
    city: cityCreateNestedOneWithoutAddressInput
    customer?: customerCreateNestedManyWithoutAddressInput
    staff?: staffCreateNestedManyWithoutAddressInput
  }

  export type addressUncheckedCreateWithoutStoreInput = {
    address_id?: number
    address: string
    address2?: string | null
    district: string
    city_id: number
    postal_code?: string | null
    phone: string
    last_update?: Date | string
    customer?: customerUncheckedCreateNestedManyWithoutAddressInput
    staff?: staffUncheckedCreateNestedManyWithoutAddressInput
  }

  export type addressCreateOrConnectWithoutStoreInput = {
    where: addressWhereUniqueInput
    create: XOR<addressCreateWithoutStoreInput, addressUncheckedCreateWithoutStoreInput>
  }

  export type customerUpsertWithWhereUniqueWithoutStoreInput = {
    where: customerWhereUniqueInput
    update: XOR<customerUpdateWithoutStoreInput, customerUncheckedUpdateWithoutStoreInput>
    create: XOR<customerCreateWithoutStoreInput, customerUncheckedCreateWithoutStoreInput>
  }

  export type customerUpdateWithWhereUniqueWithoutStoreInput = {
    where: customerWhereUniqueInput
    data: XOR<customerUpdateWithoutStoreInput, customerUncheckedUpdateWithoutStoreInput>
  }

  export type customerUpdateManyWithWhereWithoutStoreInput = {
    where: customerScalarWhereInput
    data: XOR<customerUpdateManyMutationInput, customerUncheckedUpdateManyWithoutStoreInput>
  }

  export type inventoryUpsertWithWhereUniqueWithoutStoreInput = {
    where: inventoryWhereUniqueInput
    update: XOR<inventoryUpdateWithoutStoreInput, inventoryUncheckedUpdateWithoutStoreInput>
    create: XOR<inventoryCreateWithoutStoreInput, inventoryUncheckedCreateWithoutStoreInput>
  }

  export type inventoryUpdateWithWhereUniqueWithoutStoreInput = {
    where: inventoryWhereUniqueInput
    data: XOR<inventoryUpdateWithoutStoreInput, inventoryUncheckedUpdateWithoutStoreInput>
  }

  export type inventoryUpdateManyWithWhereWithoutStoreInput = {
    where: inventoryScalarWhereInput
    data: XOR<inventoryUpdateManyMutationInput, inventoryUncheckedUpdateManyWithoutStoreInput>
  }

  export type staffUpsertWithWhereUniqueWithoutStoreInput = {
    where: staffWhereUniqueInput
    update: XOR<staffUpdateWithoutStoreInput, staffUncheckedUpdateWithoutStoreInput>
    create: XOR<staffCreateWithoutStoreInput, staffUncheckedCreateWithoutStoreInput>
  }

  export type staffUpdateWithWhereUniqueWithoutStoreInput = {
    where: staffWhereUniqueInput
    data: XOR<staffUpdateWithoutStoreInput, staffUncheckedUpdateWithoutStoreInput>
  }

  export type staffUpdateManyWithWhereWithoutStoreInput = {
    where: staffScalarWhereInput
    data: XOR<staffUpdateManyMutationInput, staffUncheckedUpdateManyWithoutStoreInput>
  }

  export type addressUpsertWithoutStoreInput = {
    update: XOR<addressUpdateWithoutStoreInput, addressUncheckedUpdateWithoutStoreInput>
    create: XOR<addressCreateWithoutStoreInput, addressUncheckedCreateWithoutStoreInput>
    where?: addressWhereInput
  }

  export type addressUpdateToOneWithWhereWithoutStoreInput = {
    where?: addressWhereInput
    data: XOR<addressUpdateWithoutStoreInput, addressUncheckedUpdateWithoutStoreInput>
  }

  export type addressUpdateWithoutStoreInput = {
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: cityUpdateOneRequiredWithoutAddressNestedInput
    customer?: customerUpdateManyWithoutAddressNestedInput
    staff?: staffUpdateManyWithoutAddressNestedInput
  }

  export type addressUncheckedUpdateWithoutStoreInput = {
    address_id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    city_id?: IntFieldUpdateOperationsInput | number
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUncheckedUpdateManyWithoutAddressNestedInput
    staff?: staffUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type film_actorCreateManyActorInput = {
    film_id: number
    last_update?: Date | string
  }

  export type film_actorUpdateWithoutActorInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film?: filmUpdateOneRequiredWithoutFilm_actorNestedInput
  }

  export type film_actorUncheckedUpdateWithoutActorInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_actorUncheckedUpdateManyWithoutActorInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customerCreateManyAddressInput = {
    customer_id?: number
    store_id: number
    first_name: string
    last_name: string
    email?: string | null
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
  }

  export type staffCreateManyAddressInput = {
    staff_id?: number
    first_name: string
    last_name: string
    email?: string | null
    store_id: number
    active?: boolean
    username: string
    password?: string | null
    last_update?: Date | string
    picture?: Uint8Array | null
  }

  export type storeCreateManyAddressInput = {
    store_id?: number
    manager_staff_id: number
    last_update?: Date | string
  }

  export type customerUpdateWithoutAddressInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    store?: storeUpdateOneRequiredWithoutCustomerNestedInput
    film_comment?: film_commentUpdateManyWithoutCustomerNestedInput
    mention?: mentionUpdateManyWithoutCustomerNestedInput
    notification?: notificationUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUpdateManyWithoutCustomerNestedInput
    rental?: rentalUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateWithoutAddressInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    film_comment?: film_commentUncheckedUpdateManyWithoutCustomerNestedInput
    mention?: mentionUncheckedUpdateManyWithoutCustomerNestedInput
    notification?: notificationUncheckedUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUncheckedUpdateManyWithoutCustomerNestedInput
    rental?: rentalUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateManyWithoutAddressInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type staffUpdateWithoutAddressInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    username?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    rental?: rentalUpdateManyWithoutStaffNestedInput
    store?: storeUpdateOneRequiredWithoutStaffNestedInput
  }

  export type staffUncheckedUpdateWithoutAddressInput = {
    staff_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    username?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    rental?: rentalUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type staffUncheckedUpdateManyWithoutAddressInput = {
    staff_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    store_id?: IntFieldUpdateOperationsInput | number
    active?: BoolFieldUpdateOperationsInput | boolean
    username?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }

  export type storeUpdateWithoutAddressInput = {
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateManyWithoutStoreNestedInput
    inventory?: inventoryUpdateManyWithoutStoreNestedInput
    staff?: staffUpdateManyWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateWithoutAddressInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUncheckedUpdateManyWithoutStoreNestedInput
    inventory?: inventoryUncheckedUpdateManyWithoutStoreNestedInput
    staff?: staffUncheckedUpdateManyWithoutStoreNestedInput
  }

  export type storeUncheckedUpdateManyWithoutAddressInput = {
    store_id?: IntFieldUpdateOperationsInput | number
    manager_staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_categoryCreateManyCategoryInput = {
    film_id: number
    last_update?: Date | string
  }

  export type film_categoryUpdateWithoutCategoryInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film?: filmUpdateOneRequiredWithoutFilm_categoryNestedInput
  }

  export type film_categoryUncheckedUpdateWithoutCategoryInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_categoryUncheckedUpdateManyWithoutCategoryInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type addressCreateManyCityInput = {
    address_id?: number
    address: string
    address2?: string | null
    district: string
    postal_code?: string | null
    phone: string
    last_update?: Date | string
  }

  export type addressUpdateWithoutCityInput = {
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateManyWithoutAddressNestedInput
    staff?: staffUpdateManyWithoutAddressNestedInput
    store?: storeUpdateManyWithoutAddressNestedInput
  }

  export type addressUncheckedUpdateWithoutCityInput = {
    address_id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUncheckedUpdateManyWithoutAddressNestedInput
    staff?: staffUncheckedUpdateManyWithoutAddressNestedInput
    store?: storeUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type addressUncheckedUpdateManyWithoutCityInput = {
    address_id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    address2?: NullableStringFieldUpdateOperationsInput | string | null
    district?: StringFieldUpdateOperationsInput | string
    postal_code?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type cityCreateManyCountryInput = {
    city_id?: number
    city: string
    last_update?: Date | string
  }

  export type cityUpdateWithoutCountryInput = {
    city?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: addressUpdateManyWithoutCityNestedInput
  }

  export type cityUncheckedUpdateWithoutCountryInput = {
    city_id?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: addressUncheckedUpdateManyWithoutCityNestedInput
  }

  export type cityUncheckedUpdateManyWithoutCountryInput = {
    city_id?: IntFieldUpdateOperationsInput | number
    city?: StringFieldUpdateOperationsInput | string
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_commentCreateManyCustomerInput = {
    comment_id?: number
    post_id: number
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type mentionCreateManyCustomerInput = {
    mention_id?: number
    created_at: Date | string
    comment_id: number
  }

  export type notificationCreateManyCustomerInput = {
    notification_id?: number
    mention_id: number
    content: string
    created_at: Date | string
    is_read: boolean
    read_at: Date | string
  }

  export type post_reactionCreateManyCustomerInput = {
    reaction_id?: number
    reaction_type?: $Enums.reaction_type | null
    post_id: number
    created_at: Date | string
  }

  export type rentalCreateManyCustomerInput = {
    rental_id?: number
    rental_date: Date | string
    inventory_id: number
    return_date?: Date | string | null
    staff_id: number
    last_update?: Date | string
  }

  export type film_commentUpdateWithoutCustomerInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    film_post?: film_postUpdateOneRequiredWithoutFilm_commentNestedInput
    mention?: mentionUpdateManyWithoutFilm_commentNestedInput
  }

  export type film_commentUncheckedUpdateWithoutCustomerInput = {
    comment_id?: IntFieldUpdateOperationsInput | number
    post_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    mention?: mentionUncheckedUpdateManyWithoutFilm_commentNestedInput
  }

  export type film_commentUncheckedUpdateManyWithoutCustomerInput = {
    comment_id?: IntFieldUpdateOperationsInput | number
    post_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mentionUpdateWithoutCustomerInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    film_comment?: film_commentUpdateOneRequiredWithoutMentionNestedInput
    notification?: notificationUpdateOneWithoutMentionNestedInput
  }

  export type mentionUncheckedUpdateWithoutCustomerInput = {
    mention_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment_id?: IntFieldUpdateOperationsInput | number
    notification?: notificationUncheckedUpdateOneWithoutMentionNestedInput
  }

  export type mentionUncheckedUpdateManyWithoutCustomerInput = {
    mention_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    comment_id?: IntFieldUpdateOperationsInput | number
  }

  export type notificationUpdateWithoutCustomerInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    read_at?: DateTimeFieldUpdateOperationsInput | Date | string
    mention?: mentionUpdateOneRequiredWithoutNotificationNestedInput
  }

  export type notificationUncheckedUpdateWithoutCustomerInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    mention_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    read_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type notificationUncheckedUpdateManyWithoutCustomerInput = {
    notification_id?: IntFieldUpdateOperationsInput | number
    mention_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    is_read?: BoolFieldUpdateOperationsInput | boolean
    read_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type post_reactionUpdateWithoutCustomerInput = {
    reaction_type?: NullableEnumreaction_typeFieldUpdateOperationsInput | $Enums.reaction_type | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    film_post?: film_postUpdateOneRequiredWithoutPost_reactionNestedInput
  }

  export type post_reactionUncheckedUpdateWithoutCustomerInput = {
    reaction_id?: IntFieldUpdateOperationsInput | number
    reaction_type?: NullableEnumreaction_typeFieldUpdateOperationsInput | $Enums.reaction_type | null
    post_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type post_reactionUncheckedUpdateManyWithoutCustomerInput = {
    reaction_id?: IntFieldUpdateOperationsInput | number
    reaction_type?: NullableEnumreaction_typeFieldUpdateOperationsInput | $Enums.reaction_type | null
    post_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rentalUpdateWithoutCustomerInput = {
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory?: inventoryUpdateOneRequiredWithoutRentalNestedInput
    staff?: staffUpdateOneRequiredWithoutRentalNestedInput
  }

  export type rentalUncheckedUpdateWithoutCustomerInput = {
    rental_id?: IntFieldUpdateOperationsInput | number
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory_id?: IntFieldUpdateOperationsInput | number
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rentalUncheckedUpdateManyWithoutCustomerInput = {
    rental_id?: IntFieldUpdateOperationsInput | number
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory_id?: IntFieldUpdateOperationsInput | number
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_actorUpdateWithoutFilmInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    actor?: actorUpdateOneRequiredWithoutFilm_actorNestedInput
  }

  export type film_actorUncheckedUpdateWithoutFilmInput = {
    actor_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_actorCreateManyFilmInput = {
    actor_id: number
    last_update?: Date | string
  }

  export type film_actorUncheckedUpdateManyWithoutFilmInput = {
    actor_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_categoryUpdateWithoutFilmInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: categoryUpdateOneRequiredWithoutFilm_categoryNestedInput
  }

  export type film_categoryUncheckedUpdateWithoutFilmInput = {
    category_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_categoryCreateManyFilmInput = {
    category_id: number
    last_update?: Date | string
  }

  export type film_categoryUncheckedUpdateManyWithoutFilmInput = {
    category_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type film_postUpdateWithoutFilmInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    film_comment?: film_commentUpdateManyWithoutFilm_postNestedInput
    post_reaction?: post_reactionUpdateManyWithoutFilm_postNestedInput
  }

  export type film_postUncheckedUpdateWithoutFilmInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    film_comment?: film_commentUncheckedUpdateManyWithoutFilm_postNestedInput
    post_reaction?: post_reactionUncheckedUpdateManyWithoutFilm_postNestedInput
  }

  export type film_postCreateManyFilmInput = {
    post_id?: number
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type film_postUncheckedUpdateManyWithoutFilmInput = {
    post_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type inventoryUpdateWithoutFilmInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    store?: storeUpdateOneRequiredWithoutInventoryNestedInput
    rental?: rentalUpdateManyWithoutInventoryNestedInput
  }

  export type inventoryUncheckedUpdateWithoutFilmInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: rentalUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type inventoryCreateManyFilmInput = {
    inventory_id?: number
    store_id: number
    last_update?: Date | string
  }

  export type inventoryUncheckedUpdateManyWithoutFilmInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    store_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type mentionCreateManyFilm_commentInput = {
    mention_id?: number
    created_at: Date | string
    mentioned_customer_id: number
  }

  export type mentionUpdateWithoutFilm_commentInput = {
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateOneRequiredWithoutMentionNestedInput
    notification?: notificationUpdateOneWithoutMentionNestedInput
  }

  export type mentionUncheckedUpdateWithoutFilm_commentInput = {
    mention_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    mentioned_customer_id?: IntFieldUpdateOperationsInput | number
    notification?: notificationUncheckedUpdateOneWithoutMentionNestedInput
  }

  export type mentionUncheckedUpdateManyWithoutFilm_commentInput = {
    mention_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    mentioned_customer_id?: IntFieldUpdateOperationsInput | number
  }

  export type film_commentCreateManyFilm_postInput = {
    comment_id?: number
    customer_id: number
    content: string
    created_at: Date | string
    updated_at: Date | string
  }

  export type post_reactionCreateManyFilm_postInput = {
    reaction_id?: number
    reaction_type?: $Enums.reaction_type | null
    customer_id: number
    created_at: Date | string
  }

  export type film_commentUpdateWithoutFilm_postInput = {
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateOneRequiredWithoutFilm_commentNestedInput
    mention?: mentionUpdateManyWithoutFilm_commentNestedInput
  }

  export type film_commentUncheckedUpdateWithoutFilm_postInput = {
    comment_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
    mention?: mentionUncheckedUpdateManyWithoutFilm_commentNestedInput
  }

  export type film_commentUncheckedUpdateManyWithoutFilm_postInput = {
    comment_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type post_reactionUpdateWithoutFilm_postInput = {
    reaction_type?: NullableEnumreaction_typeFieldUpdateOperationsInput | $Enums.reaction_type | null
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateOneRequiredWithoutPost_reactionNestedInput
  }

  export type post_reactionUncheckedUpdateWithoutFilm_postInput = {
    reaction_id?: IntFieldUpdateOperationsInput | number
    reaction_type?: NullableEnumreaction_typeFieldUpdateOperationsInput | $Enums.reaction_type | null
    customer_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type post_reactionUncheckedUpdateManyWithoutFilm_postInput = {
    reaction_id?: IntFieldUpdateOperationsInput | number
    reaction_type?: NullableEnumreaction_typeFieldUpdateOperationsInput | $Enums.reaction_type | null
    customer_id?: IntFieldUpdateOperationsInput | number
    created_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rentalCreateManyInventoryInput = {
    rental_id?: number
    rental_date: Date | string
    customer_id: number
    return_date?: Date | string | null
    staff_id: number
    last_update?: Date | string
  }

  export type rentalUpdateWithoutInventoryInput = {
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateOneRequiredWithoutRentalNestedInput
    staff?: staffUpdateOneRequiredWithoutRentalNestedInput
  }

  export type rentalUncheckedUpdateWithoutInventoryInput = {
    rental_id?: IntFieldUpdateOperationsInput | number
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    customer_id?: IntFieldUpdateOperationsInput | number
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rentalUncheckedUpdateManyWithoutInventoryInput = {
    rental_id?: IntFieldUpdateOperationsInput | number
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    customer_id?: IntFieldUpdateOperationsInput | number
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    staff_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type filmUpdateWithoutLanguage_film_language_idTolanguageInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    language_film_original_language_idTolanguage?: languageUpdateOneWithoutFilm_film_original_language_idTolanguageNestedInput
    film_actor?: film_actorUpdateManyWithoutFilmNestedInput
    film_category?: film_categoryUpdateManyWithoutFilmNestedInput
    film_post?: film_postUpdateManyWithoutFilmNestedInput
    inventory?: inventoryUpdateManyWithoutFilmNestedInput
  }

  export type filmUncheckedUpdateWithoutLanguage_film_language_idTolanguageInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    original_language_id?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    film_actor?: film_actorUncheckedUpdateManyWithoutFilmNestedInput
    film_category?: film_categoryUncheckedUpdateManyWithoutFilmNestedInput
    film_post?: film_postUncheckedUpdateManyWithoutFilmNestedInput
    inventory?: inventoryUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type filmUncheckedUpdateManyWithoutLanguage_film_language_idTolanguageInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    original_language_id?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
  }

  export type filmUpdateWithoutLanguage_film_original_language_idTolanguageInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    language_film_language_idTolanguage?: languageUpdateOneRequiredWithoutFilm_film_language_idTolanguageNestedInput
    film_actor?: film_actorUpdateManyWithoutFilmNestedInput
    film_category?: film_categoryUpdateManyWithoutFilmNestedInput
    film_post?: film_postUpdateManyWithoutFilmNestedInput
    inventory?: inventoryUpdateManyWithoutFilmNestedInput
  }

  export type filmUncheckedUpdateWithoutLanguage_film_original_language_idTolanguageInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    language_id?: IntFieldUpdateOperationsInput | number
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
    film_actor?: film_actorUncheckedUpdateManyWithoutFilmNestedInput
    film_category?: film_categoryUncheckedUpdateManyWithoutFilmNestedInput
    film_post?: film_postUncheckedUpdateManyWithoutFilmNestedInput
    inventory?: inventoryUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type filmUncheckedUpdateManyWithoutLanguage_film_original_language_idTolanguageInput = {
    film_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    release_year?: NullableIntFieldUpdateOperationsInput | number | null
    language_id?: IntFieldUpdateOperationsInput | number
    rental_duration?: IntFieldUpdateOperationsInput | number
    rental_rate?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    length?: NullableIntFieldUpdateOperationsInput | number | null
    replacement_cost?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    rating?: NullableEnummpaa_ratingFieldUpdateOperationsInput | $Enums.mpaa_rating | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    special_features?: filmUpdatespecial_featuresInput | string[]
  }

  export type rentalCreateManyStaffInput = {
    rental_id?: number
    rental_date: Date | string
    inventory_id: number
    customer_id: number
    return_date?: Date | string | null
    last_update?: Date | string
  }

  export type rentalUpdateWithoutStaffInput = {
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: customerUpdateOneRequiredWithoutRentalNestedInput
    inventory?: inventoryUpdateOneRequiredWithoutRentalNestedInput
  }

  export type rentalUncheckedUpdateWithoutStaffInput = {
    rental_id?: IntFieldUpdateOperationsInput | number
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type rentalUncheckedUpdateManyWithoutStaffInput = {
    rental_id?: IntFieldUpdateOperationsInput | number
    rental_date?: DateTimeFieldUpdateOperationsInput | Date | string
    inventory_id?: IntFieldUpdateOperationsInput | number
    customer_id?: IntFieldUpdateOperationsInput | number
    return_date?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type customerCreateManyStoreInput = {
    customer_id?: number
    first_name: string
    last_name: string
    email?: string | null
    address_id: number
    activebool?: boolean
    create_date?: Date | string
    last_update?: Date | string | null
    active?: number | null
  }

  export type inventoryCreateManyStoreInput = {
    inventory_id?: number
    film_id: number
    last_update?: Date | string
  }

  export type staffCreateManyStoreInput = {
    staff_id?: number
    first_name: string
    last_name: string
    address_id: number
    email?: string | null
    active?: boolean
    username: string
    password?: string | null
    last_update?: Date | string
    picture?: Uint8Array | null
  }

  export type customerUpdateWithoutStoreInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    address?: addressUpdateOneRequiredWithoutCustomerNestedInput
    film_comment?: film_commentUpdateManyWithoutCustomerNestedInput
    mention?: mentionUpdateManyWithoutCustomerNestedInput
    notification?: notificationUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUpdateManyWithoutCustomerNestedInput
    rental?: rentalUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateWithoutStoreInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address_id?: IntFieldUpdateOperationsInput | number
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
    film_comment?: film_commentUncheckedUpdateManyWithoutCustomerNestedInput
    mention?: mentionUncheckedUpdateManyWithoutCustomerNestedInput
    notification?: notificationUncheckedUpdateManyWithoutCustomerNestedInput
    post_reaction?: post_reactionUncheckedUpdateManyWithoutCustomerNestedInput
    rental?: rentalUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type customerUncheckedUpdateManyWithoutStoreInput = {
    customer_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    address_id?: IntFieldUpdateOperationsInput | number
    activebool?: BoolFieldUpdateOperationsInput | boolean
    create_date?: DateTimeFieldUpdateOperationsInput | Date | string
    last_update?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    active?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type inventoryUpdateWithoutStoreInput = {
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    film?: filmUpdateOneRequiredWithoutInventoryNestedInput
    rental?: rentalUpdateManyWithoutInventoryNestedInput
  }

  export type inventoryUncheckedUpdateWithoutStoreInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    film_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    rental?: rentalUncheckedUpdateManyWithoutInventoryNestedInput
  }

  export type inventoryUncheckedUpdateManyWithoutStoreInput = {
    inventory_id?: IntFieldUpdateOperationsInput | number
    film_id?: IntFieldUpdateOperationsInput | number
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type staffUpdateWithoutStoreInput = {
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    username?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    rental?: rentalUpdateManyWithoutStaffNestedInput
    address?: addressUpdateOneRequiredWithoutStaffNestedInput
  }

  export type staffUncheckedUpdateWithoutStoreInput = {
    staff_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    address_id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    username?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
    rental?: rentalUncheckedUpdateManyWithoutStaffNestedInput
  }

  export type staffUncheckedUpdateManyWithoutStoreInput = {
    staff_id?: IntFieldUpdateOperationsInput | number
    first_name?: StringFieldUpdateOperationsInput | string
    last_name?: StringFieldUpdateOperationsInput | string
    address_id?: IntFieldUpdateOperationsInput | number
    email?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    username?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    last_update?: DateTimeFieldUpdateOperationsInput | Date | string
    picture?: NullableBytesFieldUpdateOperationsInput | Uint8Array | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}